
mxt_drv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043bc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000018  20000000  000043bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001c0  20000018  000043d4  00020018  2**2
                  ALLOC
  3 .stack        00002000  200001d8  00004594  00020018  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d9c1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f9  00000000  00000000  0003da5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005db0  00000000  00000000  0003fb53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f28  00000000  00000000  00045903  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e30  00000000  00000000  0004682b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019075  00000000  00000000  0004765b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d3de  00000000  00000000  000606d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00088be6  00000000  00000000  0006daae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003778  00000000  00000000  000f6694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 21 00 20 29 01 00 00 21 02 00 00 21 02 00 00     .!. )...!...!...
	...
      2c:	21 02 00 00 00 00 00 00 00 00 00 00 21 02 00 00     !...........!...
      3c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      4c:	61 23 00 00 21 02 00 00 21 02 00 00 21 02 00 00     a#..!...!...!...
      5c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      6c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      7c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      8c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      9c:	21 02 00 00 21 02 00 00 21 02 00 00 21 02 00 00     !...!...!...!...
      ac:	21 02 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	000043bc 	.word	0x000043bc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000001c 	.word	0x2000001c
     108:	000043bc 	.word	0x000043bc
     10c:	000043bc 	.word	0x000043bc
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00000a2d 	.word	0x00000a2d

00000128 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     12e:	4b2f      	ldr	r3, [pc, #188]	; (1ec <Reset_Handler+0xc4>)
     130:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     132:	4b2f      	ldr	r3, [pc, #188]	; (1f0 <Reset_Handler+0xc8>)
     134:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     136:	687a      	ldr	r2, [r7, #4]
     138:	683b      	ldr	r3, [r7, #0]
     13a:	429a      	cmp	r2, r3
     13c:	d00c      	beq.n	158 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     13e:	e007      	b.n	150 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     140:	683b      	ldr	r3, [r7, #0]
     142:	1d1a      	adds	r2, r3, #4
     144:	603a      	str	r2, [r7, #0]
     146:	687a      	ldr	r2, [r7, #4]
     148:	1d11      	adds	r1, r2, #4
     14a:	6079      	str	r1, [r7, #4]
     14c:	6812      	ldr	r2, [r2, #0]
     14e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     150:	683a      	ldr	r2, [r7, #0]
     152:	4b28      	ldr	r3, [pc, #160]	; (1f4 <Reset_Handler+0xcc>)
     154:	429a      	cmp	r2, r3
     156:	d3f3      	bcc.n	140 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     158:	4b27      	ldr	r3, [pc, #156]	; (1f8 <Reset_Handler+0xd0>)
     15a:	603b      	str	r3, [r7, #0]
     15c:	e004      	b.n	168 <Reset_Handler+0x40>
                *pDest++ = 0;
     15e:	683b      	ldr	r3, [r7, #0]
     160:	1d1a      	adds	r2, r3, #4
     162:	603a      	str	r2, [r7, #0]
     164:	2200      	movs	r2, #0
     166:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     168:	683a      	ldr	r2, [r7, #0]
     16a:	4b24      	ldr	r3, [pc, #144]	; (1fc <Reset_Handler+0xd4>)
     16c:	429a      	cmp	r2, r3
     16e:	d3f6      	bcc.n	15e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     170:	4b23      	ldr	r3, [pc, #140]	; (200 <Reset_Handler+0xd8>)
     172:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     174:	4b23      	ldr	r3, [pc, #140]	; (204 <Reset_Handler+0xdc>)
     176:	687a      	ldr	r2, [r7, #4]
     178:	21ff      	movs	r1, #255	; 0xff
     17a:	438a      	bics	r2, r1
     17c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17e:	4a22      	ldr	r2, [pc, #136]	; (208 <Reset_Handler+0xe0>)
     180:	2390      	movs	r3, #144	; 0x90
     182:	005b      	lsls	r3, r3, #1
     184:	2102      	movs	r1, #2
     186:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     188:	4a20      	ldr	r2, [pc, #128]	; (20c <Reset_Handler+0xe4>)
     18a:	78d3      	ldrb	r3, [r2, #3]
     18c:	2103      	movs	r1, #3
     18e:	438b      	bics	r3, r1
     190:	1c19      	adds	r1, r3, #0
     192:	2302      	movs	r3, #2
     194:	430b      	orrs	r3, r1
     196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     198:	4a1c      	ldr	r2, [pc, #112]	; (20c <Reset_Handler+0xe4>)
     19a:	78d3      	ldrb	r3, [r2, #3]
     19c:	210c      	movs	r1, #12
     19e:	438b      	bics	r3, r1
     1a0:	1c19      	adds	r1, r3, #0
     1a2:	2308      	movs	r3, #8
     1a4:	430b      	orrs	r3, r1
     1a6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a8:	4a19      	ldr	r2, [pc, #100]	; (210 <Reset_Handler+0xe8>)
     1aa:	7b93      	ldrb	r3, [r2, #14]
     1ac:	2130      	movs	r1, #48	; 0x30
     1ae:	438b      	bics	r3, r1
     1b0:	1c19      	adds	r1, r3, #0
     1b2:	2320      	movs	r3, #32
     1b4:	430b      	orrs	r3, r1
     1b6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b8:	4a15      	ldr	r2, [pc, #84]	; (210 <Reset_Handler+0xe8>)
     1ba:	7b93      	ldrb	r3, [r2, #14]
     1bc:	210c      	movs	r1, #12
     1be:	438b      	bics	r3, r1
     1c0:	1c19      	adds	r1, r3, #0
     1c2:	2308      	movs	r3, #8
     1c4:	430b      	orrs	r3, r1
     1c6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1c8:	4a11      	ldr	r2, [pc, #68]	; (210 <Reset_Handler+0xe8>)
     1ca:	7b93      	ldrb	r3, [r2, #14]
     1cc:	2103      	movs	r1, #3
     1ce:	438b      	bics	r3, r1
     1d0:	1c19      	adds	r1, r3, #0
     1d2:	2302      	movs	r3, #2
     1d4:	430b      	orrs	r3, r1
     1d6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1d8:	4a0e      	ldr	r2, [pc, #56]	; (214 <Reset_Handler+0xec>)
     1da:	6853      	ldr	r3, [r2, #4]
     1dc:	2180      	movs	r1, #128	; 0x80
     1de:	430b      	orrs	r3, r1
     1e0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1e2:	4b0d      	ldr	r3, [pc, #52]	; (218 <Reset_Handler+0xf0>)
     1e4:	4798      	blx	r3

        /* Branch to main function */
        main();
     1e6:	4b0d      	ldr	r3, [pc, #52]	; (21c <Reset_Handler+0xf4>)
     1e8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     1ea:	e7fe      	b.n	1ea <Reset_Handler+0xc2>
     1ec:	000043bc 	.word	0x000043bc
     1f0:	20000000 	.word	0x20000000
     1f4:	20000018 	.word	0x20000018
     1f8:	20000018 	.word	0x20000018
     1fc:	200001d8 	.word	0x200001d8
     200:	00000000 	.word	0x00000000
     204:	e000ed00 	.word	0xe000ed00
     208:	41007000 	.word	0x41007000
     20c:	41005000 	.word	0x41005000
     210:	41004800 	.word	0x41004800
     214:	41004000 	.word	0x41004000
     218:	000033a9 	.word	0x000033a9
     21c:	00003391 	.word	0x00003391

00000220 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     220:	b580      	push	{r7, lr}
     222:	af00      	add	r7, sp, #0
        while (1) {
     224:	e7fe      	b.n	224 <Dummy_Handler+0x4>

00000226 <hri_gclk_write_CLKCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
     226:	b580      	push	{r7, lr}
     228:	b082      	sub	sp, #8
     22a:	af00      	add	r7, sp, #0
     22c:	6078      	str	r0, [r7, #4]
     22e:	000a      	movs	r2, r1
     230:	1cbb      	adds	r3, r7, #2
     232:	801a      	strh	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     234:	687b      	ldr	r3, [r7, #4]
     236:	1cba      	adds	r2, r7, #2
     238:	8812      	ldrh	r2, [r2, #0]
     23a:	805a      	strh	r2, [r3, #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46bd      	mov	sp, r7
     240:	b002      	add	sp, #8
     242:	bd80      	pop	{r7, pc}

00000244 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     244:	b580      	push	{r7, lr}
     246:	b084      	sub	sp, #16
     248:	af00      	add	r7, sp, #0
     24a:	60f8      	str	r0, [r7, #12]
     24c:	607a      	str	r2, [r7, #4]
     24e:	230b      	movs	r3, #11
     250:	18fb      	adds	r3, r7, r3
     252:	1c0a      	adds	r2, r1, #0
     254:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     256:	230b      	movs	r3, #11
     258:	18fb      	adds	r3, r7, r3
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	68fa      	ldr	r2, [r7, #12]
     25e:	01db      	lsls	r3, r3, #7
     260:	18d3      	adds	r3, r2, r3
     262:	3304      	adds	r3, #4
     264:	687a      	ldr	r2, [r7, #4]
     266:	601a      	str	r2, [r3, #0]
}
     268:	46c0      	nop			; (mov r8, r8)
     26a:	46bd      	mov	sp, r7
     26c:	b004      	add	sp, #16
     26e:	bd80      	pop	{r7, pc}

00000270 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     270:	b580      	push	{r7, lr}
     272:	b084      	sub	sp, #16
     274:	af00      	add	r7, sp, #0
     276:	60f8      	str	r0, [r7, #12]
     278:	607a      	str	r2, [r7, #4]
     27a:	230b      	movs	r3, #11
     27c:	18fb      	adds	r3, r7, r3
     27e:	1c0a      	adds	r2, r1, #0
     280:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	781b      	ldrb	r3, [r3, #0]
     288:	68fa      	ldr	r2, [r7, #12]
     28a:	01db      	lsls	r3, r3, #7
     28c:	18d3      	adds	r3, r2, r3
     28e:	3318      	adds	r3, #24
     290:	687a      	ldr	r2, [r7, #4]
     292:	601a      	str	r2, [r3, #0]
}
     294:	46c0      	nop			; (mov r8, r8)
     296:	46bd      	mov	sp, r7
     298:	b004      	add	sp, #16
     29a:	bd80      	pop	{r7, pc}

0000029c <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     29c:	b580      	push	{r7, lr}
     29e:	b084      	sub	sp, #16
     2a0:	af00      	add	r7, sp, #0
     2a2:	60f8      	str	r0, [r7, #12]
     2a4:	607a      	str	r2, [r7, #4]
     2a6:	230b      	movs	r3, #11
     2a8:	18fb      	adds	r3, r7, r3
     2aa:	1c0a      	adds	r2, r1, #0
     2ac:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	68fa      	ldr	r2, [r7, #12]
     2b6:	01db      	lsls	r3, r3, #7
     2b8:	18d3      	adds	r3, r2, r3
     2ba:	3314      	adds	r3, #20
     2bc:	687a      	ldr	r2, [r7, #4]
     2be:	601a      	str	r2, [r3, #0]
}
     2c0:	46c0      	nop			; (mov r8, r8)
     2c2:	46bd      	mov	sp, r7
     2c4:	b004      	add	sp, #16
     2c6:	bd80      	pop	{r7, pc}

000002c8 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2c8:	b590      	push	{r4, r7, lr}
     2ca:	b085      	sub	sp, #20
     2cc:	af00      	add	r7, sp, #0
     2ce:	6078      	str	r0, [r7, #4]
     2d0:	000c      	movs	r4, r1
     2d2:	0010      	movs	r0, r2
     2d4:	0019      	movs	r1, r3
     2d6:	1cfb      	adds	r3, r7, #3
     2d8:	1c22      	adds	r2, r4, #0
     2da:	701a      	strb	r2, [r3, #0]
     2dc:	1cbb      	adds	r3, r7, #2
     2de:	1c02      	adds	r2, r0, #0
     2e0:	701a      	strb	r2, [r3, #0]
     2e2:	1c7b      	adds	r3, r7, #1
     2e4:	1c0a      	adds	r2, r1, #0
     2e6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2e8:	1cfb      	adds	r3, r7, #3
     2ea:	7819      	ldrb	r1, [r3, #0]
     2ec:	1cbb      	adds	r3, r7, #2
     2ee:	781a      	ldrb	r2, [r3, #0]
     2f0:	230f      	movs	r3, #15
     2f2:	18fb      	adds	r3, r7, r3
     2f4:	6878      	ldr	r0, [r7, #4]
     2f6:	2430      	movs	r4, #48	; 0x30
     2f8:	01c9      	lsls	r1, r1, #7
     2fa:	1841      	adds	r1, r0, r1
     2fc:	188a      	adds	r2, r1, r2
     2fe:	1912      	adds	r2, r2, r4
     300:	7812      	ldrb	r2, [r2, #0]
     302:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     304:	230f      	movs	r3, #15
     306:	18fb      	adds	r3, r7, r3
     308:	220f      	movs	r2, #15
     30a:	18ba      	adds	r2, r7, r2
     30c:	7812      	ldrb	r2, [r2, #0]
     30e:	210f      	movs	r1, #15
     310:	438a      	bics	r2, r1
     312:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     314:	1c7b      	adds	r3, r7, #1
     316:	781b      	ldrb	r3, [r3, #0]
     318:	220f      	movs	r2, #15
     31a:	4013      	ands	r3, r2
     31c:	b2d9      	uxtb	r1, r3
     31e:	230f      	movs	r3, #15
     320:	18fb      	adds	r3, r7, r3
     322:	220f      	movs	r2, #15
     324:	18ba      	adds	r2, r7, r2
     326:	7812      	ldrb	r2, [r2, #0]
     328:	430a      	orrs	r2, r1
     32a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     32c:	1cfb      	adds	r3, r7, #3
     32e:	781a      	ldrb	r2, [r3, #0]
     330:	1cbb      	adds	r3, r7, #2
     332:	781b      	ldrb	r3, [r3, #0]
     334:	6879      	ldr	r1, [r7, #4]
     336:	2030      	movs	r0, #48	; 0x30
     338:	01d2      	lsls	r2, r2, #7
     33a:	188a      	adds	r2, r1, r2
     33c:	18d3      	adds	r3, r2, r3
     33e:	181b      	adds	r3, r3, r0
     340:	220f      	movs	r2, #15
     342:	18ba      	adds	r2, r7, r2
     344:	7812      	ldrb	r2, [r2, #0]
     346:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     348:	46c0      	nop			; (mov r8, r8)
     34a:	46bd      	mov	sp, r7
     34c:	b005      	add	sp, #20
     34e:	bd90      	pop	{r4, r7, pc}

00000350 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     350:	b590      	push	{r4, r7, lr}
     352:	b085      	sub	sp, #20
     354:	af00      	add	r7, sp, #0
     356:	6078      	str	r0, [r7, #4]
     358:	000c      	movs	r4, r1
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	1cfb      	adds	r3, r7, #3
     360:	1c22      	adds	r2, r4, #0
     362:	701a      	strb	r2, [r3, #0]
     364:	1cbb      	adds	r3, r7, #2
     366:	1c02      	adds	r2, r0, #0
     368:	701a      	strb	r2, [r3, #0]
     36a:	1c7b      	adds	r3, r7, #1
     36c:	1c0a      	adds	r2, r1, #0
     36e:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     370:	1cfb      	adds	r3, r7, #3
     372:	7819      	ldrb	r1, [r3, #0]
     374:	1cbb      	adds	r3, r7, #2
     376:	781a      	ldrb	r2, [r3, #0]
     378:	230f      	movs	r3, #15
     37a:	18fb      	adds	r3, r7, r3
     37c:	6878      	ldr	r0, [r7, #4]
     37e:	2430      	movs	r4, #48	; 0x30
     380:	01c9      	lsls	r1, r1, #7
     382:	1841      	adds	r1, r0, r1
     384:	188a      	adds	r2, r1, r2
     386:	1912      	adds	r2, r2, r4
     388:	7812      	ldrb	r2, [r2, #0]
     38a:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     38c:	230f      	movs	r3, #15
     38e:	18fb      	adds	r3, r7, r3
     390:	220f      	movs	r2, #15
     392:	18ba      	adds	r2, r7, r2
     394:	7812      	ldrb	r2, [r2, #0]
     396:	210f      	movs	r1, #15
     398:	400a      	ands	r2, r1
     39a:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     39c:	1c7b      	adds	r3, r7, #1
     39e:	781b      	ldrb	r3, [r3, #0]
     3a0:	011b      	lsls	r3, r3, #4
     3a2:	b2d9      	uxtb	r1, r3
     3a4:	230f      	movs	r3, #15
     3a6:	18fb      	adds	r3, r7, r3
     3a8:	220f      	movs	r2, #15
     3aa:	18ba      	adds	r2, r7, r2
     3ac:	7812      	ldrb	r2, [r2, #0]
     3ae:	430a      	orrs	r2, r1
     3b0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3b2:	1cfb      	adds	r3, r7, #3
     3b4:	781a      	ldrb	r2, [r3, #0]
     3b6:	1cbb      	adds	r3, r7, #2
     3b8:	781b      	ldrb	r3, [r3, #0]
     3ba:	6879      	ldr	r1, [r7, #4]
     3bc:	2030      	movs	r0, #48	; 0x30
     3be:	01d2      	lsls	r2, r2, #7
     3c0:	188a      	adds	r2, r1, r2
     3c2:	18d3      	adds	r3, r2, r3
     3c4:	181b      	adds	r3, r3, r0
     3c6:	220f      	movs	r2, #15
     3c8:	18ba      	adds	r2, r7, r2
     3ca:	7812      	ldrb	r2, [r2, #0]
     3cc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	46bd      	mov	sp, r7
     3d2:	b005      	add	sp, #20
     3d4:	bd90      	pop	{r4, r7, pc}

000003d6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     3d6:	b590      	push	{r4, r7, lr}
     3d8:	b085      	sub	sp, #20
     3da:	af00      	add	r7, sp, #0
     3dc:	6078      	str	r0, [r7, #4]
     3de:	000c      	movs	r4, r1
     3e0:	0010      	movs	r0, r2
     3e2:	0019      	movs	r1, r3
     3e4:	1cfb      	adds	r3, r7, #3
     3e6:	1c22      	adds	r2, r4, #0
     3e8:	701a      	strb	r2, [r3, #0]
     3ea:	1cbb      	adds	r3, r7, #2
     3ec:	1c02      	adds	r2, r0, #0
     3ee:	701a      	strb	r2, [r3, #0]
     3f0:	1c7b      	adds	r3, r7, #1
     3f2:	1c0a      	adds	r2, r1, #0
     3f4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f6:	1cfb      	adds	r3, r7, #3
     3f8:	7819      	ldrb	r1, [r3, #0]
     3fa:	1cbb      	adds	r3, r7, #2
     3fc:	781a      	ldrb	r2, [r3, #0]
     3fe:	230f      	movs	r3, #15
     400:	18fb      	adds	r3, r7, r3
     402:	6878      	ldr	r0, [r7, #4]
     404:	2440      	movs	r4, #64	; 0x40
     406:	01c9      	lsls	r1, r1, #7
     408:	1841      	adds	r1, r0, r1
     40a:	188a      	adds	r2, r1, r2
     40c:	1912      	adds	r2, r2, r4
     40e:	7812      	ldrb	r2, [r2, #0]
     410:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     412:	230f      	movs	r3, #15
     414:	18fb      	adds	r3, r7, r3
     416:	220f      	movs	r2, #15
     418:	18ba      	adds	r2, r7, r2
     41a:	7812      	ldrb	r2, [r2, #0]
     41c:	2101      	movs	r1, #1
     41e:	438a      	bics	r2, r1
     420:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     422:	1c7b      	adds	r3, r7, #1
     424:	7819      	ldrb	r1, [r3, #0]
     426:	230f      	movs	r3, #15
     428:	18fb      	adds	r3, r7, r3
     42a:	220f      	movs	r2, #15
     42c:	18ba      	adds	r2, r7, r2
     42e:	7812      	ldrb	r2, [r2, #0]
     430:	430a      	orrs	r2, r1
     432:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     434:	1cfb      	adds	r3, r7, #3
     436:	781a      	ldrb	r2, [r3, #0]
     438:	1cbb      	adds	r3, r7, #2
     43a:	781b      	ldrb	r3, [r3, #0]
     43c:	6879      	ldr	r1, [r7, #4]
     43e:	2040      	movs	r0, #64	; 0x40
     440:	01d2      	lsls	r2, r2, #7
     442:	188a      	adds	r2, r1, r2
     444:	18d3      	adds	r3, r2, r3
     446:	181b      	adds	r3, r3, r0
     448:	220f      	movs	r2, #15
     44a:	18ba      	adds	r2, r7, r2
     44c:	7812      	ldrb	r2, [r2, #0]
     44e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     450:	46c0      	nop			; (mov r8, r8)
     452:	46bd      	mov	sp, r7
     454:	b005      	add	sp, #20
     456:	bd90      	pop	{r4, r7, pc}

00000458 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     458:	b5b0      	push	{r4, r5, r7, lr}
     45a:	b082      	sub	sp, #8
     45c:	af00      	add	r7, sp, #0
     45e:	6078      	str	r0, [r7, #4]
     460:	0008      	movs	r0, r1
     462:	0011      	movs	r1, r2
     464:	1cfb      	adds	r3, r7, #3
     466:	1c02      	adds	r2, r0, #0
     468:	701a      	strb	r2, [r3, #0]
     46a:	1cbb      	adds	r3, r7, #2
     46c:	1c0a      	adds	r2, r1, #0
     46e:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     470:	1cfb      	adds	r3, r7, #3
     472:	781a      	ldrb	r2, [r3, #0]
     474:	1cbb      	adds	r3, r7, #2
     476:	781b      	ldrb	r3, [r3, #0]
     478:	1cf9      	adds	r1, r7, #3
     47a:	7808      	ldrb	r0, [r1, #0]
     47c:	1cb9      	adds	r1, r7, #2
     47e:	7809      	ldrb	r1, [r1, #0]
     480:	687c      	ldr	r4, [r7, #4]
     482:	2540      	movs	r5, #64	; 0x40
     484:	01c0      	lsls	r0, r0, #7
     486:	1820      	adds	r0, r4, r0
     488:	1841      	adds	r1, r0, r1
     48a:	1949      	adds	r1, r1, r5
     48c:	7809      	ldrb	r1, [r1, #0]
     48e:	b2c9      	uxtb	r1, r1
     490:	2004      	movs	r0, #4
     492:	4301      	orrs	r1, r0
     494:	b2cc      	uxtb	r4, r1
     496:	6879      	ldr	r1, [r7, #4]
     498:	2040      	movs	r0, #64	; 0x40
     49a:	01d2      	lsls	r2, r2, #7
     49c:	188a      	adds	r2, r1, r2
     49e:	18d3      	adds	r3, r2, r3
     4a0:	181b      	adds	r3, r3, r0
     4a2:	1c22      	adds	r2, r4, #0
     4a4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	46bd      	mov	sp, r7
     4aa:	b002      	add	sp, #8
     4ac:	bdb0      	pop	{r4, r5, r7, pc}

000004ae <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4ae:	b5b0      	push	{r4, r5, r7, lr}
     4b0:	b082      	sub	sp, #8
     4b2:	af00      	add	r7, sp, #0
     4b4:	6078      	str	r0, [r7, #4]
     4b6:	0008      	movs	r0, r1
     4b8:	0011      	movs	r1, r2
     4ba:	1cfb      	adds	r3, r7, #3
     4bc:	1c02      	adds	r2, r0, #0
     4be:	701a      	strb	r2, [r3, #0]
     4c0:	1cbb      	adds	r3, r7, #2
     4c2:	1c0a      	adds	r2, r1, #0
     4c4:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4c6:	1cfb      	adds	r3, r7, #3
     4c8:	781a      	ldrb	r2, [r3, #0]
     4ca:	1cbb      	adds	r3, r7, #2
     4cc:	781b      	ldrb	r3, [r3, #0]
     4ce:	1cf9      	adds	r1, r7, #3
     4d0:	7808      	ldrb	r0, [r1, #0]
     4d2:	1cb9      	adds	r1, r7, #2
     4d4:	7809      	ldrb	r1, [r1, #0]
     4d6:	687c      	ldr	r4, [r7, #4]
     4d8:	2540      	movs	r5, #64	; 0x40
     4da:	01c0      	lsls	r0, r0, #7
     4dc:	1820      	adds	r0, r4, r0
     4de:	1841      	adds	r1, r0, r1
     4e0:	1949      	adds	r1, r1, r5
     4e2:	7809      	ldrb	r1, [r1, #0]
     4e4:	b2c9      	uxtb	r1, r1
     4e6:	2004      	movs	r0, #4
     4e8:	4381      	bics	r1, r0
     4ea:	b2cc      	uxtb	r4, r1
     4ec:	6879      	ldr	r1, [r7, #4]
     4ee:	2040      	movs	r0, #64	; 0x40
     4f0:	01d2      	lsls	r2, r2, #7
     4f2:	188a      	adds	r2, r1, r2
     4f4:	18d3      	adds	r3, r2, r3
     4f6:	181b      	adds	r3, r3, r0
     4f8:	1c22      	adds	r2, r4, #0
     4fa:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4fc:	46c0      	nop			; (mov r8, r8)
     4fe:	46bd      	mov	sp, r7
     500:	b002      	add	sp, #8
     502:	bdb0      	pop	{r4, r5, r7, pc}

00000504 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     504:	b590      	push	{r4, r7, lr}
     506:	b083      	sub	sp, #12
     508:	af00      	add	r7, sp, #0
     50a:	0004      	movs	r4, r0
     50c:	0008      	movs	r0, r1
     50e:	0011      	movs	r1, r2
     510:	1dfb      	adds	r3, r7, #7
     512:	1c22      	adds	r2, r4, #0
     514:	701a      	strb	r2, [r3, #0]
     516:	1dbb      	adds	r3, r7, #6
     518:	1c02      	adds	r2, r0, #0
     51a:	701a      	strb	r2, [r3, #0]
     51c:	1d7b      	adds	r3, r7, #5
     51e:	1c0a      	adds	r2, r1, #0
     520:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     522:	1d7b      	adds	r3, r7, #5
     524:	781b      	ldrb	r3, [r3, #0]
     526:	2b01      	cmp	r3, #1
     528:	d00c      	beq.n	544 <_gpio_set_pin_pull_mode+0x40>
     52a:	2b02      	cmp	r3, #2
     52c:	d029      	beq.n	582 <_gpio_set_pin_pull_mode+0x7e>
     52e:	2b00      	cmp	r3, #0
     530:	d146      	bne.n	5c0 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     532:	1dbb      	adds	r3, r7, #6
     534:	781a      	ldrb	r2, [r3, #0]
     536:	1dfb      	adds	r3, r7, #7
     538:	781b      	ldrb	r3, [r3, #0]
     53a:	4827      	ldr	r0, [pc, #156]	; (5d8 <_gpio_set_pin_pull_mode+0xd4>)
     53c:	0019      	movs	r1, r3
     53e:	4b27      	ldr	r3, [pc, #156]	; (5dc <_gpio_set_pin_pull_mode+0xd8>)
     540:	4798      	blx	r3
		break;
     542:	e044      	b.n	5ce <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     544:	1dbb      	adds	r3, r7, #6
     546:	781b      	ldrb	r3, [r3, #0]
     548:	2201      	movs	r2, #1
     54a:	409a      	lsls	r2, r3
     54c:	1dfb      	adds	r3, r7, #7
     54e:	7819      	ldrb	r1, [r3, #0]
     550:	23c0      	movs	r3, #192	; 0xc0
     552:	05db      	lsls	r3, r3, #23
     554:	0018      	movs	r0, r3
     556:	4b22      	ldr	r3, [pc, #136]	; (5e0 <_gpio_set_pin_pull_mode+0xdc>)
     558:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     55a:	1dbb      	adds	r3, r7, #6
     55c:	781a      	ldrb	r2, [r3, #0]
     55e:	1dfb      	adds	r3, r7, #7
     560:	781b      	ldrb	r3, [r3, #0]
     562:	481d      	ldr	r0, [pc, #116]	; (5d8 <_gpio_set_pin_pull_mode+0xd4>)
     564:	0019      	movs	r1, r3
     566:	4b1f      	ldr	r3, [pc, #124]	; (5e4 <_gpio_set_pin_pull_mode+0xe0>)
     568:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     56a:	1dbb      	adds	r3, r7, #6
     56c:	781b      	ldrb	r3, [r3, #0]
     56e:	2201      	movs	r2, #1
     570:	409a      	lsls	r2, r3
     572:	1dfb      	adds	r3, r7, #7
     574:	7819      	ldrb	r1, [r3, #0]
     576:	23c0      	movs	r3, #192	; 0xc0
     578:	05db      	lsls	r3, r3, #23
     57a:	0018      	movs	r0, r3
     57c:	4b1a      	ldr	r3, [pc, #104]	; (5e8 <_gpio_set_pin_pull_mode+0xe4>)
     57e:	4798      	blx	r3
		break;
     580:	e025      	b.n	5ce <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     582:	1dbb      	adds	r3, r7, #6
     584:	781b      	ldrb	r3, [r3, #0]
     586:	2201      	movs	r2, #1
     588:	409a      	lsls	r2, r3
     58a:	1dfb      	adds	r3, r7, #7
     58c:	7819      	ldrb	r1, [r3, #0]
     58e:	23c0      	movs	r3, #192	; 0xc0
     590:	05db      	lsls	r3, r3, #23
     592:	0018      	movs	r0, r3
     594:	4b12      	ldr	r3, [pc, #72]	; (5e0 <_gpio_set_pin_pull_mode+0xdc>)
     596:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     598:	1dbb      	adds	r3, r7, #6
     59a:	781a      	ldrb	r2, [r3, #0]
     59c:	1dfb      	adds	r3, r7, #7
     59e:	781b      	ldrb	r3, [r3, #0]
     5a0:	480d      	ldr	r0, [pc, #52]	; (5d8 <_gpio_set_pin_pull_mode+0xd4>)
     5a2:	0019      	movs	r1, r3
     5a4:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <_gpio_set_pin_pull_mode+0xe0>)
     5a6:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     5a8:	1dbb      	adds	r3, r7, #6
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	2201      	movs	r2, #1
     5ae:	409a      	lsls	r2, r3
     5b0:	1dfb      	adds	r3, r7, #7
     5b2:	7819      	ldrb	r1, [r3, #0]
     5b4:	23c0      	movs	r3, #192	; 0xc0
     5b6:	05db      	lsls	r3, r3, #23
     5b8:	0018      	movs	r0, r3
     5ba:	4b0c      	ldr	r3, [pc, #48]	; (5ec <_gpio_set_pin_pull_mode+0xe8>)
     5bc:	4798      	blx	r3
		break;
     5be:	e006      	b.n	5ce <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     5c0:	4b0b      	ldr	r3, [pc, #44]	; (5f0 <_gpio_set_pin_pull_mode+0xec>)
     5c2:	2288      	movs	r2, #136	; 0x88
     5c4:	0019      	movs	r1, r3
     5c6:	2000      	movs	r0, #0
     5c8:	4b0a      	ldr	r3, [pc, #40]	; (5f4 <_gpio_set_pin_pull_mode+0xf0>)
     5ca:	4798      	blx	r3
		break;
     5cc:	46c0      	nop			; (mov r8, r8)
	}
}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	46bd      	mov	sp, r7
     5d2:	b003      	add	sp, #12
     5d4:	bd90      	pop	{r4, r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	41004400 	.word	0x41004400
     5dc:	000004af 	.word	0x000004af
     5e0:	00000245 	.word	0x00000245
     5e4:	00000459 	.word	0x00000459
     5e8:	00000271 	.word	0x00000271
     5ec:	0000029d 	.word	0x0000029d
     5f0:	00003420 	.word	0x00003420
     5f4:	00001e5d 	.word	0x00001e5d

000005f8 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     5f8:	b590      	push	{r4, r7, lr}
     5fa:	b085      	sub	sp, #20
     5fc:	af00      	add	r7, sp, #0
     5fe:	6078      	str	r0, [r7, #4]
     600:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     602:	687b      	ldr	r3, [r7, #4]
     604:	095a      	lsrs	r2, r3, #5
     606:	230f      	movs	r3, #15
     608:	18fb      	adds	r3, r7, r3
     60a:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     60c:	687b      	ldr	r3, [r7, #4]
     60e:	b2da      	uxtb	r2, r3
     610:	230e      	movs	r3, #14
     612:	18fb      	adds	r3, r7, r3
     614:	211f      	movs	r1, #31
     616:	400a      	ands	r2, r1
     618:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     61a:	683b      	ldr	r3, [r7, #0]
     61c:	3301      	adds	r3, #1
     61e:	d10a      	bne.n	636 <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     620:	230e      	movs	r3, #14
     622:	18fb      	adds	r3, r7, r3
     624:	781a      	ldrb	r2, [r3, #0]
     626:	230f      	movs	r3, #15
     628:	18fb      	adds	r3, r7, r3
     62a:	7819      	ldrb	r1, [r3, #0]
     62c:	481b      	ldr	r0, [pc, #108]	; (69c <_gpio_set_pin_function+0xa4>)
     62e:	2300      	movs	r3, #0
     630:	4c1b      	ldr	r4, [pc, #108]	; (6a0 <_gpio_set_pin_function+0xa8>)
     632:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     634:	e02e      	b.n	694 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     636:	230e      	movs	r3, #14
     638:	18fb      	adds	r3, r7, r3
     63a:	781a      	ldrb	r2, [r3, #0]
     63c:	230f      	movs	r3, #15
     63e:	18fb      	adds	r3, r7, r3
     640:	7819      	ldrb	r1, [r3, #0]
     642:	4816      	ldr	r0, [pc, #88]	; (69c <_gpio_set_pin_function+0xa4>)
     644:	2301      	movs	r3, #1
     646:	4c16      	ldr	r4, [pc, #88]	; (6a0 <_gpio_set_pin_function+0xa8>)
     648:	47a0      	blx	r4
		if (pin & 1) {
     64a:	230e      	movs	r3, #14
     64c:	18fb      	adds	r3, r7, r3
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	2201      	movs	r2, #1
     652:	4013      	ands	r3, r2
     654:	d00f      	beq.n	676 <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     656:	230e      	movs	r3, #14
     658:	18fb      	adds	r3, r7, r3
     65a:	781b      	ldrb	r3, [r3, #0]
     65c:	085b      	lsrs	r3, r3, #1
     65e:	b2da      	uxtb	r2, r3
     660:	683b      	ldr	r3, [r7, #0]
     662:	b2d8      	uxtb	r0, r3
     664:	230f      	movs	r3, #15
     666:	18fb      	adds	r3, r7, r3
     668:	7819      	ldrb	r1, [r3, #0]
     66a:	4c0c      	ldr	r4, [pc, #48]	; (69c <_gpio_set_pin_function+0xa4>)
     66c:	0003      	movs	r3, r0
     66e:	0020      	movs	r0, r4
     670:	4c0c      	ldr	r4, [pc, #48]	; (6a4 <_gpio_set_pin_function+0xac>)
     672:	47a0      	blx	r4
}
     674:	e00e      	b.n	694 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     676:	230e      	movs	r3, #14
     678:	18fb      	adds	r3, r7, r3
     67a:	781b      	ldrb	r3, [r3, #0]
     67c:	085b      	lsrs	r3, r3, #1
     67e:	b2da      	uxtb	r2, r3
     680:	683b      	ldr	r3, [r7, #0]
     682:	b2d8      	uxtb	r0, r3
     684:	230f      	movs	r3, #15
     686:	18fb      	adds	r3, r7, r3
     688:	7819      	ldrb	r1, [r3, #0]
     68a:	4c04      	ldr	r4, [pc, #16]	; (69c <_gpio_set_pin_function+0xa4>)
     68c:	0003      	movs	r3, r0
     68e:	0020      	movs	r0, r4
     690:	4c05      	ldr	r4, [pc, #20]	; (6a8 <_gpio_set_pin_function+0xb0>)
     692:	47a0      	blx	r4
}
     694:	46c0      	nop			; (mov r8, r8)
     696:	46bd      	mov	sp, r7
     698:	b005      	add	sp, #20
     69a:	bd90      	pop	{r4, r7, pc}
     69c:	41004400 	.word	0x41004400
     6a0:	000003d7 	.word	0x000003d7
     6a4:	00000351 	.word	0x00000351
     6a8:	000002c9 	.word	0x000002c9

000006ac <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b082      	sub	sp, #8
     6b0:	af00      	add	r7, sp, #0
     6b2:	0002      	movs	r2, r0
     6b4:	1dfb      	adds	r3, r7, #7
     6b6:	701a      	strb	r2, [r3, #0]
     6b8:	1dbb      	adds	r3, r7, #6
     6ba:	1c0a      	adds	r2, r1, #0
     6bc:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     6be:	1dfb      	adds	r3, r7, #7
     6c0:	781b      	ldrb	r3, [r3, #0]
     6c2:	095b      	lsrs	r3, r3, #5
     6c4:	b2d8      	uxtb	r0, r3
     6c6:	1dfb      	adds	r3, r7, #7
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	221f      	movs	r2, #31
     6cc:	4013      	ands	r3, r2
     6ce:	b2d9      	uxtb	r1, r3
     6d0:	1dbb      	adds	r3, r7, #6
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	001a      	movs	r2, r3
     6d6:	4b03      	ldr	r3, [pc, #12]	; (6e4 <gpio_set_pin_pull_mode+0x38>)
     6d8:	4798      	blx	r3
}
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	46bd      	mov	sp, r7
     6de:	b002      	add	sp, #8
     6e0:	bd80      	pop	{r7, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	00000505 	.word	0x00000505

000006e8 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	b082      	sub	sp, #8
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     6f2:	683a      	ldr	r2, [r7, #0]
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	0011      	movs	r1, r2
     6f8:	0018      	movs	r0, r3
     6fa:	4b03      	ldr	r3, [pc, #12]	; (708 <gpio_set_pin_function+0x20>)
     6fc:	4798      	blx	r3
}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	46bd      	mov	sp, r7
     702:	b002      	add	sp, #8
     704:	bd80      	pop	{r7, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	000005f9 	.word	0x000005f9

0000070c <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     70c:	b580      	push	{r7, lr}
     70e:	af00      	add	r7, sp, #0
	_init_chip();
     710:	4b02      	ldr	r3, [pc, #8]	; (71c <init_mcu+0x10>)
     712:	4798      	blx	r3
}
     714:	46c0      	nop			; (mov r8, r8)
     716:	46bd      	mov	sp, r7
     718:	bd80      	pop	{r7, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	00001f89 	.word	0x00001f89

00000720 <_gclk_enable_channel>:
 *
 * \param[in] channel The channel to enable clock for
 * \param[in] source The clock source for the given channel
 */
static inline void _gclk_enable_channel(const uint8_t channel, const uint8_t source)
{
     720:	b580      	push	{r7, lr}
     722:	b082      	sub	sp, #8
     724:	af00      	add	r7, sp, #0
     726:	0002      	movs	r2, r0
     728:	1dfb      	adds	r3, r7, #7
     72a:	701a      	strb	r2, [r3, #0]
     72c:	1dbb      	adds	r3, r7, #6
     72e:	1c0a      	adds	r2, r1, #0
     730:	701a      	strb	r2, [r3, #0]

	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(channel) | GCLK_CLKCTRL_GEN(source) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
     732:	1dfb      	adds	r3, r7, #7
     734:	781b      	ldrb	r3, [r3, #0]
     736:	b29b      	uxth	r3, r3
     738:	223f      	movs	r2, #63	; 0x3f
     73a:	4013      	ands	r3, r2
     73c:	b29a      	uxth	r2, r3
     73e:	1dbb      	adds	r3, r7, #6
     740:	781b      	ldrb	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	021b      	lsls	r3, r3, #8
     746:	b299      	uxth	r1, r3
     748:	23f0      	movs	r3, #240	; 0xf0
     74a:	011b      	lsls	r3, r3, #4
     74c:	400b      	ands	r3, r1
     74e:	b29b      	uxth	r3, r3
     750:	4313      	orrs	r3, r2
     752:	b29b      	uxth	r3, r3
	hri_gclk_write_CLKCTRL_reg(GCLK,
     754:	2280      	movs	r2, #128	; 0x80
     756:	01d2      	lsls	r2, r2, #7
     758:	4313      	orrs	r3, r2
     75a:	b29b      	uxth	r3, r3
     75c:	4a04      	ldr	r2, [pc, #16]	; (770 <_gclk_enable_channel+0x50>)
     75e:	0019      	movs	r1, r3
     760:	0010      	movs	r0, r2
     762:	4b04      	ldr	r3, [pc, #16]	; (774 <_gclk_enable_channel+0x54>)
     764:	4798      	blx	r3
}
     766:	46c0      	nop			; (mov r8, r8)
     768:	46bd      	mov	sp, r7
     76a:	b002      	add	sp, #8
     76c:	bd80      	pop	{r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	40000c00 	.word	0x40000c00
     774:	00000227 	.word	0x00000227

00000778 <_pm_get_ahb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_ahb_index(const void *const module)
{
     778:	b580      	push	{r7, lr}
     77a:	b082      	sub	sp, #8
     77c:	af00      	add	r7, sp, #0
     77e:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PM_BUS_APBA) {
     780:	687b      	ldr	r3, [r7, #4]
     782:	2b01      	cmp	r3, #1
     784:	d101      	bne.n	78a <_pm_get_ahb_index+0x12>
		return 0;
     786:	2300      	movs	r3, #0
     788:	e023      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBB) {
     78a:	687b      	ldr	r3, [r7, #4]
     78c:	2b02      	cmp	r3, #2
     78e:	d101      	bne.n	794 <_pm_get_ahb_index+0x1c>
		return 1;
     790:	2301      	movs	r3, #1
     792:	e01e      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)PM_BUS_APBC) {
     794:	687b      	ldr	r3, [r7, #4]
     796:	2b03      	cmp	r3, #3
     798:	d101      	bne.n	79e <_pm_get_ahb_index+0x26>
		return 2;
     79a:	2302      	movs	r3, #2
     79c:	e019      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	}
	if ((uint32_t)module == (uint32_t)DSU) {
     79e:	687b      	ldr	r3, [r7, #4]
     7a0:	4a0e      	ldr	r2, [pc, #56]	; (7dc <_pm_get_ahb_index+0x64>)
     7a2:	4293      	cmp	r3, r2
     7a4:	d101      	bne.n	7aa <_pm_get_ahb_index+0x32>
		return 3;
     7a6:	2303      	movs	r3, #3
     7a8:	e013      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	4a0c      	ldr	r2, [pc, #48]	; (7e0 <_pm_get_ahb_index+0x68>)
     7ae:	4293      	cmp	r3, r2
     7b0:	d101      	bne.n	7b6 <_pm_get_ahb_index+0x3e>
		return 4;
     7b2:	2304      	movs	r3, #4
     7b4:	e00d      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	4a0a      	ldr	r2, [pc, #40]	; (7e4 <_pm_get_ahb_index+0x6c>)
     7ba:	4293      	cmp	r3, r2
     7bc:	d101      	bne.n	7c2 <_pm_get_ahb_index+0x4a>
		return 5;
     7be:	2305      	movs	r3, #5
     7c0:	e007      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	4a08      	ldr	r2, [pc, #32]	; (7e8 <_pm_get_ahb_index+0x70>)
     7c6:	4293      	cmp	r3, r2
     7c8:	d101      	bne.n	7ce <_pm_get_ahb_index+0x56>
		return 6;
     7ca:	2306      	movs	r3, #6
     7cc:	e001      	b.n	7d2 <_pm_get_ahb_index+0x5a>
	}
#endif

	return ERR_INVALID_ARG;
     7ce:	230d      	movs	r3, #13
     7d0:	425b      	negs	r3, r3
}
     7d2:	0018      	movs	r0, r3
     7d4:	46bd      	mov	sp, r7
     7d6:	b002      	add	sp, #8
     7d8:	bd80      	pop	{r7, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	41002000 	.word	0x41002000
     7e0:	41004000 	.word	0x41004000
     7e4:	41004800 	.word	0x41004800
     7e8:	41005000 	.word	0x41005000

000007ec <_pm_get_apbb_index>:
 * \param[in] module Module to get index for
 *
 * \return index of the given module if succeeds, ERR_INVALID_ARG otherwise
 */
static inline int32_t _pm_get_apbb_index(const void *const module)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	b082      	sub	sp, #8
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
	if ((uint32_t)module == (uint32_t)PAC1) {
     7f4:	687a      	ldr	r2, [r7, #4]
     7f6:	2382      	movs	r3, #130	; 0x82
     7f8:	05db      	lsls	r3, r3, #23
     7fa:	429a      	cmp	r2, r3
     7fc:	d101      	bne.n	802 <_pm_get_apbb_index+0x16>
		return 0;
     7fe:	2300      	movs	r3, #0
     800:	e01f      	b.n	842 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DSU) {
     802:	687b      	ldr	r3, [r7, #4]
     804:	4a11      	ldr	r2, [pc, #68]	; (84c <_pm_get_apbb_index+0x60>)
     806:	4293      	cmp	r3, r2
     808:	d101      	bne.n	80e <_pm_get_apbb_index+0x22>
		return 1;
     80a:	2301      	movs	r3, #1
     80c:	e019      	b.n	842 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)NVMCTRL) {
     80e:	687b      	ldr	r3, [r7, #4]
     810:	4a0f      	ldr	r2, [pc, #60]	; (850 <_pm_get_apbb_index+0x64>)
     812:	4293      	cmp	r3, r2
     814:	d101      	bne.n	81a <_pm_get_apbb_index+0x2e>
		return 2;
     816:	2302      	movs	r3, #2
     818:	e013      	b.n	842 <_pm_get_apbb_index+0x56>
	}
	if ((uint32_t)module == (uint32_t)PORT) {
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	4a0d      	ldr	r2, [pc, #52]	; (854 <_pm_get_apbb_index+0x68>)
     81e:	4293      	cmp	r3, r2
     820:	d101      	bne.n	826 <_pm_get_apbb_index+0x3a>
		return 3;
     822:	2303      	movs	r3, #3
     824:	e00d      	b.n	842 <_pm_get_apbb_index+0x56>
	} else if ((uint32_t)module == (uint32_t)DMAC) {
     826:	687b      	ldr	r3, [r7, #4]
     828:	4a0b      	ldr	r2, [pc, #44]	; (858 <_pm_get_apbb_index+0x6c>)
     82a:	4293      	cmp	r3, r2
     82c:	d101      	bne.n	832 <_pm_get_apbb_index+0x46>
		return 4;
     82e:	2304      	movs	r3, #4
     830:	e007      	b.n	842 <_pm_get_apbb_index+0x56>
	}
#ifdef USB
	else if ((uint32_t)module == (uint32_t)USB) {
     832:	687b      	ldr	r3, [r7, #4]
     834:	4a09      	ldr	r2, [pc, #36]	; (85c <_pm_get_apbb_index+0x70>)
     836:	4293      	cmp	r3, r2
     838:	d101      	bne.n	83e <_pm_get_apbb_index+0x52>
		return 5;
     83a:	2305      	movs	r3, #5
     83c:	e001      	b.n	842 <_pm_get_apbb_index+0x56>
	}
#endif

	return ERR_INVALID_ARG;
     83e:	230d      	movs	r3, #13
     840:	425b      	negs	r3, r3
}
     842:	0018      	movs	r0, r3
     844:	46bd      	mov	sp, r7
     846:	b002      	add	sp, #8
     848:	bd80      	pop	{r7, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	41002000 	.word	0x41002000
     850:	41004000 	.word	0x41004000
     854:	41004400 	.word	0x41004400
     858:	41004800 	.word	0x41004800
     85c:	41005000 	.word	0x41005000

00000860 <_pm_enable_bus_clock>:
 *
 * \param[in] bus A bus to enable clock on
 * \param[in] module A hardware module to enable clock for
 */
static inline void _pm_enable_bus_clock(const enum _pm_bus bus, const void *const module)
{
     860:	b580      	push	{r7, lr}
     862:	b084      	sub	sp, #16
     864:	af00      	add	r7, sp, #0
     866:	0002      	movs	r2, r0
     868:	6039      	str	r1, [r7, #0]
     86a:	1dfb      	adds	r3, r7, #7
     86c:	701a      	strb	r2, [r3, #0]
	uint32_t peripheral = ((uint32_t)module & 0x0000ff00) >> 10;
     86e:	683b      	ldr	r3, [r7, #0]
     870:	0a9b      	lsrs	r3, r3, #10
     872:	223f      	movs	r2, #63	; 0x3f
     874:	4013      	ands	r3, r2
     876:	60fb      	str	r3, [r7, #12]

	switch (bus) {
     878:	1dfb      	adds	r3, r7, #7
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	2b01      	cmp	r3, #1
     87e:	d01e      	beq.n	8be <_pm_enable_bus_clock+0x5e>
     880:	dc02      	bgt.n	888 <_pm_enable_bus_clock+0x28>
     882:	2b00      	cmp	r3, #0
     884:	d005      	beq.n	892 <_pm_enable_bus_clock+0x32>
     886:	e044      	b.n	912 <_pm_enable_bus_clock+0xb2>
     888:	2b02      	cmp	r3, #2
     88a:	d022      	beq.n	8d2 <_pm_enable_bus_clock+0x72>
     88c:	2b03      	cmp	r3, #3
     88e:	d036      	beq.n	8fe <_pm_enable_bus_clock+0x9e>
     890:	e03f      	b.n	912 <_pm_enable_bus_clock+0xb2>
	case PM_BUS_AHB:
		if (_pm_get_ahb_index(module) >= 0) {
     892:	683b      	ldr	r3, [r7, #0]
     894:	0018      	movs	r0, r3
     896:	4b26      	ldr	r3, [pc, #152]	; (930 <_pm_enable_bus_clock+0xd0>)
     898:	4798      	blx	r3
     89a:	1e03      	subs	r3, r0, #0
     89c:	db40      	blt.n	920 <_pm_enable_bus_clock+0xc0>
			peripheral = (uint32_t)_pm_get_ahb_index(module);
     89e:	683b      	ldr	r3, [r7, #0]
     8a0:	0018      	movs	r0, r3
     8a2:	4b23      	ldr	r3, [pc, #140]	; (930 <_pm_enable_bus_clock+0xd0>)
     8a4:	4798      	blx	r3
     8a6:	0003      	movs	r3, r0
     8a8:	60fb      	str	r3, [r7, #12]
			PM->AHBMASK.reg |= 1 << peripheral;
     8aa:	4b22      	ldr	r3, [pc, #136]	; (934 <_pm_enable_bus_clock+0xd4>)
     8ac:	4a21      	ldr	r2, [pc, #132]	; (934 <_pm_enable_bus_clock+0xd4>)
     8ae:	6952      	ldr	r2, [r2, #20]
     8b0:	2001      	movs	r0, #1
     8b2:	68f9      	ldr	r1, [r7, #12]
     8b4:	4088      	lsls	r0, r1
     8b6:	0001      	movs	r1, r0
     8b8:	430a      	orrs	r2, r1
     8ba:	615a      	str	r2, [r3, #20]
		}
		break;
     8bc:	e030      	b.n	920 <_pm_enable_bus_clock+0xc0>
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
     8be:	4b1d      	ldr	r3, [pc, #116]	; (934 <_pm_enable_bus_clock+0xd4>)
     8c0:	4a1c      	ldr	r2, [pc, #112]	; (934 <_pm_enable_bus_clock+0xd4>)
     8c2:	6992      	ldr	r2, [r2, #24]
     8c4:	2001      	movs	r0, #1
     8c6:	68f9      	ldr	r1, [r7, #12]
     8c8:	4088      	lsls	r0, r1
     8ca:	0001      	movs	r1, r0
     8cc:	430a      	orrs	r2, r1
     8ce:	619a      	str	r2, [r3, #24]
		break;
     8d0:	e029      	b.n	926 <_pm_enable_bus_clock+0xc6>
	case PM_BUS_APBB:
		if (_pm_get_apbb_index(module) >= 0) {
     8d2:	683b      	ldr	r3, [r7, #0]
     8d4:	0018      	movs	r0, r3
     8d6:	4b18      	ldr	r3, [pc, #96]	; (938 <_pm_enable_bus_clock+0xd8>)
     8d8:	4798      	blx	r3
     8da:	1e03      	subs	r3, r0, #0
     8dc:	db22      	blt.n	924 <_pm_enable_bus_clock+0xc4>
			peripheral = (uint32_t)_pm_get_apbb_index(module);
     8de:	683b      	ldr	r3, [r7, #0]
     8e0:	0018      	movs	r0, r3
     8e2:	4b15      	ldr	r3, [pc, #84]	; (938 <_pm_enable_bus_clock+0xd8>)
     8e4:	4798      	blx	r3
     8e6:	0003      	movs	r3, r0
     8e8:	60fb      	str	r3, [r7, #12]
			PM->APBBMASK.reg |= 1 << peripheral;
     8ea:	4b12      	ldr	r3, [pc, #72]	; (934 <_pm_enable_bus_clock+0xd4>)
     8ec:	4a11      	ldr	r2, [pc, #68]	; (934 <_pm_enable_bus_clock+0xd4>)
     8ee:	69d2      	ldr	r2, [r2, #28]
     8f0:	2001      	movs	r0, #1
     8f2:	68f9      	ldr	r1, [r7, #12]
     8f4:	4088      	lsls	r0, r1
     8f6:	0001      	movs	r1, r0
     8f8:	430a      	orrs	r2, r1
     8fa:	61da      	str	r2, [r3, #28]
		}
		break;
     8fc:	e012      	b.n	924 <_pm_enable_bus_clock+0xc4>
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     8fe:	4b0d      	ldr	r3, [pc, #52]	; (934 <_pm_enable_bus_clock+0xd4>)
     900:	4a0c      	ldr	r2, [pc, #48]	; (934 <_pm_enable_bus_clock+0xd4>)
     902:	6a12      	ldr	r2, [r2, #32]
     904:	2001      	movs	r0, #1
     906:	68f9      	ldr	r1, [r7, #12]
     908:	4088      	lsls	r0, r1
     90a:	0001      	movs	r1, r0
     90c:	430a      	orrs	r2, r1
     90e:	621a      	str	r2, [r3, #32]
		break;
     910:	e009      	b.n	926 <_pm_enable_bus_clock+0xc6>
	default:
		ASSERT(false);
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <_pm_enable_bus_clock+0xdc>)
     914:	229b      	movs	r2, #155	; 0x9b
     916:	0019      	movs	r1, r3
     918:	2000      	movs	r0, #0
     91a:	4b09      	ldr	r3, [pc, #36]	; (940 <_pm_enable_bus_clock+0xe0>)
     91c:	4798      	blx	r3
		break;
     91e:	e002      	b.n	926 <_pm_enable_bus_clock+0xc6>
		break;
     920:	46c0      	nop			; (mov r8, r8)
     922:	e000      	b.n	926 <_pm_enable_bus_clock+0xc6>
		break;
     924:	46c0      	nop			; (mov r8, r8)
	}
}
     926:	46c0      	nop			; (mov r8, r8)
     928:	46bd      	mov	sp, r7
     92a:	b004      	add	sp, #16
     92c:	bd80      	pop	{r7, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	00000779 	.word	0x00000779
     934:	40000400 	.word	0x40000400
     938:	000007ed 	.word	0x000007ed
     93c:	0000343c 	.word	0x0000343c
     940:	00001e5d 	.word	0x00001e5d

00000944 <I2C_0_PORT_init>:
struct timer_descriptor TIMER_0;

struct i2c_m_sync_desc I2C_0;

void I2C_0_PORT_init(void)
{
     944:	b580      	push	{r7, lr}
     946:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA08,
     948:	2100      	movs	r1, #0
     94a:	2008      	movs	r0, #8
     94c:	4b09      	ldr	r3, [pc, #36]	; (974 <I2C_0_PORT_init+0x30>)
     94e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA08, PINMUX_PA08C_SERCOM0_PAD0);
     950:	4b09      	ldr	r3, [pc, #36]	; (978 <I2C_0_PORT_init+0x34>)
     952:	0019      	movs	r1, r3
     954:	2008      	movs	r0, #8
     956:	4b09      	ldr	r3, [pc, #36]	; (97c <I2C_0_PORT_init+0x38>)
     958:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA09,
     95a:	2100      	movs	r1, #0
     95c:	2009      	movs	r0, #9
     95e:	4b05      	ldr	r3, [pc, #20]	; (974 <I2C_0_PORT_init+0x30>)
     960:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
     962:	4b07      	ldr	r3, [pc, #28]	; (980 <I2C_0_PORT_init+0x3c>)
     964:	0019      	movs	r1, r3
     966:	2009      	movs	r0, #9
     968:	4b04      	ldr	r3, [pc, #16]	; (97c <I2C_0_PORT_init+0x38>)
     96a:	4798      	blx	r3
}
     96c:	46c0      	nop			; (mov r8, r8)
     96e:	46bd      	mov	sp, r7
     970:	bd80      	pop	{r7, pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	000006ad 	.word	0x000006ad
     978:	00080002 	.word	0x00080002
     97c:	000006e9 	.word	0x000006e9
     980:	00090002 	.word	0x00090002

00000984 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
     984:	b580      	push	{r7, lr}
     986:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
     988:	4b07      	ldr	r3, [pc, #28]	; (9a8 <I2C_0_CLOCK_init+0x24>)
     98a:	0019      	movs	r1, r3
     98c:	2003      	movs	r0, #3
     98e:	4b07      	ldr	r3, [pc, #28]	; (9ac <I2C_0_CLOCK_init+0x28>)
     990:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
     992:	2100      	movs	r1, #0
     994:	2014      	movs	r0, #20
     996:	4b06      	ldr	r3, [pc, #24]	; (9b0 <I2C_0_CLOCK_init+0x2c>)
     998:	4798      	blx	r3
	_gclk_enable_channel(SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC);
     99a:	2100      	movs	r1, #0
     99c:	2013      	movs	r0, #19
     99e:	4b04      	ldr	r3, [pc, #16]	; (9b0 <I2C_0_CLOCK_init+0x2c>)
     9a0:	4798      	blx	r3
}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	46bd      	mov	sp, r7
     9a6:	bd80      	pop	{r7, pc}
     9a8:	42000800 	.word	0x42000800
     9ac:	00000861 	.word	0x00000861
     9b0:	00000721 	.word	0x00000721

000009b4 <I2C_0_init>:

void I2C_0_init(void)
{
     9b4:	b580      	push	{r7, lr}
     9b6:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <I2C_0_init+0x20>)
     9ba:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     9bc:	4a06      	ldr	r2, [pc, #24]	; (9d8 <I2C_0_init+0x24>)
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <I2C_0_init+0x28>)
     9c0:	0011      	movs	r1, r2
     9c2:	0018      	movs	r0, r3
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <I2C_0_init+0x2c>)
     9c6:	4798      	blx	r3
	I2C_0_PORT_init();
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <I2C_0_init+0x30>)
     9ca:	4798      	blx	r3
}
     9cc:	46c0      	nop			; (mov r8, r8)
     9ce:	46bd      	mov	sp, r7
     9d0:	bd80      	pop	{r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	00000985 	.word	0x00000985
     9d8:	42000800 	.word	0x42000800
     9dc:	20000038 	.word	0x20000038
     9e0:	00001ab5 	.word	0x00001ab5
     9e4:	00000945 	.word	0x00000945

000009e8 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     9e8:	b580      	push	{r7, lr}
     9ea:	af00      	add	r7, sp, #0
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
     9ec:	4b09      	ldr	r3, [pc, #36]	; (a14 <TIMER_0_init+0x2c>)
     9ee:	0019      	movs	r1, r3
     9f0:	2001      	movs	r0, #1
     9f2:	4b09      	ldr	r3, [pc, #36]	; (a18 <TIMER_0_init+0x30>)
     9f4:	4798      	blx	r3
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
     9f6:	2100      	movs	r1, #0
     9f8:	2004      	movs	r0, #4
     9fa:	4b08      	ldr	r3, [pc, #32]	; (a1c <TIMER_0_init+0x34>)
     9fc:	4798      	blx	r3
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     9fe:	4b08      	ldr	r3, [pc, #32]	; (a20 <TIMER_0_init+0x38>)
     a00:	4798      	blx	r3
     a02:	0002      	movs	r2, r0
     a04:	4903      	ldr	r1, [pc, #12]	; (a14 <TIMER_0_init+0x2c>)
     a06:	4b07      	ldr	r3, [pc, #28]	; (a24 <TIMER_0_init+0x3c>)
     a08:	0018      	movs	r0, r3
     a0a:	4b07      	ldr	r3, [pc, #28]	; (a28 <TIMER_0_init+0x40>)
     a0c:	4798      	blx	r3
}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	46bd      	mov	sp, r7
     a12:	bd80      	pop	{r7, pc}
     a14:	40001400 	.word	0x40001400
     a18:	00000861 	.word	0x00000861
     a1c:	00000721 	.word	0x00000721
     a20:	00002355 	.word	0x00002355
     a24:	20000058 	.word	0x20000058
     a28:	00001c71 	.word	0x00001c71

00000a2c <system_init>:

void system_init(void)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	af00      	add	r7, sp, #0
	init_mcu();
     a30:	4b04      	ldr	r3, [pc, #16]	; (a44 <system_init+0x18>)
     a32:	4798      	blx	r3

	I2C_0_init();
     a34:	4b04      	ldr	r3, [pc, #16]	; (a48 <system_init+0x1c>)
     a36:	4798      	blx	r3

	TIMER_0_init();
     a38:	4b04      	ldr	r3, [pc, #16]	; (a4c <system_init+0x20>)
     a3a:	4798      	blx	r3
}
     a3c:	46c0      	nop			; (mov r8, r8)
     a3e:	46bd      	mov	sp, r7
     a40:	bd80      	pop	{r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	0000070d 	.word	0x0000070d
     a48:	000009b5 	.word	0x000009b5
     a4c:	000009e9 	.word	0x000009e9

00000a50 <drv_i2c_write>:
/*
drv_i2c_read
i2c read to *data
*/
int32_t drv_i2c_write(uint8_t slave_addr, uint16_t reg_addr, uint8_t * data, uint16_t len)
{
     a50:	b590      	push	{r4, r7, lr}
     a52:	b0cb      	sub	sp, #300	; 0x12c
     a54:	af00      	add	r7, sp, #0
     a56:	0004      	movs	r4, r0
     a58:	0008      	movs	r0, r1
     a5a:	60ba      	str	r2, [r7, #8]
     a5c:	0019      	movs	r1, r3
     a5e:	4b5e      	ldr	r3, [pc, #376]	; (bd8 <drv_i2c_write+0x188>)
     a60:	2294      	movs	r2, #148	; 0x94
     a62:	0052      	lsls	r2, r2, #1
     a64:	4694      	mov	ip, r2
     a66:	44bc      	add	ip, r7
     a68:	4463      	add	r3, ip
     a6a:	1c22      	adds	r2, r4, #0
     a6c:	701a      	strb	r2, [r3, #0]
     a6e:	4b5b      	ldr	r3, [pc, #364]	; (bdc <drv_i2c_write+0x18c>)
     a70:	2294      	movs	r2, #148	; 0x94
     a72:	0052      	lsls	r2, r2, #1
     a74:	4694      	mov	ip, r2
     a76:	44bc      	add	ip, r7
     a78:	4463      	add	r3, ip
     a7a:	1c02      	adds	r2, r0, #0
     a7c:	801a      	strh	r2, [r3, #0]
     a7e:	4b58      	ldr	r3, [pc, #352]	; (be0 <drv_i2c_write+0x190>)
     a80:	2294      	movs	r2, #148	; 0x94
     a82:	0052      	lsls	r2, r2, #1
     a84:	4694      	mov	ip, r2
     a86:	44bc      	add	ip, r7
     a88:	4463      	add	r3, ip
     a8a:	1c0a      	adds	r2, r1, #0
     a8c:	801a      	strh	r2, [r3, #0]
    int32_t ret = 0;
     a8e:	2300      	movs	r3, #0
     a90:	2290      	movs	r2, #144	; 0x90
     a92:	0052      	lsls	r2, r2, #1
     a94:	18ba      	adds	r2, r7, r2
     a96:	6013      	str	r3, [r2, #0]
    struct io_descriptor *i2c_0_io;
    uint8_t addr_buf[2], w_buf[255],length;
    bool retry = false;
     a98:	2328      	movs	r3, #40	; 0x28
     a9a:	33ff      	adds	r3, #255	; 0xff
     a9c:	18fb      	adds	r3, r7, r3
     a9e:	2200      	movs	r2, #0
     aa0:	701a      	strb	r2, [r3, #0]
    
	if(len > 250)
     aa2:	4b4f      	ldr	r3, [pc, #316]	; (be0 <drv_i2c_write+0x190>)
     aa4:	2294      	movs	r2, #148	; 0x94
     aa6:	0052      	lsls	r2, r2, #1
     aa8:	4694      	mov	ip, r2
     aaa:	44bc      	add	ip, r7
     aac:	4463      	add	r3, ip
     aae:	881b      	ldrh	r3, [r3, #0]
     ab0:	2bfa      	cmp	r3, #250	; 0xfa
     ab2:	d902      	bls.n	aba <drv_i2c_write+0x6a>
		return -1;
     ab4:	2301      	movs	r3, #1
     ab6:	425b      	negs	r3, r3
     ab8:	e089      	b.n	bce <drv_i2c_write+0x17e>
	length = len + 2;
     aba:	4b49      	ldr	r3, [pc, #292]	; (be0 <drv_i2c_write+0x190>)
     abc:	2294      	movs	r2, #148	; 0x94
     abe:	0052      	lsls	r2, r2, #1
     ac0:	4694      	mov	ip, r2
     ac2:	44bc      	add	ip, r7
     ac4:	4463      	add	r3, ip
     ac6:	881b      	ldrh	r3, [r3, #0]
     ac8:	b2da      	uxtb	r2, r3
     aca:	2320      	movs	r3, #32
     acc:	33ff      	adds	r3, #255	; 0xff
     ace:	18fb      	adds	r3, r7, r3
     ad0:	3202      	adds	r2, #2
     ad2:	701a      	strb	r2, [r3, #0]
    addr_buf[0]= reg_addr & 0xff;
     ad4:	4b41      	ldr	r3, [pc, #260]	; (bdc <drv_i2c_write+0x18c>)
     ad6:	2294      	movs	r2, #148	; 0x94
     ad8:	0052      	lsls	r2, r2, #1
     ada:	4694      	mov	ip, r2
     adc:	44bc      	add	ip, r7
     ade:	4463      	add	r3, ip
     ae0:	881b      	ldrh	r3, [r3, #0]
     ae2:	b2da      	uxtb	r2, r3
     ae4:	238a      	movs	r3, #138	; 0x8a
     ae6:	005b      	lsls	r3, r3, #1
     ae8:	18fb      	adds	r3, r7, r3
     aea:	701a      	strb	r2, [r3, #0]
    addr_buf[1]= (reg_addr >> 8) & 0xff;
     aec:	4b3b      	ldr	r3, [pc, #236]	; (bdc <drv_i2c_write+0x18c>)
     aee:	2294      	movs	r2, #148	; 0x94
     af0:	0052      	lsls	r2, r2, #1
     af2:	4694      	mov	ip, r2
     af4:	44bc      	add	ip, r7
     af6:	4463      	add	r3, ip
     af8:	881b      	ldrh	r3, [r3, #0]
     afa:	0a1b      	lsrs	r3, r3, #8
     afc:	b29b      	uxth	r3, r3
     afe:	b2da      	uxtb	r2, r3
     b00:	238a      	movs	r3, #138	; 0x8a
     b02:	005b      	lsls	r3, r3, #1
     b04:	18fb      	adds	r3, r7, r3
     b06:	705a      	strb	r2, [r3, #1]
    
    i2c_m_sync_get_io_descriptor(&I2C_0, &i2c_0_io);
     b08:	238c      	movs	r3, #140	; 0x8c
     b0a:	005b      	lsls	r3, r3, #1
     b0c:	18fa      	adds	r2, r7, r3
     b0e:	4b35      	ldr	r3, [pc, #212]	; (be4 <drv_i2c_write+0x194>)
     b10:	0011      	movs	r1, r2
     b12:	0018      	movs	r0, r3
     b14:	4b34      	ldr	r3, [pc, #208]	; (be8 <drv_i2c_write+0x198>)
     b16:	4798      	blx	r3
    i2c_m_sync_enable(&I2C_0);
     b18:	4b32      	ldr	r3, [pc, #200]	; (be4 <drv_i2c_write+0x194>)
     b1a:	0018      	movs	r0, r3
     b1c:	4b33      	ldr	r3, [pc, #204]	; (bec <drv_i2c_write+0x19c>)
     b1e:	4798      	blx	r3
    i2c_m_sync_set_slaveaddr(&I2C_0, slave_addr, I2C_M_SEVEN);
     b20:	4b2d      	ldr	r3, [pc, #180]	; (bd8 <drv_i2c_write+0x188>)
     b22:	2294      	movs	r2, #148	; 0x94
     b24:	0052      	lsls	r2, r2, #1
     b26:	4694      	mov	ip, r2
     b28:	44bc      	add	ip, r7
     b2a:	4463      	add	r3, ip
     b2c:	781b      	ldrb	r3, [r3, #0]
     b2e:	b219      	sxth	r1, r3
     b30:	2380      	movs	r3, #128	; 0x80
     b32:	011a      	lsls	r2, r3, #4
     b34:	4b2b      	ldr	r3, [pc, #172]	; (be4 <drv_i2c_write+0x194>)
     b36:	0018      	movs	r0, r3
     b38:	4b2d      	ldr	r3, [pc, #180]	; (bf0 <drv_i2c_write+0x1a0>)
     b3a:	4798      	blx	r3
	memcpy(w_buf, addr_buf, 2);
     b3c:	4b2d      	ldr	r3, [pc, #180]	; (bf4 <drv_i2c_write+0x1a4>)
     b3e:	2294      	movs	r2, #148	; 0x94
     b40:	0052      	lsls	r2, r2, #1
     b42:	4694      	mov	ip, r2
     b44:	44bc      	add	ip, r7
     b46:	4463      	add	r3, ip
     b48:	228a      	movs	r2, #138	; 0x8a
     b4a:	0052      	lsls	r2, r2, #1
     b4c:	18ba      	adds	r2, r7, r2
     b4e:	8812      	ldrh	r2, [r2, #0]
     b50:	801a      	strh	r2, [r3, #0]
	memcpy(w_buf+2, data, len);
     b52:	2314      	movs	r3, #20
     b54:	18fb      	adds	r3, r7, r3
     b56:	3302      	adds	r3, #2
     b58:	4a21      	ldr	r2, [pc, #132]	; (be0 <drv_i2c_write+0x190>)
     b5a:	2194      	movs	r1, #148	; 0x94
     b5c:	0049      	lsls	r1, r1, #1
     b5e:	468c      	mov	ip, r1
     b60:	44bc      	add	ip, r7
     b62:	4462      	add	r2, ip
     b64:	8812      	ldrh	r2, [r2, #0]
     b66:	68b9      	ldr	r1, [r7, #8]
     b68:	0018      	movs	r0, r3
     b6a:	4b23      	ldr	r3, [pc, #140]	; (bf8 <drv_i2c_write+0x1a8>)
     b6c:	4798      	blx	r3
    
    //write reg address + data
write_reg:
    ret = io_write(i2c_0_io, w_buf, length);
     b6e:	238c      	movs	r3, #140	; 0x8c
     b70:	005b      	lsls	r3, r3, #1
     b72:	18fb      	adds	r3, r7, r3
     b74:	6818      	ldr	r0, [r3, #0]
     b76:	2320      	movs	r3, #32
     b78:	33ff      	adds	r3, #255	; 0xff
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	b29a      	uxth	r2, r3
     b80:	2314      	movs	r3, #20
     b82:	18fb      	adds	r3, r7, r3
     b84:	0019      	movs	r1, r3
     b86:	4b1d      	ldr	r3, [pc, #116]	; (bfc <drv_i2c_write+0x1ac>)
     b88:	4798      	blx	r3
     b8a:	0003      	movs	r3, r0
     b8c:	2290      	movs	r2, #144	; 0x90
     b8e:	0052      	lsls	r2, r2, #1
     b90:	18ba      	adds	r2, r7, r2
     b92:	6013      	str	r3, [r2, #0]
    if(ret != length)
     b94:	2320      	movs	r3, #32
     b96:	33ff      	adds	r3, #255	; 0xff
     b98:	18fb      	adds	r3, r7, r3
     b9a:	781a      	ldrb	r2, [r3, #0]
     b9c:	2390      	movs	r3, #144	; 0x90
     b9e:	005b      	lsls	r3, r3, #1
     ba0:	18fb      	adds	r3, r7, r3
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	429a      	cmp	r2, r3
     ba6:	d011      	beq.n	bcc <drv_i2c_write+0x17c>
    {
        if(!retry)
     ba8:	2328      	movs	r3, #40	; 0x28
     baa:	33ff      	adds	r3, #255	; 0xff
     bac:	18fb      	adds	r3, r7, r3
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	2201      	movs	r2, #1
     bb2:	4053      	eors	r3, r2
     bb4:	b2db      	uxtb	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	d005      	beq.n	bc6 <drv_i2c_write+0x176>
        {
            retry = true;
     bba:	2328      	movs	r3, #40	; 0x28
     bbc:	33ff      	adds	r3, #255	; 0xff
     bbe:	18fb      	adds	r3, r7, r3
     bc0:	2201      	movs	r2, #1
     bc2:	701a      	strb	r2, [r3, #0]
            //retry
            goto write_reg;
     bc4:	e7d3      	b.n	b6e <drv_i2c_write+0x11e>
        }
        return ERR_I2C;
     bc6:	2301      	movs	r3, #1
     bc8:	425b      	negs	r3, r3
     bca:	e000      	b.n	bce <drv_i2c_write+0x17e>
//             //retry
//             goto write_data;
//         }
//         return ERR_I2C;
//     }
    return 0;
     bcc:	2300      	movs	r3, #0
}
     bce:	0018      	movs	r0, r3
     bd0:	46bd      	mov	sp, r7
     bd2:	b04b      	add	sp, #300	; 0x12c
     bd4:	bd90      	pop	{r4, r7, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	fffffee7 	.word	0xfffffee7
     bdc:	fffffee4 	.word	0xfffffee4
     be0:	fffffede 	.word	0xfffffede
     be4:	20000038 	.word	0x20000038
     be8:	00001b75 	.word	0x00001b75
     bec:	00001b15 	.word	0x00001b15
     bf0:	00001b35 	.word	0x00001b35
     bf4:	fffffeec 	.word	0xfffffeec
     bf8:	0000340f 	.word	0x0000340f
     bfc:	00001b95 	.word	0x00001b95

00000c00 <drv_i2c_read>:
/*
drv_i2c_read
i2c read to *data
*/
int32_t drv_i2c_read(uint8_t slave_addr, uint16_t reg_addr, uint8_t * data, uint16_t len)
{
     c00:	b590      	push	{r4, r7, lr}
     c02:	b089      	sub	sp, #36	; 0x24
     c04:	af00      	add	r7, sp, #0
     c06:	0004      	movs	r4, r0
     c08:	0008      	movs	r0, r1
     c0a:	60ba      	str	r2, [r7, #8]
     c0c:	0019      	movs	r1, r3
     c0e:	230f      	movs	r3, #15
     c10:	18fb      	adds	r3, r7, r3
     c12:	1c22      	adds	r2, r4, #0
     c14:	701a      	strb	r2, [r3, #0]
     c16:	230c      	movs	r3, #12
     c18:	18fb      	adds	r3, r7, r3
     c1a:	1c02      	adds	r2, r0, #0
     c1c:	801a      	strh	r2, [r3, #0]
     c1e:	1dbb      	adds	r3, r7, #6
     c20:	1c0a      	adds	r2, r1, #0
     c22:	801a      	strh	r2, [r3, #0]
    int32_t ret = 0;
     c24:	2300      	movs	r3, #0
     c26:	61bb      	str	r3, [r7, #24]
    struct io_descriptor *i2c_0_io;
    uint8_t addr_buf[2];
    bool retry = false;
     c28:	231f      	movs	r3, #31
     c2a:	18fb      	adds	r3, r7, r3
     c2c:	2200      	movs	r2, #0
     c2e:	701a      	strb	r2, [r3, #0]
    
    addr_buf[0]= reg_addr & 0xff;
     c30:	230c      	movs	r3, #12
     c32:	18fb      	adds	r3, r7, r3
     c34:	881b      	ldrh	r3, [r3, #0]
     c36:	b2da      	uxtb	r2, r3
     c38:	2310      	movs	r3, #16
     c3a:	18fb      	adds	r3, r7, r3
     c3c:	701a      	strb	r2, [r3, #0]
    addr_buf[1]= (reg_addr >> 8) & 0xff;
     c3e:	230c      	movs	r3, #12
     c40:	18fb      	adds	r3, r7, r3
     c42:	881b      	ldrh	r3, [r3, #0]
     c44:	0a1b      	lsrs	r3, r3, #8
     c46:	b29b      	uxth	r3, r3
     c48:	b2da      	uxtb	r2, r3
     c4a:	2310      	movs	r3, #16
     c4c:	18fb      	adds	r3, r7, r3
     c4e:	705a      	strb	r2, [r3, #1]
    
    i2c_m_sync_get_io_descriptor(&I2C_0, &i2c_0_io);
     c50:	2314      	movs	r3, #20
     c52:	18fa      	adds	r2, r7, r3
     c54:	4b28      	ldr	r3, [pc, #160]	; (cf8 <drv_i2c_read+0xf8>)
     c56:	0011      	movs	r1, r2
     c58:	0018      	movs	r0, r3
     c5a:	4b28      	ldr	r3, [pc, #160]	; (cfc <drv_i2c_read+0xfc>)
     c5c:	4798      	blx	r3
    i2c_m_sync_enable(&I2C_0);
     c5e:	4b26      	ldr	r3, [pc, #152]	; (cf8 <drv_i2c_read+0xf8>)
     c60:	0018      	movs	r0, r3
     c62:	4b27      	ldr	r3, [pc, #156]	; (d00 <drv_i2c_read+0x100>)
     c64:	4798      	blx	r3
    i2c_m_sync_set_slaveaddr(&I2C_0, slave_addr, I2C_M_SEVEN);
     c66:	230f      	movs	r3, #15
     c68:	18fb      	adds	r3, r7, r3
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	b219      	sxth	r1, r3
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	011a      	lsls	r2, r3, #4
     c72:	4b21      	ldr	r3, [pc, #132]	; (cf8 <drv_i2c_read+0xf8>)
     c74:	0018      	movs	r0, r3
     c76:	4b23      	ldr	r3, [pc, #140]	; (d04 <drv_i2c_read+0x104>)
     c78:	4798      	blx	r3
    
    //write reg address
write_reg:
    ret = io_write(i2c_0_io, addr_buf, 2);
     c7a:	697b      	ldr	r3, [r7, #20]
     c7c:	2210      	movs	r2, #16
     c7e:	18b9      	adds	r1, r7, r2
     c80:	2202      	movs	r2, #2
     c82:	0018      	movs	r0, r3
     c84:	4b20      	ldr	r3, [pc, #128]	; (d08 <drv_i2c_read+0x108>)
     c86:	4798      	blx	r3
     c88:	0003      	movs	r3, r0
     c8a:	61bb      	str	r3, [r7, #24]
    if(ret != 2)
     c8c:	69bb      	ldr	r3, [r7, #24]
     c8e:	2b02      	cmp	r3, #2
     c90:	d00f      	beq.n	cb2 <drv_i2c_read+0xb2>
    {
        if(!retry)
     c92:	231f      	movs	r3, #31
     c94:	18fb      	adds	r3, r7, r3
     c96:	781b      	ldrb	r3, [r3, #0]
     c98:	2201      	movs	r2, #1
     c9a:	4053      	eors	r3, r2
     c9c:	b2db      	uxtb	r3, r3
     c9e:	2b00      	cmp	r3, #0
     ca0:	d004      	beq.n	cac <drv_i2c_read+0xac>
        {
            retry = true;
     ca2:	231f      	movs	r3, #31
     ca4:	18fb      	adds	r3, r7, r3
     ca6:	2201      	movs	r2, #1
     ca8:	701a      	strb	r2, [r3, #0]
            //retry 
            goto write_reg;
     caa:	e7e6      	b.n	c7a <drv_i2c_read+0x7a>
        }
        return ERR_I2C;
     cac:	2301      	movs	r3, #1
     cae:	425b      	negs	r3, r3
     cb0:	e01e      	b.n	cf0 <drv_i2c_read+0xf0>
    }
    
    //read data
read_data:
    ret = io_read(i2c_0_io, data, len);
     cb2:	6978      	ldr	r0, [r7, #20]
     cb4:	1dbb      	adds	r3, r7, #6
     cb6:	881a      	ldrh	r2, [r3, #0]
     cb8:	68bb      	ldr	r3, [r7, #8]
     cba:	0019      	movs	r1, r3
     cbc:	4b13      	ldr	r3, [pc, #76]	; (d0c <drv_i2c_read+0x10c>)
     cbe:	4798      	blx	r3
     cc0:	0003      	movs	r3, r0
     cc2:	61bb      	str	r3, [r7, #24]
    if(ret != len)
     cc4:	1dbb      	adds	r3, r7, #6
     cc6:	881a      	ldrh	r2, [r3, #0]
     cc8:	69bb      	ldr	r3, [r7, #24]
     cca:	429a      	cmp	r2, r3
     ccc:	d00f      	beq.n	cee <drv_i2c_read+0xee>
    {
        if(!retry)
     cce:	231f      	movs	r3, #31
     cd0:	18fb      	adds	r3, r7, r3
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2201      	movs	r2, #1
     cd6:	4053      	eors	r3, r2
     cd8:	b2db      	uxtb	r3, r3
     cda:	2b00      	cmp	r3, #0
     cdc:	d004      	beq.n	ce8 <drv_i2c_read+0xe8>
        {
            retry = true;
     cde:	231f      	movs	r3, #31
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	2201      	movs	r2, #1
     ce4:	701a      	strb	r2, [r3, #0]
            //retry
            goto read_data;
     ce6:	e7e4      	b.n	cb2 <drv_i2c_read+0xb2>
        }
        return ERR_I2C;
     ce8:	2301      	movs	r3, #1
     cea:	425b      	negs	r3, r3
     cec:	e000      	b.n	cf0 <drv_i2c_read+0xf0>
    }    
    return 0;
     cee:	2300      	movs	r3, #0
}
     cf0:	0018      	movs	r0, r3
     cf2:	46bd      	mov	sp, r7
     cf4:	b009      	add	sp, #36	; 0x24
     cf6:	bd90      	pop	{r4, r7, pc}
     cf8:	20000038 	.word	0x20000038
     cfc:	00001b75 	.word	0x00001b75
     d00:	00001b15 	.word	0x00001b15
     d04:	00001b35 	.word	0x00001b35
     d08:	00001b95 	.word	0x00001b95
     d0c:	00001be9 	.word	0x00001be9

00000d10 <drv_mxt_proc_t6_message>:

/*
drv_mxt_proc_t6_messages
*/
static void drv_mxt_proc_t6_message(uint8_t * msg)
{
     d10:	b580      	push	{r7, lr}
     d12:	b082      	sub	sp, #8
     d14:	af00      	add	r7, sp, #0
     d16:	6078      	str	r0, [r7, #4]
    mxt_data.t6_status = msg[1];
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	785a      	ldrb	r2, [r3, #1]
     d1c:	4b19      	ldr	r3, [pc, #100]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d1e:	771a      	strb	r2, [r3, #28]
    mxt_data.config_crc = msg[2] | (msg[3] << 8) | (msg[4] << 16);
     d20:	687b      	ldr	r3, [r7, #4]
     d22:	3302      	adds	r3, #2
     d24:	781b      	ldrb	r3, [r3, #0]
     d26:	001a      	movs	r2, r3
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	3303      	adds	r3, #3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	021b      	lsls	r3, r3, #8
     d30:	431a      	orrs	r2, r3
     d32:	687b      	ldr	r3, [r7, #4]
     d34:	3304      	adds	r3, #4
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	041b      	lsls	r3, r3, #16
     d3a:	4313      	orrs	r3, r2
     d3c:	001a      	movs	r2, r3
     d3e:	4b11      	ldr	r3, [pc, #68]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d40:	615a      	str	r2, [r3, #20]
	
	if(mxt_data.state == MXT_UPDATE_CFG)
     d42:	4b10      	ldr	r3, [pc, #64]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d44:	785b      	ldrb	r3, [r3, #1]
     d46:	2b03      	cmp	r3, #3
     d48:	d10b      	bne.n	d62 <drv_mxt_proc_t6_message+0x52>
	{	
		if(mxt_data.config_crc == file_cfg_crc)
     d4a:	4b0e      	ldr	r3, [pc, #56]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d4c:	695b      	ldr	r3, [r3, #20]
     d4e:	4a0e      	ldr	r2, [pc, #56]	; (d88 <drv_mxt_proc_t6_message+0x78>)
     d50:	4293      	cmp	r3, r2
     d52:	d103      	bne.n	d5c <drv_mxt_proc_t6_message+0x4c>
		{
			//update config success
			mxt_data.state = MXT_UPDATE_CFG_SUCCESS;
     d54:	4b0b      	ldr	r3, [pc, #44]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d56:	2205      	movs	r2, #5
     d58:	705a      	strb	r2, [r3, #1]
     d5a:	e002      	b.n	d62 <drv_mxt_proc_t6_message+0x52>
		}
		else
		{
			//update config fail
			mxt_data.state = MXT_UPDATE_CFG_FAIL;
     d5c:	4b09      	ldr	r3, [pc, #36]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d5e:	2206      	movs	r2, #6
     d60:	705a      	strb	r2, [r3, #1]
		}
	}
	
#ifdef MXT_CONFIG_UPDATE_WHEN_BOOT
    if(MXT_T6_STATUS_RESET&mxt_data.t6_status)
     d62:	4b08      	ldr	r3, [pc, #32]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d64:	7f1b      	ldrb	r3, [r3, #28]
     d66:	b25b      	sxtb	r3, r3
     d68:	2b00      	cmp	r3, #0
     d6a:	da07      	bge.n	d7c <drv_mxt_proc_t6_message+0x6c>
    {
        //check crc after reset
        if(mxt_data.config_crc != file_cfg_crc)
     d6c:	4b05      	ldr	r3, [pc, #20]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d6e:	695b      	ldr	r3, [r3, #20]
     d70:	4a05      	ldr	r2, [pc, #20]	; (d88 <drv_mxt_proc_t6_message+0x78>)
     d72:	4293      	cmp	r3, r2
     d74:	d002      	beq.n	d7c <drv_mxt_proc_t6_message+0x6c>
        {
            mxt_data.state = MXT_UPDATE_CFG;
     d76:	4b03      	ldr	r3, [pc, #12]	; (d84 <drv_mxt_proc_t6_message+0x74>)
     d78:	2203      	movs	r2, #3
     d7a:	705a      	strb	r2, [r3, #1]
        }
    }
#endif

}
     d7c:	46c0      	nop			; (mov r8, r8)
     d7e:	46bd      	mov	sp, r7
     d80:	b002      	add	sp, #8
     d82:	bd80      	pop	{r7, pc}
     d84:	20000074 	.word	0x20000074
     d88:	00c70279 	.word	0x00c70279

00000d8c <drv_mxt_proc_t25_message>:

/*
drv_mxt_proc_t25_messages
*/
static void drv_mxt_proc_t25_message(uint8_t * msg)
{
     d8c:	b580      	push	{r7, lr}
     d8e:	b082      	sub	sp, #8
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
    memcpy(mxt_data.t25_info, &msg[1], 7);
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	1c59      	adds	r1, r3, #1
     d98:	4b05      	ldr	r3, [pc, #20]	; (db0 <drv_mxt_proc_t25_message+0x24>)
     d9a:	221d      	movs	r2, #29
     d9c:	189b      	adds	r3, r3, r2
     d9e:	2207      	movs	r2, #7
     da0:	0018      	movs	r0, r3
     da2:	4b04      	ldr	r3, [pc, #16]	; (db4 <drv_mxt_proc_t25_message+0x28>)
     da4:	4798      	blx	r3
}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	46bd      	mov	sp, r7
     daa:	b002      	add	sp, #8
     dac:	bd80      	pop	{r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	20000074 	.word	0x20000074
     db4:	0000340f 	.word	0x0000340f

00000db8 <drv_mxt_proc_t9_message>:

/*
drv_mxt_proc_t9_message
*/
static void drv_mxt_proc_t9_message(uint8_t * msg)
{
     db8:	b580      	push	{r7, lr}
     dba:	b084      	sub	sp, #16
     dbc:	af00      	add	r7, sp, #0
     dbe:	6078      	str	r0, [r7, #4]
    uint16_t x;
    uint16_t y;
    struct s_mxt_data *data = &mxt_data;
     dc0:	4b2c      	ldr	r3, [pc, #176]	; (e74 <drv_mxt_proc_t9_message+0xbc>)
     dc2:	60bb      	str	r3, [r7, #8]
    
    mxt_touch_msg.id = msg[0] - mxt_data.T9_reportid_min;
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	781a      	ldrb	r2, [r3, #0]
     dc8:	4b2a      	ldr	r3, [pc, #168]	; (e74 <drv_mxt_proc_t9_message+0xbc>)
     dca:	2138      	movs	r1, #56	; 0x38
     dcc:	5c5b      	ldrb	r3, [r3, r1]
     dce:	1ad3      	subs	r3, r2, r3
     dd0:	b2da      	uxtb	r2, r3
     dd2:	4b29      	ldr	r3, [pc, #164]	; (e78 <drv_mxt_proc_t9_message+0xc0>)
     dd4:	701a      	strb	r2, [r3, #0]
    mxt_touch_msg.status = msg[1];
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	785a      	ldrb	r2, [r3, #1]
     dda:	4b27      	ldr	r3, [pc, #156]	; (e78 <drv_mxt_proc_t9_message+0xc0>)
     ddc:	705a      	strb	r2, [r3, #1]
	x = (msg[2] << 4) | ((msg[4] >> 4) & 0xf);
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	3302      	adds	r3, #2
     de2:	781b      	ldrb	r3, [r3, #0]
     de4:	011b      	lsls	r3, r3, #4
     de6:	b21a      	sxth	r2, r3
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	3304      	adds	r3, #4
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	091b      	lsrs	r3, r3, #4
     df0:	b2db      	uxtb	r3, r3
     df2:	b21b      	sxth	r3, r3
     df4:	210f      	movs	r1, #15
     df6:	400b      	ands	r3, r1
     df8:	b21b      	sxth	r3, r3
     dfa:	4313      	orrs	r3, r2
     dfc:	b21a      	sxth	r2, r3
     dfe:	230e      	movs	r3, #14
     e00:	18fb      	adds	r3, r7, r3
     e02:	801a      	strh	r2, [r3, #0]
	y = (msg[3] << 4) | ((msg[4] & 0xf));
     e04:	687b      	ldr	r3, [r7, #4]
     e06:	3303      	adds	r3, #3
     e08:	781b      	ldrb	r3, [r3, #0]
     e0a:	011b      	lsls	r3, r3, #4
     e0c:	b21a      	sxth	r2, r3
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	3304      	adds	r3, #4
     e12:	781b      	ldrb	r3, [r3, #0]
     e14:	b21b      	sxth	r3, r3
     e16:	210f      	movs	r1, #15
     e18:	400b      	ands	r3, r1
     e1a:	b21b      	sxth	r3, r3
     e1c:	4313      	orrs	r3, r2
     e1e:	b21a      	sxth	r2, r3
     e20:	230c      	movs	r3, #12
     e22:	18fb      	adds	r3, r7, r3
     e24:	801a      	strh	r2, [r3, #0]
    if(data->max_x < 1024)
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	8b1b      	ldrh	r3, [r3, #24]
     e2a:	4a14      	ldr	r2, [pc, #80]	; (e7c <drv_mxt_proc_t9_message+0xc4>)
     e2c:	4293      	cmp	r3, r2
     e2e:	d806      	bhi.n	e3e <drv_mxt_proc_t9_message+0x86>
        x >>= 2;
     e30:	230e      	movs	r3, #14
     e32:	18fb      	adds	r3, r7, r3
     e34:	220e      	movs	r2, #14
     e36:	18ba      	adds	r2, r7, r2
     e38:	8812      	ldrh	r2, [r2, #0]
     e3a:	0892      	lsrs	r2, r2, #2
     e3c:	801a      	strh	r2, [r3, #0]
    if(data->max_y < 1024)
     e3e:	68bb      	ldr	r3, [r7, #8]
     e40:	8b5b      	ldrh	r3, [r3, #26]
     e42:	4a0e      	ldr	r2, [pc, #56]	; (e7c <drv_mxt_proc_t9_message+0xc4>)
     e44:	4293      	cmp	r3, r2
     e46:	d806      	bhi.n	e56 <drv_mxt_proc_t9_message+0x9e>
        y >>= 2;
     e48:	230c      	movs	r3, #12
     e4a:	18fb      	adds	r3, r7, r3
     e4c:	220c      	movs	r2, #12
     e4e:	18ba      	adds	r2, r7, r2
     e50:	8812      	ldrh	r2, [r2, #0]
     e52:	0892      	lsrs	r2, r2, #2
     e54:	801a      	strh	r2, [r3, #0]
    
    mxt_touch_msg.x_pos = x;
     e56:	4b08      	ldr	r3, [pc, #32]	; (e78 <drv_mxt_proc_t9_message+0xc0>)
     e58:	220e      	movs	r2, #14
     e5a:	18ba      	adds	r2, r7, r2
     e5c:	8812      	ldrh	r2, [r2, #0]
     e5e:	805a      	strh	r2, [r3, #2]
    mxt_touch_msg.y_pos = y;
     e60:	4b05      	ldr	r3, [pc, #20]	; (e78 <drv_mxt_proc_t9_message+0xc0>)
     e62:	220c      	movs	r2, #12
     e64:	18ba      	adds	r2, r7, r2
     e66:	8812      	ldrh	r2, [r2, #0]
     e68:	809a      	strh	r2, [r3, #4]
}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	46bd      	mov	sp, r7
     e6e:	b004      	add	sp, #16
     e70:	bd80      	pop	{r7, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	20000074 	.word	0x20000074
     e78:	200001cc 	.word	0x200001cc
     e7c:	000003ff 	.word	0x000003ff

00000e80 <drv_mxt_proc_t100_message>:

/*
drv_mxt_proc_t100_message
*/
static void drv_mxt_proc_t100_message(uint8_t * msg)
{
     e80:	b580      	push	{r7, lr}
     e82:	b084      	sub	sp, #16
     e84:	af00      	add	r7, sp, #0
     e86:	6078      	str	r0, [r7, #4]
    uint16_t x;
    uint16_t y;
    struct s_mxt_data *data = &mxt_data;
     e88:	4b1d      	ldr	r3, [pc, #116]	; (f00 <drv_mxt_proc_t100_message+0x80>)
     e8a:	60fb      	str	r3, [r7, #12]
    
    mxt_touch_msg.id = msg[0] - data->T100_reportid_min - 2;
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	781a      	ldrb	r2, [r3, #0]
     e90:	68fb      	ldr	r3, [r7, #12]
     e92:	213e      	movs	r1, #62	; 0x3e
     e94:	5c5b      	ldrb	r3, [r3, r1]
     e96:	1ad3      	subs	r3, r2, r3
     e98:	b2db      	uxtb	r3, r3
     e9a:	3b02      	subs	r3, #2
     e9c:	b2da      	uxtb	r2, r3
     e9e:	4b19      	ldr	r3, [pc, #100]	; (f04 <drv_mxt_proc_t100_message+0x84>)
     ea0:	701a      	strb	r2, [r3, #0]
    mxt_touch_msg.status = msg[1];
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	785a      	ldrb	r2, [r3, #1]
     ea6:	4b17      	ldr	r3, [pc, #92]	; (f04 <drv_mxt_proc_t100_message+0x84>)
     ea8:	705a      	strb	r2, [r3, #1]
    x = msg[2] | msg[3] << 8;
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	3302      	adds	r3, #2
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	b21a      	sxth	r2, r3
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	3303      	adds	r3, #3
     eb6:	781b      	ldrb	r3, [r3, #0]
     eb8:	021b      	lsls	r3, r3, #8
     eba:	b21b      	sxth	r3, r3
     ebc:	4313      	orrs	r3, r2
     ebe:	b21a      	sxth	r2, r3
     ec0:	230a      	movs	r3, #10
     ec2:	18fb      	adds	r3, r7, r3
     ec4:	801a      	strh	r2, [r3, #0]
    y = msg[4] | msg[5] << 8;
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	3304      	adds	r3, #4
     eca:	781b      	ldrb	r3, [r3, #0]
     ecc:	b21a      	sxth	r2, r3
     ece:	687b      	ldr	r3, [r7, #4]
     ed0:	3305      	adds	r3, #5
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	021b      	lsls	r3, r3, #8
     ed6:	b21b      	sxth	r3, r3
     ed8:	4313      	orrs	r3, r2
     eda:	b21a      	sxth	r2, r3
     edc:	2308      	movs	r3, #8
     ede:	18fb      	adds	r3, r7, r3
     ee0:	801a      	strh	r2, [r3, #0]
    
    mxt_touch_msg.x_pos = x;
     ee2:	4b08      	ldr	r3, [pc, #32]	; (f04 <drv_mxt_proc_t100_message+0x84>)
     ee4:	220a      	movs	r2, #10
     ee6:	18ba      	adds	r2, r7, r2
     ee8:	8812      	ldrh	r2, [r2, #0]
     eea:	805a      	strh	r2, [r3, #2]
    mxt_touch_msg.y_pos = y;
     eec:	4b05      	ldr	r3, [pc, #20]	; (f04 <drv_mxt_proc_t100_message+0x84>)
     eee:	2208      	movs	r2, #8
     ef0:	18ba      	adds	r2, r7, r2
     ef2:	8812      	ldrh	r2, [r2, #0]
     ef4:	809a      	strh	r2, [r3, #4]
}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	46bd      	mov	sp, r7
     efa:	b004      	add	sp, #16
     efc:	bd80      	pop	{r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	20000074 	.word	0x20000074
     f04:	200001cc 	.word	0x200001cc

00000f08 <drv_mxt_proc_t15_message>:

/*
drv_mxt_proc_t15_message
*/
static void drv_mxt_proc_t15_message(uint8_t * msg)
{
     f08:	b580      	push	{r7, lr}
     f0a:	b084      	sub	sp, #16
     f0c:	af00      	add	r7, sp, #0
     f0e:	6078      	str	r0, [r7, #4]
    uint8_t ins;
    struct s_mxt_data *data = &mxt_data;
     f10:	4b2c      	ldr	r3, [pc, #176]	; (fc4 <drv_mxt_proc_t15_message+0xbc>)
     f12:	60fb      	str	r3, [r7, #12]
    if(data->T9_address)
     f14:	68fb      	ldr	r3, [r7, #12]
     f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
     f18:	2b00      	cmp	r3, #0
     f1a:	d01c      	beq.n	f56 <drv_mxt_proc_t15_message+0x4e>
    {
        mxt_touch_msg.key_status[0] = msg[2] | msg[3] << 8;
     f1c:	687b      	ldr	r3, [r7, #4]
     f1e:	3302      	adds	r3, #2
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	b21a      	sxth	r2, r3
     f24:	687b      	ldr	r3, [r7, #4]
     f26:	3303      	adds	r3, #3
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	021b      	lsls	r3, r3, #8
     f2c:	b21b      	sxth	r3, r3
     f2e:	4313      	orrs	r3, r2
     f30:	b21b      	sxth	r3, r3
     f32:	b29a      	uxth	r2, r3
     f34:	4b24      	ldr	r3, [pc, #144]	; (fc8 <drv_mxt_proc_t15_message+0xc0>)
     f36:	80da      	strh	r2, [r3, #6]
        mxt_touch_msg.key_status[1] = msg[4] | msg[5] << 8;
     f38:	687b      	ldr	r3, [r7, #4]
     f3a:	3304      	adds	r3, #4
     f3c:	781b      	ldrb	r3, [r3, #0]
     f3e:	b21a      	sxth	r2, r3
     f40:	687b      	ldr	r3, [r7, #4]
     f42:	3305      	adds	r3, #5
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	021b      	lsls	r3, r3, #8
     f48:	b21b      	sxth	r3, r3
     f4a:	4313      	orrs	r3, r2
     f4c:	b21b      	sxth	r3, r3
     f4e:	b29a      	uxth	r2, r3
     f50:	4b1d      	ldr	r3, [pc, #116]	; (fc8 <drv_mxt_proc_t15_message+0xc0>)
     f52:	811a      	strh	r2, [r3, #8]
     f54:	e032      	b.n	fbc <drv_mxt_proc_t15_message+0xb4>
    }
    else if(data->T100_address)
     f56:	68fb      	ldr	r3, [r7, #12]
     f58:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
     f5a:	2b00      	cmp	r3, #0
     f5c:	d02e      	beq.n	fbc <drv_mxt_proc_t15_message+0xb4>
    {
        ins = msg[0] - data->T15_reportid_min;
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	7819      	ldrb	r1, [r3, #0]
     f62:	68fb      	ldr	r3, [r7, #12]
     f64:	223a      	movs	r2, #58	; 0x3a
     f66:	5c9a      	ldrb	r2, [r3, r2]
     f68:	230b      	movs	r3, #11
     f6a:	18fb      	adds	r3, r7, r3
     f6c:	1a8a      	subs	r2, r1, r2
     f6e:	701a      	strb	r2, [r3, #0]
        if(ins > MXT_T15_INS_SIZE - 1)
     f70:	230b      	movs	r3, #11
     f72:	18fb      	adds	r3, r7, r3
     f74:	781b      	ldrb	r3, [r3, #0]
     f76:	2b01      	cmp	r3, #1
     f78:	d81f      	bhi.n	fba <drv_mxt_proc_t15_message+0xb2>
        {
            //T15 report ID overflow, please check the MXT_T15_INS_SIZE
            return;
        }
        mxt_touch_msg.key_status[ins] = msg[2+ins] | msg[3+ins] << 8;
     f7a:	230b      	movs	r3, #11
     f7c:	18fb      	adds	r3, r7, r3
     f7e:	781b      	ldrb	r3, [r3, #0]
     f80:	220b      	movs	r2, #11
     f82:	18ba      	adds	r2, r7, r2
     f84:	7812      	ldrb	r2, [r2, #0]
     f86:	3202      	adds	r2, #2
     f88:	0011      	movs	r1, r2
     f8a:	687a      	ldr	r2, [r7, #4]
     f8c:	1852      	adds	r2, r2, r1
     f8e:	7812      	ldrb	r2, [r2, #0]
     f90:	b211      	sxth	r1, r2
     f92:	220b      	movs	r2, #11
     f94:	18ba      	adds	r2, r7, r2
     f96:	7812      	ldrb	r2, [r2, #0]
     f98:	3203      	adds	r2, #3
     f9a:	0010      	movs	r0, r2
     f9c:	687a      	ldr	r2, [r7, #4]
     f9e:	1812      	adds	r2, r2, r0
     fa0:	7812      	ldrb	r2, [r2, #0]
     fa2:	0212      	lsls	r2, r2, #8
     fa4:	b212      	sxth	r2, r2
     fa6:	430a      	orrs	r2, r1
     fa8:	b212      	sxth	r2, r2
     faa:	b291      	uxth	r1, r2
     fac:	4a06      	ldr	r2, [pc, #24]	; (fc8 <drv_mxt_proc_t15_message+0xc0>)
     fae:	005b      	lsls	r3, r3, #1
     fb0:	18d3      	adds	r3, r2, r3
     fb2:	3306      	adds	r3, #6
     fb4:	1c0a      	adds	r2, r1, #0
     fb6:	801a      	strh	r2, [r3, #0]
     fb8:	e000      	b.n	fbc <drv_mxt_proc_t15_message+0xb4>
            return;
     fba:	46c0      	nop			; (mov r8, r8)
    }
}
     fbc:	46bd      	mov	sp, r7
     fbe:	b004      	add	sp, #16
     fc0:	bd80      	pop	{r7, pc}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	20000074 	.word	0x20000074
     fc8:	200001cc 	.word	0x200001cc

00000fcc <drv_mxt_process_msg>:
/*
drv_mxt_process_msg
*/
static int32_t drv_mxt_process_msg(uint8_t *message)
{
     fcc:	b580      	push	{r7, lr}
     fce:	b086      	sub	sp, #24
     fd0:	af00      	add	r7, sp, #0
     fd2:	6078      	str	r0, [r7, #4]
    int32_t ret = 0;
     fd4:	2300      	movs	r3, #0
     fd6:	613b      	str	r3, [r7, #16]
	uint8_t report_id = message[0];
     fd8:	230f      	movs	r3, #15
     fda:	18fb      	adds	r3, r7, r3
     fdc:	687a      	ldr	r2, [r7, #4]
     fde:	7812      	ldrb	r2, [r2, #0]
     fe0:	701a      	strb	r2, [r3, #0]
    struct s_mxt_data *data = &mxt_data;
     fe2:	4b4f      	ldr	r3, [pc, #316]	; (1120 <drv_mxt_process_msg+0x154>)
     fe4:	60bb      	str	r3, [r7, #8]
    bool b_keystatus = false,b_touch = false;
     fe6:	2317      	movs	r3, #23
     fe8:	18fb      	adds	r3, r7, r3
     fea:	2200      	movs	r2, #0
     fec:	701a      	strb	r2, [r3, #0]
     fee:	2316      	movs	r3, #22
     ff0:	18fb      	adds	r3, r7, r3
     ff2:	2200      	movs	r2, #0
     ff4:	701a      	strb	r2, [r3, #0]
    
    if(report_id == 0xff)
     ff6:	230f      	movs	r3, #15
     ff8:	18fb      	adds	r3, r7, r3
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	2bff      	cmp	r3, #255	; 0xff
     ffe:	d101      	bne.n	1004 <drv_mxt_process_msg+0x38>
        return 0;
    1000:	2300      	movs	r3, #0
    1002:	e088      	b.n	1116 <drv_mxt_process_msg+0x14a>
    if (report_id == data->T6_reportid)
    1004:	68bb      	ldr	r3, [r7, #8]
    1006:	2237      	movs	r2, #55	; 0x37
    1008:	5c9b      	ldrb	r3, [r3, r2]
    100a:	220f      	movs	r2, #15
    100c:	18ba      	adds	r2, r7, r2
    100e:	7812      	ldrb	r2, [r2, #0]
    1010:	429a      	cmp	r2, r3
    1012:	d104      	bne.n	101e <drv_mxt_process_msg+0x52>
    {
		drv_mxt_proc_t6_message(message);
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	0018      	movs	r0, r3
    1018:	4b42      	ldr	r3, [pc, #264]	; (1124 <drv_mxt_process_msg+0x158>)
    101a:	4798      	blx	r3
    101c:	e05e      	b.n	10dc <drv_mxt_process_msg+0x110>
	} 
    else if(report_id >= data->T9_reportid_min &&
    101e:	68bb      	ldr	r3, [r7, #8]
    1020:	2238      	movs	r2, #56	; 0x38
    1022:	5c9b      	ldrb	r3, [r3, r2]
    1024:	220f      	movs	r2, #15
    1026:	18ba      	adds	r2, r7, r2
    1028:	7812      	ldrb	r2, [r2, #0]
    102a:	429a      	cmp	r2, r3
    102c:	d310      	bcc.n	1050 <drv_mxt_process_msg+0x84>
		   report_id <= data->T9_reportid_max)
    102e:	68bb      	ldr	r3, [r7, #8]
    1030:	2239      	movs	r2, #57	; 0x39
    1032:	5c9b      	ldrb	r3, [r3, r2]
    else if(report_id >= data->T9_reportid_min &&
    1034:	220f      	movs	r2, #15
    1036:	18ba      	adds	r2, r7, r2
    1038:	7812      	ldrb	r2, [r2, #0]
    103a:	429a      	cmp	r2, r3
    103c:	d808      	bhi.n	1050 <drv_mxt_process_msg+0x84>
    {
        //touch
		drv_mxt_proc_t9_message(message);
    103e:	687b      	ldr	r3, [r7, #4]
    1040:	0018      	movs	r0, r3
    1042:	4b39      	ldr	r3, [pc, #228]	; (1128 <drv_mxt_process_msg+0x15c>)
    1044:	4798      	blx	r3
        b_touch = true;
    1046:	2316      	movs	r3, #22
    1048:	18fb      	adds	r3, r7, r3
    104a:	2201      	movs	r2, #1
    104c:	701a      	strb	r2, [r3, #0]
    104e:	e045      	b.n	10dc <drv_mxt_process_msg+0x110>
	} 
    else if (report_id >= data->T100_reportid_min &&
    1050:	68bb      	ldr	r3, [r7, #8]
    1052:	223e      	movs	r2, #62	; 0x3e
    1054:	5c9b      	ldrb	r3, [r3, r2]
    1056:	220f      	movs	r2, #15
    1058:	18ba      	adds	r2, r7, r2
    105a:	7812      	ldrb	r2, [r2, #0]
    105c:	429a      	cmp	r2, r3
    105e:	d310      	bcc.n	1082 <drv_mxt_process_msg+0xb6>
		   report_id <= data->T100_reportid_max)
    1060:	68bb      	ldr	r3, [r7, #8]
    1062:	223f      	movs	r2, #63	; 0x3f
    1064:	5c9b      	ldrb	r3, [r3, r2]
    else if (report_id >= data->T100_reportid_min &&
    1066:	220f      	movs	r2, #15
    1068:	18ba      	adds	r2, r7, r2
    106a:	7812      	ldrb	r2, [r2, #0]
    106c:	429a      	cmp	r2, r3
    106e:	d808      	bhi.n	1082 <drv_mxt_process_msg+0xb6>
    {
        //touch
		drv_mxt_proc_t100_message(message);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	0018      	movs	r0, r3
    1074:	4b2d      	ldr	r3, [pc, #180]	; (112c <drv_mxt_process_msg+0x160>)
    1076:	4798      	blx	r3
        b_touch = true;
    1078:	2316      	movs	r3, #22
    107a:	18fb      	adds	r3, r7, r3
    107c:	2201      	movs	r2, #1
    107e:	701a      	strb	r2, [r3, #0]
    1080:	e02c      	b.n	10dc <drv_mxt_process_msg+0x110>
	}
    else if (report_id == data->T19_reportid) 
    1082:	68bb      	ldr	r3, [r7, #8]
    1084:	223d      	movs	r2, #61	; 0x3d
    1086:	5c9b      	ldrb	r3, [r3, r2]
    1088:	220f      	movs	r2, #15
    108a:	18ba      	adds	r2, r7, r2
    108c:	7812      	ldrb	r2, [r2, #0]
    108e:	429a      	cmp	r2, r3
    1090:	d024      	beq.n	10dc <drv_mxt_process_msg+0x110>
    {
        //reserved
	} 
    else if (report_id == data->T25_reportid) 
    1092:	68bb      	ldr	r3, [r7, #8]
    1094:	223c      	movs	r2, #60	; 0x3c
    1096:	5c9b      	ldrb	r3, [r3, r2]
    1098:	220f      	movs	r2, #15
    109a:	18ba      	adds	r2, r7, r2
    109c:	7812      	ldrb	r2, [r2, #0]
    109e:	429a      	cmp	r2, r3
    10a0:	d104      	bne.n	10ac <drv_mxt_process_msg+0xe0>
    {
        drv_mxt_proc_t25_message(message);
    10a2:	687b      	ldr	r3, [r7, #4]
    10a4:	0018      	movs	r0, r3
    10a6:	4b22      	ldr	r3, [pc, #136]	; (1130 <drv_mxt_process_msg+0x164>)
    10a8:	4798      	blx	r3
    10aa:	e017      	b.n	10dc <drv_mxt_process_msg+0x110>
	} 
    else if (report_id >= data->T15_reportid_min
    10ac:	68bb      	ldr	r3, [r7, #8]
    10ae:	223a      	movs	r2, #58	; 0x3a
    10b0:	5c9b      	ldrb	r3, [r3, r2]
    10b2:	220f      	movs	r2, #15
    10b4:	18ba      	adds	r2, r7, r2
    10b6:	7812      	ldrb	r2, [r2, #0]
    10b8:	429a      	cmp	r2, r3
    10ba:	d30f      	bcc.n	10dc <drv_mxt_process_msg+0x110>
		   && report_id <= data->T15_reportid_max) 
    10bc:	68bb      	ldr	r3, [r7, #8]
    10be:	223b      	movs	r2, #59	; 0x3b
    10c0:	5c9b      	ldrb	r3, [r3, r2]
    10c2:	220f      	movs	r2, #15
    10c4:	18ba      	adds	r2, r7, r2
    10c6:	7812      	ldrb	r2, [r2, #0]
    10c8:	429a      	cmp	r2, r3
    10ca:	d807      	bhi.n	10dc <drv_mxt_process_msg+0x110>
    {
        //T15 keys
		drv_mxt_proc_t15_message(message);
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	0018      	movs	r0, r3
    10d0:	4b18      	ldr	r3, [pc, #96]	; (1134 <drv_mxt_process_msg+0x168>)
    10d2:	4798      	blx	r3
        b_keystatus = true;
    10d4:	2317      	movs	r3, #23
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	2201      	movs	r2, #1
    10da:	701a      	strb	r2, [r3, #0]
	}
    if((mxt_touch_cb)&&b_touch)
    10dc:	4b16      	ldr	r3, [pc, #88]	; (1138 <drv_mxt_process_msg+0x16c>)
    10de:	681b      	ldr	r3, [r3, #0]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d009      	beq.n	10f8 <drv_mxt_process_msg+0x12c>
    10e4:	2316      	movs	r3, #22
    10e6:	18fb      	adds	r3, r7, r3
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d004      	beq.n	10f8 <drv_mxt_process_msg+0x12c>
        mxt_touch_cb(message);
    10ee:	4b12      	ldr	r3, [pc, #72]	; (1138 <drv_mxt_process_msg+0x16c>)
    10f0:	681b      	ldr	r3, [r3, #0]
    10f2:	687a      	ldr	r2, [r7, #4]
    10f4:	0010      	movs	r0, r2
    10f6:	4798      	blx	r3
    if((mxt_keys_cb)&&b_keystatus)
    10f8:	4b10      	ldr	r3, [pc, #64]	; (113c <drv_mxt_process_msg+0x170>)
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	2b00      	cmp	r3, #0
    10fe:	d009      	beq.n	1114 <drv_mxt_process_msg+0x148>
    1100:	2317      	movs	r3, #23
    1102:	18fb      	adds	r3, r7, r3
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	2b00      	cmp	r3, #0
    1108:	d004      	beq.n	1114 <drv_mxt_process_msg+0x148>
        mxt_keys_cb(message);
    110a:	4b0c      	ldr	r3, [pc, #48]	; (113c <drv_mxt_process_msg+0x170>)
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	687a      	ldr	r2, [r7, #4]
    1110:	0010      	movs	r0, r2
    1112:	4798      	blx	r3
    return ret;
    1114:	693b      	ldr	r3, [r7, #16]
}
    1116:	0018      	movs	r0, r3
    1118:	46bd      	mov	sp, r7
    111a:	b006      	add	sp, #24
    111c:	bd80      	pop	{r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	20000074 	.word	0x20000074
    1124:	00000d11 	.word	0x00000d11
    1128:	00000db9 	.word	0x00000db9
    112c:	00000e81 	.word	0x00000e81
    1130:	00000d8d 	.word	0x00000d8d
    1134:	00000f09 	.word	0x00000f09
    1138:	200001c8 	.word	0x200001c8
    113c:	200000c0 	.word	0x200000c0

00001140 <mxt_parse_T9>:


static int32_t mxt_parse_T9()
{
    1140:	b590      	push	{r4, r7, lr}
    1142:	b085      	sub	sp, #20
    1144:	af00      	add	r7, sp, #0
    int32_t ret;
    uint8_t pos[4];
    struct s_mxt_data *data = &mxt_data;
    1146:	4b18      	ldr	r3, [pc, #96]	; (11a8 <mxt_parse_T9+0x68>)
    1148:	60fb      	str	r3, [r7, #12]
    
    ret = drv_i2c_read(data->slave_addr, data->T9_address + MXT_T9_RANGE, pos, 4);
    114a:	68fb      	ldr	r3, [r7, #12]
    114c:	7818      	ldrb	r0, [r3, #0]
    114e:	68fb      	ldr	r3, [r7, #12]
    1150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    1152:	3312      	adds	r3, #18
    1154:	b299      	uxth	r1, r3
    1156:	1d3a      	adds	r2, r7, #4
    1158:	2304      	movs	r3, #4
    115a:	4c14      	ldr	r4, [pc, #80]	; (11ac <mxt_parse_T9+0x6c>)
    115c:	47a0      	blx	r4
    115e:	0003      	movs	r3, r0
    1160:	60bb      	str	r3, [r7, #8]
    if(ret)
    1162:	68bb      	ldr	r3, [r7, #8]
    1164:	2b00      	cmp	r3, #0
    1166:	d001      	beq.n	116c <mxt_parse_T9+0x2c>
        return ret;
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	e018      	b.n	119e <mxt_parse_T9+0x5e>
    data->max_x = pos[1] << 8 | pos[0];
    116c:	1d3b      	adds	r3, r7, #4
    116e:	785b      	ldrb	r3, [r3, #1]
    1170:	021b      	lsls	r3, r3, #8
    1172:	b21a      	sxth	r2, r3
    1174:	1d3b      	adds	r3, r7, #4
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	b21b      	sxth	r3, r3
    117a:	4313      	orrs	r3, r2
    117c:	b21b      	sxth	r3, r3
    117e:	b29a      	uxth	r2, r3
    1180:	68fb      	ldr	r3, [r7, #12]
    1182:	831a      	strh	r2, [r3, #24]
    data->max_y = pos[3] << 8 | pos[2];
    1184:	1d3b      	adds	r3, r7, #4
    1186:	78db      	ldrb	r3, [r3, #3]
    1188:	021b      	lsls	r3, r3, #8
    118a:	b21a      	sxth	r2, r3
    118c:	1d3b      	adds	r3, r7, #4
    118e:	789b      	ldrb	r3, [r3, #2]
    1190:	b21b      	sxth	r3, r3
    1192:	4313      	orrs	r3, r2
    1194:	b21b      	sxth	r3, r3
    1196:	b29a      	uxth	r2, r3
    1198:	68fb      	ldr	r3, [r7, #12]
    119a:	835a      	strh	r2, [r3, #26]
    return 0;
    119c:	2300      	movs	r3, #0
}
    119e:	0018      	movs	r0, r3
    11a0:	46bd      	mov	sp, r7
    11a2:	b005      	add	sp, #20
    11a4:	bd90      	pop	{r4, r7, pc}
    11a6:	46c0      	nop			; (mov r8, r8)
    11a8:	20000074 	.word	0x20000074
    11ac:	00000c01 	.word	0x00000c01

000011b0 <mxt_parse_T100>:


static int32_t mxt_parse_T100()
{
    11b0:	b580      	push	{r7, lr}
    11b2:	af00      	add	r7, sp, #0
    
    return 0;
    11b4:	2300      	movs	r3, #0
}
    11b6:	0018      	movs	r0, r3
    11b8:	46bd      	mov	sp, r7
    11ba:	bd80      	pop	{r7, pc}

000011bc <mxt_parse_object_table>:

/*
mxt_parse_object_table
*/
static int32_t mxt_parse_object_table(uint8_t * object_table)
{
    11bc:	b580      	push	{r7, lr}
    11be:	b088      	sub	sp, #32
    11c0:	af00      	add	r7, sp, #0
    11c2:	6078      	str	r0, [r7, #4]
    int32_t ret = 0,i;
    11c4:	2300      	movs	r3, #0
    11c6:	61fb      	str	r3, [r7, #28]
    uint8_t reportid = 1, min_id, max_id;
    11c8:	2317      	movs	r3, #23
    11ca:	18fb      	adds	r3, r7, r3
    11cc:	2201      	movs	r2, #1
    11ce:	701a      	strb	r2, [r3, #0]
    uint16_t end_address;
    
    struct s_mxt_object *object;
    struct s_mxt_data *data = &mxt_data;
    11d0:	4b99      	ldr	r3, [pc, #612]	; (1438 <mxt_parse_object_table+0x27c>)
    11d2:	613b      	str	r3, [r7, #16]
    
    for(i = 0; i < data->mxt_info.object_num; i ++)
    11d4:	2300      	movs	r3, #0
    11d6:	61bb      	str	r3, [r7, #24]
    11d8:	e10d      	b.n	13f6 <mxt_parse_object_table+0x23a>
    {
        object = (struct s_mxt_object *)object_table + i;
    11da:	69ba      	ldr	r2, [r7, #24]
    11dc:	0013      	movs	r3, r2
    11de:	005b      	lsls	r3, r3, #1
    11e0:	189b      	adds	r3, r3, r2
    11e2:	005b      	lsls	r3, r3, #1
    11e4:	001a      	movs	r2, r3
    11e6:	687b      	ldr	r3, [r7, #4]
    11e8:	189b      	adds	r3, r3, r2
    11ea:	60fb      	str	r3, [r7, #12]
        
        //get report id
        if(object->num_report_ids)
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	795b      	ldrb	r3, [r3, #5]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d01c      	beq.n	122e <mxt_parse_object_table+0x72>
        {
            min_id = reportid;
    11f4:	2316      	movs	r3, #22
    11f6:	18fb      	adds	r3, r7, r3
    11f8:	2217      	movs	r2, #23
    11fa:	18ba      	adds	r2, r7, r2
    11fc:	7812      	ldrb	r2, [r2, #0]
    11fe:	701a      	strb	r2, [r3, #0]
            reportid += object->num_report_ids * (object->instances_minus_one + 1);
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	795b      	ldrb	r3, [r3, #5]
    1204:	68fa      	ldr	r2, [r7, #12]
    1206:	7912      	ldrb	r2, [r2, #4]
    1208:	3201      	adds	r2, #1
    120a:	b2d2      	uxtb	r2, r2
    120c:	4353      	muls	r3, r2
    120e:	b2d9      	uxtb	r1, r3
    1210:	2317      	movs	r3, #23
    1212:	18fb      	adds	r3, r7, r3
    1214:	2217      	movs	r2, #23
    1216:	18ba      	adds	r2, r7, r2
    1218:	7812      	ldrb	r2, [r2, #0]
    121a:	188a      	adds	r2, r1, r2
    121c:	701a      	strb	r2, [r3, #0]
            max_id = reportid - 1;
    121e:	2315      	movs	r3, #21
    1220:	18fb      	adds	r3, r7, r3
    1222:	2217      	movs	r2, #23
    1224:	18ba      	adds	r2, r7, r2
    1226:	7812      	ldrb	r2, [r2, #0]
    1228:	3a01      	subs	r2, #1
    122a:	701a      	strb	r2, [r3, #0]
    122c:	e007      	b.n	123e <mxt_parse_object_table+0x82>
        }
        else
        {
            min_id = 0;
    122e:	2316      	movs	r3, #22
    1230:	18fb      	adds	r3, r7, r3
    1232:	2200      	movs	r2, #0
    1234:	701a      	strb	r2, [r3, #0]
            max_id = 0;
    1236:	2315      	movs	r3, #21
    1238:	18fb      	adds	r3, r7, r3
    123a:	2200      	movs	r2, #0
    123c:	701a      	strb	r2, [r3, #0]
        }
        
        switch(object->type)
    123e:	68fb      	ldr	r3, [r7, #12]
    1240:	781b      	ldrb	r3, [r3, #0]
    1242:	3b05      	subs	r3, #5
    1244:	2b5f      	cmp	r3, #95	; 0x5f
    1246:	d900      	bls.n	124a <mxt_parse_object_table+0x8e>
    1248:	e0ab      	b.n	13a2 <mxt_parse_object_table+0x1e6>
    124a:	009a      	lsls	r2, r3, #2
    124c:	4b7b      	ldr	r3, [pc, #492]	; (143c <mxt_parse_object_table+0x280>)
    124e:	18d3      	adds	r3, r2, r3
    1250:	681b      	ldr	r3, [r3, #0]
    1252:	469f      	mov	pc, r3
        {
            case MXT_GEN_MESSAGE_T5:
                data->T5_msg_size = object->size_minus_one;
    1254:	68fb      	ldr	r3, [r7, #12]
    1256:	78d9      	ldrb	r1, [r3, #3]
    1258:	693b      	ldr	r3, [r7, #16]
    125a:	2236      	movs	r2, #54	; 0x36
    125c:	5499      	strb	r1, [r3, r2]
                data->T5_address = object->start_address;
    125e:	68fb      	ldr	r3, [r7, #12]
    1260:	785a      	ldrb	r2, [r3, #1]
    1262:	789b      	ldrb	r3, [r3, #2]
    1264:	021b      	lsls	r3, r3, #8
    1266:	4313      	orrs	r3, r2
    1268:	b29a      	uxth	r2, r3
    126a:	693b      	ldr	r3, [r7, #16]
    126c:	849a      	strh	r2, [r3, #36]	; 0x24
                break;
    126e:	e09b      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_GEN_COMMAND_T6:
                data->T6_reportid = min_id;
    1270:	693b      	ldr	r3, [r7, #16]
    1272:	2216      	movs	r2, #22
    1274:	18ba      	adds	r2, r7, r2
    1276:	2137      	movs	r1, #55	; 0x37
    1278:	7812      	ldrb	r2, [r2, #0]
    127a:	545a      	strb	r2, [r3, r1]
                data->T6_address = object->start_address;
    127c:	68fb      	ldr	r3, [r7, #12]
    127e:	785a      	ldrb	r2, [r3, #1]
    1280:	789b      	ldrb	r3, [r3, #2]
    1282:	021b      	lsls	r3, r3, #8
    1284:	4313      	orrs	r3, r2
    1286:	b29a      	uxth	r2, r3
    1288:	693b      	ldr	r3, [r7, #16]
    128a:	84da      	strh	r2, [r3, #38]	; 0x26
                break;
    128c:	e08c      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_GEN_POWER_T7:
                data->T7_address = object->start_address;
    128e:	68fb      	ldr	r3, [r7, #12]
    1290:	785a      	ldrb	r2, [r3, #1]
    1292:	789b      	ldrb	r3, [r3, #2]
    1294:	021b      	lsls	r3, r3, #8
    1296:	4313      	orrs	r3, r2
    1298:	b29a      	uxth	r2, r3
    129a:	693b      	ldr	r3, [r7, #16]
    129c:	851a      	strh	r2, [r3, #40]	; 0x28
                break;
    129e:	e083      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_TOUCH_MULTI_T9:
                data->T9_address = object->start_address;
    12a0:	68fb      	ldr	r3, [r7, #12]
    12a2:	785a      	ldrb	r2, [r3, #1]
    12a4:	789b      	ldrb	r3, [r3, #2]
    12a6:	021b      	lsls	r3, r3, #8
    12a8:	4313      	orrs	r3, r2
    12aa:	b29a      	uxth	r2, r3
    12ac:	693b      	ldr	r3, [r7, #16]
    12ae:	855a      	strh	r2, [r3, #42]	; 0x2a
                data->multitouch = MXT_TOUCH_MULTI_T9;
    12b0:	693b      	ldr	r3, [r7, #16]
    12b2:	2209      	movs	r2, #9
    12b4:	731a      	strb	r2, [r3, #12]
                /* Only handle messages from first T9 instance */
                data->T9_reportid_min = min_id;
    12b6:	693b      	ldr	r3, [r7, #16]
    12b8:	2216      	movs	r2, #22
    12ba:	18ba      	adds	r2, r7, r2
    12bc:	2138      	movs	r1, #56	; 0x38
    12be:	7812      	ldrb	r2, [r2, #0]
    12c0:	545a      	strb	r2, [r3, r1]
                data->T9_reportid_max = min_id + object->num_report_ids - 1;
    12c2:	68fb      	ldr	r3, [r7, #12]
    12c4:	795a      	ldrb	r2, [r3, #5]
    12c6:	2316      	movs	r3, #22
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	18d3      	adds	r3, r2, r3
    12ce:	b2db      	uxtb	r3, r3
    12d0:	3b01      	subs	r3, #1
    12d2:	b2d9      	uxtb	r1, r3
    12d4:	693b      	ldr	r3, [r7, #16]
    12d6:	2239      	movs	r2, #57	; 0x39
    12d8:	5499      	strb	r1, [r3, r2]
                data->num_touchids = object->num_report_ids;
    12da:	68fb      	ldr	r3, [r7, #12]
    12dc:	795a      	ldrb	r2, [r3, #5]
    12de:	693b      	ldr	r3, [r7, #16]
    12e0:	735a      	strb	r2, [r3, #13]
                ret = mxt_parse_T9();
    12e2:	4b57      	ldr	r3, [pc, #348]	; (1440 <mxt_parse_object_table+0x284>)
    12e4:	4798      	blx	r3
    12e6:	0003      	movs	r3, r0
    12e8:	61fb      	str	r3, [r7, #28]
                if(ret)
    12ea:	69fb      	ldr	r3, [r7, #28]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d05a      	beq.n	13a6 <mxt_parse_object_table+0x1ea>
                    return ret;
    12f0:	69fb      	ldr	r3, [r7, #28]
    12f2:	e09c      	b.n	142e <mxt_parse_object_table+0x272>
                break;
            case MXT_TOUCH_KEYARRAY_T15:
                data->T15_reportid_min = min_id;
    12f4:	693b      	ldr	r3, [r7, #16]
    12f6:	2216      	movs	r2, #22
    12f8:	18ba      	adds	r2, r7, r2
    12fa:	213a      	movs	r1, #58	; 0x3a
    12fc:	7812      	ldrb	r2, [r2, #0]
    12fe:	545a      	strb	r2, [r3, r1]
                data->T15_reportid_max = max_id;
    1300:	693b      	ldr	r3, [r7, #16]
    1302:	2215      	movs	r2, #21
    1304:	18ba      	adds	r2, r7, r2
    1306:	213b      	movs	r1, #59	; 0x3b
    1308:	7812      	ldrb	r2, [r2, #0]
    130a:	545a      	strb	r2, [r3, r1]
                break;
    130c:	e04c      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_SPT_SELFTEST_T25:
                data->T25_reportid = min_id;
    130e:	693b      	ldr	r3, [r7, #16]
    1310:	2216      	movs	r2, #22
    1312:	18ba      	adds	r2, r7, r2
    1314:	213c      	movs	r1, #60	; 0x3c
    1316:	7812      	ldrb	r2, [r2, #0]
    1318:	545a      	strb	r2, [r3, r1]
                data->T25_address = object->start_address;
    131a:	68fb      	ldr	r3, [r7, #12]
    131c:	785a      	ldrb	r2, [r3, #1]
    131e:	789b      	ldrb	r3, [r3, #2]
    1320:	021b      	lsls	r3, r3, #8
    1322:	4313      	orrs	r3, r2
    1324:	b29a      	uxth	r2, r3
    1326:	693b      	ldr	r3, [r7, #16]
    1328:	85da      	strh	r2, [r3, #46]	; 0x2e
                break;
    132a:	e03d      	b.n	13a8 <mxt_parse_object_table+0x1ec>
                
            case MXT_SPT_MESSAGECOUNT_T44:
                data->T44_address = object->start_address;
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	785a      	ldrb	r2, [r3, #1]
    1330:	789b      	ldrb	r3, [r3, #2]
    1332:	021b      	lsls	r3, r3, #8
    1334:	4313      	orrs	r3, r2
    1336:	b29a      	uxth	r2, r3
    1338:	693b      	ldr	r3, [r7, #16]
    133a:	865a      	strh	r2, [r3, #50]	; 0x32
                break;
    133c:	e034      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_SPT_GPIOPWM_T19:
                data->T19_reportid = min_id;
    133e:	693b      	ldr	r3, [r7, #16]
    1340:	2216      	movs	r2, #22
    1342:	18ba      	adds	r2, r7, r2
    1344:	213d      	movs	r1, #61	; 0x3d
    1346:	7812      	ldrb	r2, [r2, #0]
    1348:	545a      	strb	r2, [r3, r1]
                break;
    134a:	e02d      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_SPT_USERDATA_T38:
                data->T38_address = object->start_address;
    134c:	68fb      	ldr	r3, [r7, #12]
    134e:	785a      	ldrb	r2, [r3, #1]
    1350:	789b      	ldrb	r3, [r3, #2]
    1352:	021b      	lsls	r3, r3, #8
    1354:	4313      	orrs	r3, r2
    1356:	b29a      	uxth	r2, r3
    1358:	693b      	ldr	r3, [r7, #16]
    135a:	861a      	strh	r2, [r3, #48]	; 0x30
                break;
    135c:	e024      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            case MXT_TOUCH_MULTITOUCHSCREEN_T100:
                data->T100_address = object->start_address;
    135e:	68fb      	ldr	r3, [r7, #12]
    1360:	785a      	ldrb	r2, [r3, #1]
    1362:	789b      	ldrb	r3, [r3, #2]
    1364:	021b      	lsls	r3, r3, #8
    1366:	4313      	orrs	r3, r2
    1368:	b29a      	uxth	r2, r3
    136a:	693b      	ldr	r3, [r7, #16]
    136c:	869a      	strh	r2, [r3, #52]	; 0x34
                data->multitouch = MXT_TOUCH_MULTITOUCHSCREEN_T100;
    136e:	693b      	ldr	r3, [r7, #16]
    1370:	2264      	movs	r2, #100	; 0x64
    1372:	731a      	strb	r2, [r3, #12]
                data->T100_reportid_min = min_id;
    1374:	693b      	ldr	r3, [r7, #16]
    1376:	2216      	movs	r2, #22
    1378:	18ba      	adds	r2, r7, r2
    137a:	213e      	movs	r1, #62	; 0x3e
    137c:	7812      	ldrb	r2, [r2, #0]
    137e:	545a      	strb	r2, [r3, r1]
                data->T100_reportid_max = max_id;
    1380:	693b      	ldr	r3, [r7, #16]
    1382:	2215      	movs	r2, #21
    1384:	18ba      	adds	r2, r7, r2
    1386:	213f      	movs	r1, #63	; 0x3f
    1388:	7812      	ldrb	r2, [r2, #0]
    138a:	545a      	strb	r2, [r3, r1]
                /* first two report IDs reserved */
                data->num_touchids = object->num_report_ids - 2;
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	795b      	ldrb	r3, [r3, #5]
    1390:	3b02      	subs	r3, #2
    1392:	b2da      	uxtb	r2, r3
    1394:	693b      	ldr	r3, [r7, #16]
    1396:	735a      	strb	r2, [r3, #13]
                ret = mxt_parse_T100();
    1398:	4b2a      	ldr	r3, [pc, #168]	; (1444 <mxt_parse_object_table+0x288>)
    139a:	4798      	blx	r3
    139c:	0003      	movs	r3, r0
    139e:	61fb      	str	r3, [r7, #28]
                break;
    13a0:	e002      	b.n	13a8 <mxt_parse_object_table+0x1ec>
            default:
                break;
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	e000      	b.n	13a8 <mxt_parse_object_table+0x1ec>
                break;
    13a6:	46c0      	nop			; (mov r8, r8)
            
        }
        end_address = object->start_address + (object->size_minus_one + 1) * (object->instances_minus_one + 1) - 1;
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	785a      	ldrb	r2, [r3, #1]
    13ac:	789b      	ldrb	r3, [r3, #2]
    13ae:	021b      	lsls	r3, r3, #8
    13b0:	4313      	orrs	r3, r2
    13b2:	b29a      	uxth	r2, r3
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	78db      	ldrb	r3, [r3, #3]
    13b8:	3301      	adds	r3, #1
    13ba:	b29b      	uxth	r3, r3
    13bc:	68f9      	ldr	r1, [r7, #12]
    13be:	7909      	ldrb	r1, [r1, #4]
    13c0:	3101      	adds	r1, #1
    13c2:	b289      	uxth	r1, r1
    13c4:	434b      	muls	r3, r1
    13c6:	b29b      	uxth	r3, r3
    13c8:	18d3      	adds	r3, r2, r3
    13ca:	b29a      	uxth	r2, r3
    13cc:	230a      	movs	r3, #10
    13ce:	18fb      	adds	r3, r7, r3
    13d0:	3a01      	subs	r2, #1
    13d2:	801a      	strh	r2, [r3, #0]
        if (end_address >= data->mem_size)
    13d4:	693b      	ldr	r3, [r7, #16]
    13d6:	895b      	ldrh	r3, [r3, #10]
    13d8:	220a      	movs	r2, #10
    13da:	18ba      	adds	r2, r7, r2
    13dc:	8812      	ldrh	r2, [r2, #0]
    13de:	429a      	cmp	r2, r3
    13e0:	d306      	bcc.n	13f0 <mxt_parse_object_table+0x234>
        {
            data->mem_size = end_address + 1;
    13e2:	230a      	movs	r3, #10
    13e4:	18fb      	adds	r3, r7, r3
    13e6:	881b      	ldrh	r3, [r3, #0]
    13e8:	3301      	adds	r3, #1
    13ea:	b29a      	uxth	r2, r3
    13ec:	693b      	ldr	r3, [r7, #16]
    13ee:	815a      	strh	r2, [r3, #10]
    for(i = 0; i < data->mxt_info.object_num; i ++)
    13f0:	69bb      	ldr	r3, [r7, #24]
    13f2:	3301      	adds	r3, #1
    13f4:	61bb      	str	r3, [r7, #24]
    13f6:	693b      	ldr	r3, [r7, #16]
    13f8:	7a1b      	ldrb	r3, [r3, #8]
    13fa:	001a      	movs	r2, r3
    13fc:	69bb      	ldr	r3, [r7, #24]
    13fe:	429a      	cmp	r2, r3
    1400:	dd00      	ble.n	1404 <mxt_parse_object_table+0x248>
    1402:	e6ea      	b.n	11da <mxt_parse_object_table+0x1e>
        }
    }
    
    /* Store maximum reportid */
    data->max_reportid = reportid;
    1404:	693b      	ldr	r3, [r7, #16]
    1406:	2217      	movs	r2, #23
    1408:	18ba      	adds	r2, r7, r2
    140a:	7812      	ldrb	r2, [r2, #0]
    140c:	739a      	strb	r2, [r3, #14]
    
    if (data->T44_address && (data->T5_address != data->T44_address + 1))
    140e:	693b      	ldr	r3, [r7, #16]
    1410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1412:	2b00      	cmp	r3, #0
    1414:	d00a      	beq.n	142c <mxt_parse_object_table+0x270>
    1416:	693b      	ldr	r3, [r7, #16]
    1418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    141a:	001a      	movs	r2, r3
    141c:	693b      	ldr	r3, [r7, #16]
    141e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1420:	3301      	adds	r3, #1
    1422:	429a      	cmp	r2, r3
    1424:	d002      	beq.n	142c <mxt_parse_object_table+0x270>
    {
        //T44 or T5 address error
        return ERR_MXT_T5_T44_ADDR;
    1426:	2304      	movs	r3, #4
    1428:	425b      	negs	r3, r3
    142a:	e000      	b.n	142e <mxt_parse_object_table+0x272>
    }
    return ret;
    142c:	69fb      	ldr	r3, [r7, #28]
}
    142e:	0018      	movs	r0, r3
    1430:	46bd      	mov	sp, r7
    1432:	b008      	add	sp, #32
    1434:	bd80      	pop	{r7, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	20000074 	.word	0x20000074
    143c:	00004148 	.word	0x00004148
    1440:	00001141 	.word	0x00001141
    1444:	000011b1 	.word	0x000011b1

00001448 <mxt_calc_crc24>:

/*
mxt_calc_crc24
*/
static void mxt_calc_crc24(uint32_t *crc, uint8_t firstbyte, uint8_t secondbyte)
{
    1448:	b580      	push	{r7, lr}
    144a:	b084      	sub	sp, #16
    144c:	af00      	add	r7, sp, #0
    144e:	6078      	str	r0, [r7, #4]
    1450:	0008      	movs	r0, r1
    1452:	0011      	movs	r1, r2
    1454:	1cfb      	adds	r3, r7, #3
    1456:	1c02      	adds	r2, r0, #0
    1458:	701a      	strb	r2, [r3, #0]
    145a:	1cbb      	adds	r3, r7, #2
    145c:	1c0a      	adds	r2, r1, #0
    145e:	701a      	strb	r2, [r3, #0]
    static const unsigned int crcpoly = 0x80001B;
    uint32_t result;
    uint32_t data_word;

    data_word = (secondbyte << 8) | firstbyte;
    1460:	1cbb      	adds	r3, r7, #2
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	021a      	lsls	r2, r3, #8
    1466:	1cfb      	adds	r3, r7, #3
    1468:	781b      	ldrb	r3, [r3, #0]
    146a:	4313      	orrs	r3, r2
    146c:	60bb      	str	r3, [r7, #8]
    result = ((*crc << 1) ^ data_word);
    146e:	687b      	ldr	r3, [r7, #4]
    1470:	681b      	ldr	r3, [r3, #0]
    1472:	005a      	lsls	r2, r3, #1
    1474:	68bb      	ldr	r3, [r7, #8]
    1476:	4053      	eors	r3, r2
    1478:	60fb      	str	r3, [r7, #12]

    if (result & 0x1000000)
    147a:	68fa      	ldr	r2, [r7, #12]
    147c:	2380      	movs	r3, #128	; 0x80
    147e:	045b      	lsls	r3, r3, #17
    1480:	4013      	ands	r3, r2
    1482:	d004      	beq.n	148e <mxt_calc_crc24+0x46>
        result ^= crcpoly;
    1484:	4b05      	ldr	r3, [pc, #20]	; (149c <mxt_calc_crc24+0x54>)
    1486:	681b      	ldr	r3, [r3, #0]
    1488:	68fa      	ldr	r2, [r7, #12]
    148a:	4053      	eors	r3, r2
    148c:	60fb      	str	r3, [r7, #12]

    *crc = result;
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	68fa      	ldr	r2, [r7, #12]
    1492:	601a      	str	r2, [r3, #0]
}
    1494:	46c0      	nop			; (mov r8, r8)
    1496:	46bd      	mov	sp, r7
    1498:	b004      	add	sp, #16
    149a:	bd80      	pop	{r7, pc}
    149c:	000042d4 	.word	0x000042d4

000014a0 <mxt_calculate_crc>:

/*
mxt_calculate_crc
*/
static int32_t mxt_calculate_crc(uint8_t *base, uint16_t start_off, uint16_t end_off)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b086      	sub	sp, #24
    14a4:	af00      	add	r7, sp, #0
    14a6:	6078      	str	r0, [r7, #4]
    14a8:	0008      	movs	r0, r1
    14aa:	0011      	movs	r1, r2
    14ac:	1cbb      	adds	r3, r7, #2
    14ae:	1c02      	adds	r2, r0, #0
    14b0:	801a      	strh	r2, [r3, #0]
    14b2:	003b      	movs	r3, r7
    14b4:	1c0a      	adds	r2, r1, #0
    14b6:	801a      	strh	r2, [r3, #0]
    uint32_t crc = 0;
    14b8:	2300      	movs	r3, #0
    14ba:	60fb      	str	r3, [r7, #12]
    uint8_t *ptr = base + start_off;
    14bc:	1cbb      	adds	r3, r7, #2
    14be:	881b      	ldrh	r3, [r3, #0]
    14c0:	687a      	ldr	r2, [r7, #4]
    14c2:	18d3      	adds	r3, r2, r3
    14c4:	617b      	str	r3, [r7, #20]
    uint8_t *last_val = base + end_off - 1;
    14c6:	003b      	movs	r3, r7
    14c8:	881b      	ldrh	r3, [r3, #0]
    14ca:	3b01      	subs	r3, #1
    14cc:	687a      	ldr	r2, [r7, #4]
    14ce:	18d3      	adds	r3, r2, r3
    14d0:	613b      	str	r3, [r7, #16]

    if (end_off < start_off)
    14d2:	003a      	movs	r2, r7
    14d4:	1cbb      	adds	r3, r7, #2
    14d6:	8812      	ldrh	r2, [r2, #0]
    14d8:	881b      	ldrh	r3, [r3, #0]
    14da:	429a      	cmp	r2, r3
    14dc:	d20f      	bcs.n	14fe <mxt_calculate_crc+0x5e>
        return ERR_MXT_CRC_INPUT_DATA;
    14de:	2305      	movs	r3, #5
    14e0:	425b      	negs	r3, r3
    14e2:	e021      	b.n	1528 <mxt_calculate_crc+0x88>

    while (ptr < last_val) {
        mxt_calc_crc24(&crc, *ptr, *(ptr + 1));
    14e4:	697b      	ldr	r3, [r7, #20]
    14e6:	7819      	ldrb	r1, [r3, #0]
    14e8:	697b      	ldr	r3, [r7, #20]
    14ea:	3301      	adds	r3, #1
    14ec:	781a      	ldrb	r2, [r3, #0]
    14ee:	230c      	movs	r3, #12
    14f0:	18fb      	adds	r3, r7, r3
    14f2:	0018      	movs	r0, r3
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <mxt_calculate_crc+0x90>)
    14f6:	4798      	blx	r3
        ptr += 2;
    14f8:	697b      	ldr	r3, [r7, #20]
    14fa:	3302      	adds	r3, #2
    14fc:	617b      	str	r3, [r7, #20]
    while (ptr < last_val) {
    14fe:	697a      	ldr	r2, [r7, #20]
    1500:	693b      	ldr	r3, [r7, #16]
    1502:	429a      	cmp	r2, r3
    1504:	d3ee      	bcc.n	14e4 <mxt_calculate_crc+0x44>
    }

    /* if len is odd, fill the last byte with 0 */
    if (ptr == last_val)
    1506:	697a      	ldr	r2, [r7, #20]
    1508:	693b      	ldr	r3, [r7, #16]
    150a:	429a      	cmp	r2, r3
    150c:	d107      	bne.n	151e <mxt_calculate_crc+0x7e>
        mxt_calc_crc24(&crc, *ptr, 0);
    150e:	697b      	ldr	r3, [r7, #20]
    1510:	7819      	ldrb	r1, [r3, #0]
    1512:	230c      	movs	r3, #12
    1514:	18fb      	adds	r3, r7, r3
    1516:	2200      	movs	r2, #0
    1518:	0018      	movs	r0, r3
    151a:	4b05      	ldr	r3, [pc, #20]	; (1530 <mxt_calculate_crc+0x90>)
    151c:	4798      	blx	r3

    /* Mask to 24-bit */
    crc &= 0x00FFFFFF;
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	021b      	lsls	r3, r3, #8
    1522:	0a1b      	lsrs	r3, r3, #8
    1524:	60fb      	str	r3, [r7, #12]

    return crc;
    1526:	68fb      	ldr	r3, [r7, #12]
}
    1528:	0018      	movs	r0, r3
    152a:	46bd      	mov	sp, r7
    152c:	b006      	add	sp, #24
    152e:	bd80      	pop	{r7, pc}
    1530:	00001449 	.word	0x00001449

00001534 <drv_mxt_looking_for>:
/*
drv_mxt_looking_for
search *object in info block 
*/
static struct s_mxt_object *drv_mxt_looking_for(struct s_mxt_data *data, uint8_t *object_table, uint8_t object_no)
{
    1534:	b580      	push	{r7, lr}
    1536:	b086      	sub	sp, #24
    1538:	af00      	add	r7, sp, #0
    153a:	60f8      	str	r0, [r7, #12]
    153c:	60b9      	str	r1, [r7, #8]
    153e:	1dfb      	adds	r3, r7, #7
    1540:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	struct s_mxt_object *object;
	for(i = 0; i < data->mxt_info.object_num; i++)
    1542:	2317      	movs	r3, #23
    1544:	18fb      	adds	r3, r7, r3
    1546:	2200      	movs	r2, #0
    1548:	701a      	strb	r2, [r3, #0]
    154a:	e019      	b.n	1580 <drv_mxt_looking_for+0x4c>
	{
		object = (struct s_mxt_object *)object_table +i;
    154c:	2317      	movs	r3, #23
    154e:	18fb      	adds	r3, r7, r3
    1550:	781a      	ldrb	r2, [r3, #0]
    1552:	0013      	movs	r3, r2
    1554:	005b      	lsls	r3, r3, #1
    1556:	189b      	adds	r3, r3, r2
    1558:	005b      	lsls	r3, r3, #1
    155a:	001a      	movs	r2, r3
    155c:	68bb      	ldr	r3, [r7, #8]
    155e:	189b      	adds	r3, r3, r2
    1560:	613b      	str	r3, [r7, #16]
		if(object_no == object->type)
    1562:	693b      	ldr	r3, [r7, #16]
    1564:	781b      	ldrb	r3, [r3, #0]
    1566:	1dfa      	adds	r2, r7, #7
    1568:	7812      	ldrb	r2, [r2, #0]
    156a:	429a      	cmp	r2, r3
    156c:	d101      	bne.n	1572 <drv_mxt_looking_for+0x3e>
			return object;
    156e:	693b      	ldr	r3, [r7, #16]
    1570:	e00e      	b.n	1590 <drv_mxt_looking_for+0x5c>
	for(i = 0; i < data->mxt_info.object_num; i++)
    1572:	2317      	movs	r3, #23
    1574:	18fb      	adds	r3, r7, r3
    1576:	781a      	ldrb	r2, [r3, #0]
    1578:	2317      	movs	r3, #23
    157a:	18fb      	adds	r3, r7, r3
    157c:	3201      	adds	r2, #1
    157e:	701a      	strb	r2, [r3, #0]
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	7a1b      	ldrb	r3, [r3, #8]
    1584:	2217      	movs	r2, #23
    1586:	18ba      	adds	r2, r7, r2
    1588:	7812      	ldrb	r2, [r2, #0]
    158a:	429a      	cmp	r2, r3
    158c:	d3de      	bcc.n	154c <drv_mxt_looking_for+0x18>
	}
	return NULL;
    158e:	2300      	movs	r3, #0
}
    1590:	0018      	movs	r0, r3
    1592:	46bd      	mov	sp, r7
    1594:	b006      	add	sp, #24
    1596:	bd80      	pop	{r7, pc}

00001598 <drv_mxt_send_T6_cmd>:

static int32_t drv_mxt_send_T6_cmd(struct s_mxt_data *data, uint8_t offset, uint8_t cmd)
{
    1598:	b590      	push	{r4, r7, lr}
    159a:	b083      	sub	sp, #12
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
    15a0:	0008      	movs	r0, r1
    15a2:	0011      	movs	r1, r2
    15a4:	1cfb      	adds	r3, r7, #3
    15a6:	1c02      	adds	r2, r0, #0
    15a8:	701a      	strb	r2, [r3, #0]
    15aa:	1cbb      	adds	r3, r7, #2
    15ac:	1c0a      	adds	r2, r1, #0
    15ae:	701a      	strb	r2, [r3, #0]
    return drv_i2c_write(data->slave_addr, data->T6_address + offset, &cmd, 1);
    15b0:	687b      	ldr	r3, [r7, #4]
    15b2:	7818      	ldrb	r0, [r3, #0]
    15b4:	687b      	ldr	r3, [r7, #4]
    15b6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    15b8:	1cfb      	adds	r3, r7, #3
    15ba:	781b      	ldrb	r3, [r3, #0]
    15bc:	b29b      	uxth	r3, r3
    15be:	18d3      	adds	r3, r2, r3
    15c0:	b299      	uxth	r1, r3
    15c2:	1cba      	adds	r2, r7, #2
    15c4:	2301      	movs	r3, #1
    15c6:	4c03      	ldr	r4, [pc, #12]	; (15d4 <drv_mxt_send_T6_cmd+0x3c>)
    15c8:	47a0      	blx	r4
    15ca:	0003      	movs	r3, r0
}
    15cc:	0018      	movs	r0, r3
    15ce:	46bd      	mov	sp, r7
    15d0:	b003      	add	sp, #12
    15d2:	bd90      	pop	{r4, r7, pc}
    15d4:	00000a51 	.word	0x00000a51

000015d8 <drv_mxt_update_cfg>:
/*
drv_mxt_update_cfg
update cfg from .h
*/
int32_t drv_mxt_update_cfg()
{
    15d8:	b590      	push	{r4, r7, lr}
    15da:	b089      	sub	sp, #36	; 0x24
    15dc:	af00      	add	r7, sp, #0
	uint8_t object_no,object_no_old = 0,ins_no,size;
    15de:	231f      	movs	r3, #31
    15e0:	18fb      	adds	r3, r7, r3
    15e2:	2200      	movs	r2, #0
    15e4:	701a      	strb	r2, [r3, #0]
	uint8_t *point;
	uint16_t offset,len = sizeof(file_cfg_data);
    15e6:	230e      	movs	r3, #14
    15e8:	18fb      	adds	r3, r7, r3
    15ea:	4a5a      	ldr	r2, [pc, #360]	; (1754 <drv_mxt_update_cfg+0x17c>)
    15ec:	801a      	strh	r2, [r3, #0]
	struct s_mxt_object *object = NULL;
    15ee:	2300      	movs	r3, #0
    15f0:	613b      	str	r3, [r7, #16]
	int32_t ret = 0;
    15f2:	2300      	movs	r3, #0
    15f4:	60bb      	str	r3, [r7, #8]
	
	struct s_mxt_data *data = &mxt_data;
    15f6:	4b58      	ldr	r3, [pc, #352]	; (1758 <drv_mxt_update_cfg+0x180>)
    15f8:	607b      	str	r3, [r7, #4]
    } 
    */
    
    //check config data
    //magic code
    if(memcmp(MXT_CFG_MAGIC_CODE,file_magic_code,sizeof(MXT_CFG_MAGIC_CODE)))
    15fa:	4958      	ldr	r1, [pc, #352]	; (175c <drv_mxt_update_cfg+0x184>)
    15fc:	4b58      	ldr	r3, [pc, #352]	; (1760 <drv_mxt_update_cfg+0x188>)
    15fe:	220b      	movs	r2, #11
    1600:	0018      	movs	r0, r3
    1602:	4b58      	ldr	r3, [pc, #352]	; (1764 <drv_mxt_update_cfg+0x18c>)
    1604:	4798      	blx	r3
    1606:	1e03      	subs	r3, r0, #0
    1608:	d002      	beq.n	1610 <drv_mxt_update_cfg+0x38>
    {
        //magic code mis-march
        return ERR_MXT_MAGIC_CODE;
    160a:	2308      	movs	r3, #8
    160c:	425b      	negs	r3, r3
    160e:	e09d      	b.n	174c <drv_mxt_update_cfg+0x174>
    }
    //check device info
    if(memcmp(&data->mxt_info,file_device_info,sizeof(data->mxt_info)))
    1610:	687b      	ldr	r3, [r7, #4]
    1612:	3302      	adds	r3, #2
    1614:	4954      	ldr	r1, [pc, #336]	; (1768 <drv_mxt_update_cfg+0x190>)
    1616:	2207      	movs	r2, #7
    1618:	0018      	movs	r0, r3
    161a:	4b52      	ldr	r3, [pc, #328]	; (1764 <drv_mxt_update_cfg+0x18c>)
    161c:	4798      	blx	r3
    161e:	1e03      	subs	r3, r0, #0
    1620:	d002      	beq.n	1628 <drv_mxt_update_cfg+0x50>
    {
        //device mis-march
        return ERR_MXT_DEVICE_INFO;
    1622:	2309      	movs	r3, #9
    1624:	425b      	negs	r3, r3
    1626:	e091      	b.n	174c <drv_mxt_update_cfg+0x174>
    }
    if(data->config_crc == file_cfg_crc)
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	695b      	ldr	r3, [r3, #20]
    162c:	4a4f      	ldr	r2, [pc, #316]	; (176c <drv_mxt_update_cfg+0x194>)
    162e:	4293      	cmp	r3, r2
    1630:	d101      	bne.n	1636 <drv_mxt_update_cfg+0x5e>
    {
        //same crc, don't need update
        return 0;
    1632:	2300      	movs	r3, #0
    1634:	e08a      	b.n	174c <drv_mxt_update_cfg+0x174>
    }
    
    //disable chg interrupt
    //#disable chg interrupt
	point = (uint8_t *)file_cfg_data;
    1636:	4b4e      	ldr	r3, [pc, #312]	; (1770 <drv_mxt_update_cfg+0x198>)
    1638:	61bb      	str	r3, [r7, #24]
	for(offset = 0; offset < len; )
    163a:	2316      	movs	r3, #22
    163c:	18fb      	adds	r3, r7, r3
    163e:	2200      	movs	r2, #0
    1640:	801a      	strh	r2, [r3, #0]
    1642:	e06f      	b.n	1724 <drv_mxt_update_cfg+0x14c>
	{
		object_no = *point++;
    1644:	69bb      	ldr	r3, [r7, #24]
    1646:	1c5a      	adds	r2, r3, #1
    1648:	61ba      	str	r2, [r7, #24]
    164a:	1cfa      	adds	r2, r7, #3
    164c:	781b      	ldrb	r3, [r3, #0]
    164e:	7013      	strb	r3, [r2, #0]
		ins_no = *point++;
    1650:	69bb      	ldr	r3, [r7, #24]
    1652:	1c5a      	adds	r2, r3, #1
    1654:	61ba      	str	r2, [r7, #24]
    1656:	1cba      	adds	r2, r7, #2
    1658:	781b      	ldrb	r3, [r3, #0]
    165a:	7013      	strb	r3, [r2, #0]
		size = *point++;
    165c:	69bb      	ldr	r3, [r7, #24]
    165e:	1c5a      	adds	r2, r3, #1
    1660:	61ba      	str	r2, [r7, #24]
    1662:	1c7a      	adds	r2, r7, #1
    1664:	781b      	ldrb	r3, [r3, #0]
    1666:	7013      	strb	r3, [r2, #0]
		offset += size + 3;
    1668:	1c7b      	adds	r3, r7, #1
    166a:	781b      	ldrb	r3, [r3, #0]
    166c:	b29a      	uxth	r2, r3
    166e:	2316      	movs	r3, #22
    1670:	18fb      	adds	r3, r7, r3
    1672:	881b      	ldrh	r3, [r3, #0]
    1674:	18d3      	adds	r3, r2, r3
    1676:	b29a      	uxth	r2, r3
    1678:	2316      	movs	r3, #22
    167a:	18fb      	adds	r3, r7, r3
    167c:	3203      	adds	r2, #3
    167e:	801a      	strh	r2, [r3, #0]
		if(object_no == object_no_old)
    1680:	1cfa      	adds	r2, r7, #3
    1682:	231f      	movs	r3, #31
    1684:	18fb      	adds	r3, r7, r3
    1686:	7812      	ldrb	r2, [r2, #0]
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	429a      	cmp	r2, r3
    168c:	d012      	beq.n	16b4 <drv_mxt_update_cfg+0xdc>
			goto skip_looking;
		object = drv_mxt_looking_for(data, mxt_block_info + MXT_OBJECT_START, object_no);
    168e:	4939      	ldr	r1, [pc, #228]	; (1774 <drv_mxt_update_cfg+0x19c>)
    1690:	1cfb      	adds	r3, r7, #3
    1692:	781a      	ldrb	r2, [r3, #0]
    1694:	687b      	ldr	r3, [r7, #4]
    1696:	0018      	movs	r0, r3
    1698:	4b37      	ldr	r3, [pc, #220]	; (1778 <drv_mxt_update_cfg+0x1a0>)
    169a:	4798      	blx	r3
    169c:	0003      	movs	r3, r0
    169e:	613b      	str	r3, [r7, #16]
		if(!object)
    16a0:	693b      	ldr	r3, [r7, #16]
    16a2:	2b00      	cmp	r3, #0
    16a4:	d107      	bne.n	16b6 <drv_mxt_update_cfg+0xde>
    16a6:	231f      	movs	r3, #31
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	221f      	movs	r2, #31
    16ac:	18ba      	adds	r2, r7, r2
    16ae:	7812      	ldrb	r2, [r2, #0]
    16b0:	701a      	strb	r2, [r3, #0]
		{
			//fail to find the object
			continue;
    16b2:	e037      	b.n	1724 <drv_mxt_update_cfg+0x14c>
			goto skip_looking;
    16b4:	46c0      	nop			; (mov r8, r8)
		}
skip_looking:
		if(ins_no > object->instances_minus_one)
    16b6:	693b      	ldr	r3, [r7, #16]
    16b8:	791b      	ldrb	r3, [r3, #4]
    16ba:	1cba      	adds	r2, r7, #2
    16bc:	7812      	ldrb	r2, [r2, #0]
    16be:	429a      	cmp	r2, r3
    16c0:	d906      	bls.n	16d0 <drv_mxt_update_cfg+0xf8>
    16c2:	231f      	movs	r3, #31
    16c4:	18fb      	adds	r3, r7, r3
    16c6:	221f      	movs	r2, #31
    16c8:	18ba      	adds	r2, r7, r2
    16ca:	7812      	ldrb	r2, [r2, #0]
    16cc:	701a      	strb	r2, [r3, #0]
		{
			//ins# over object ins
			continue;
    16ce:	e029      	b.n	1724 <drv_mxt_update_cfg+0x14c>
		}		
		ret = drv_i2c_write(data->slave_addr, object->start_address + ins_no*(object->size_minus_one+1), point, size);
    16d0:	687b      	ldr	r3, [r7, #4]
    16d2:	7818      	ldrb	r0, [r3, #0]
    16d4:	693b      	ldr	r3, [r7, #16]
    16d6:	785a      	ldrb	r2, [r3, #1]
    16d8:	789b      	ldrb	r3, [r3, #2]
    16da:	021b      	lsls	r3, r3, #8
    16dc:	4313      	orrs	r3, r2
    16de:	b29a      	uxth	r2, r3
    16e0:	1cbb      	adds	r3, r7, #2
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	b29b      	uxth	r3, r3
    16e6:	6939      	ldr	r1, [r7, #16]
    16e8:	78c9      	ldrb	r1, [r1, #3]
    16ea:	3101      	adds	r1, #1
    16ec:	b289      	uxth	r1, r1
    16ee:	434b      	muls	r3, r1
    16f0:	b29b      	uxth	r3, r3
    16f2:	18d3      	adds	r3, r2, r3
    16f4:	b299      	uxth	r1, r3
    16f6:	1c7b      	adds	r3, r7, #1
    16f8:	781b      	ldrb	r3, [r3, #0]
    16fa:	b29b      	uxth	r3, r3
    16fc:	69ba      	ldr	r2, [r7, #24]
    16fe:	4c1f      	ldr	r4, [pc, #124]	; (177c <drv_mxt_update_cfg+0x1a4>)
    1700:	47a0      	blx	r4
    1702:	0003      	movs	r3, r0
    1704:	60bb      	str	r3, [r7, #8]
		if(ret)
    1706:	68bb      	ldr	r3, [r7, #8]
    1708:	2b00      	cmp	r3, #0
    170a:	d001      	beq.n	1710 <drv_mxt_update_cfg+0x138>
		{
			return ret;
    170c:	68bb      	ldr	r3, [r7, #8]
    170e:	e01d      	b.n	174c <drv_mxt_update_cfg+0x174>
		}
		object_no_old = object->type;
    1710:	231f      	movs	r3, #31
    1712:	18fb      	adds	r3, r7, r3
    1714:	693a      	ldr	r2, [r7, #16]
    1716:	7812      	ldrb	r2, [r2, #0]
    1718:	701a      	strb	r2, [r3, #0]
		point += size;
    171a:	1c7b      	adds	r3, r7, #1
    171c:	781b      	ldrb	r3, [r3, #0]
    171e:	69ba      	ldr	r2, [r7, #24]
    1720:	18d3      	adds	r3, r2, r3
    1722:	61bb      	str	r3, [r7, #24]
	for(offset = 0; offset < len; )
    1724:	2316      	movs	r3, #22
    1726:	18fa      	adds	r2, r7, r3
    1728:	230e      	movs	r3, #14
    172a:	18fb      	adds	r3, r7, r3
    172c:	8812      	ldrh	r2, [r2, #0]
    172e:	881b      	ldrh	r3, [r3, #0]
    1730:	429a      	cmp	r2, r3
    1732:	d387      	bcc.n	1644 <drv_mxt_update_cfg+0x6c>
		
	}
	
	//send backup cmd
    ret = drv_mxt_send_T6_cmd(data, MXT_COMMAND_BACKUPNV, MXT_BACKUP_VALUE);
    1734:	687b      	ldr	r3, [r7, #4]
    1736:	2255      	movs	r2, #85	; 0x55
    1738:	2101      	movs	r1, #1
    173a:	0018      	movs	r0, r3
    173c:	4b10      	ldr	r3, [pc, #64]	; (1780 <drv_mxt_update_cfg+0x1a8>)
    173e:	4798      	blx	r3
    1740:	0003      	movs	r3, r0
    1742:	60bb      	str	r3, [r7, #8]
    
    //#enalbe chg interrupt
    //#wait_for_crc_update
	
	mxt_data.state = MXT_UPDATE_CFG_WAIT;
    1744:	4b04      	ldr	r3, [pc, #16]	; (1758 <drv_mxt_update_cfg+0x180>)
    1746:	2204      	movs	r2, #4
    1748:	705a      	strb	r2, [r3, #1]
    return ret;
    174a:	68bb      	ldr	r3, [r7, #8]
    
}
    174c:	0018      	movs	r0, r3
    174e:	46bd      	mov	sp, r7
    1750:	b009      	add	sp, #36	; 0x24
    1752:	bd90      	pop	{r4, r7, pc}
    1754:	00000cd8 	.word	0x00000cd8
    1758:	20000074 	.word	0x20000074
    175c:	00003454 	.word	0x00003454
    1760:	000042c8 	.word	0x000042c8
    1764:	000033f1 	.word	0x000033f1
    1768:	00003460 	.word	0x00003460
    176c:	00c70279 	.word	0x00c70279
    1770:	00003470 	.word	0x00003470
    1774:	200000cb 	.word	0x200000cb
    1778:	00001535 	.word	0x00001535
    177c:	00000a51 	.word	0x00000a51
    1780:	00001599 	.word	0x00001599

00001784 <drv_mxt_read_info>:
/*
drv_mxt_read_info
read mxt device info block
*/
int32_t drv_mxt_read_info()
{
    1784:	b590      	push	{r4, r7, lr}
    1786:	b087      	sub	sp, #28
    1788:	af00      	add	r7, sp, #0
    int32_t ret, crc_rd, crc_cal;
    uint16_t size;
	struct s_mxt_data *data = &mxt_data;
    178a:	4b45      	ldr	r3, [pc, #276]	; (18a0 <drv_mxt_read_info+0x11c>)
    178c:	617b      	str	r3, [r7, #20]
        //s_mxt_object error
        //s_mxt_oject element align error, it will cause parse object fail.
        return ERR_MXT_OBJECT_SIZE;
    }
	
    ret = drv_i2c_read(data->slave_addr, 0, mxt_block_info, 7);
    178e:	697b      	ldr	r3, [r7, #20]
    1790:	7818      	ldrb	r0, [r3, #0]
    1792:	4a44      	ldr	r2, [pc, #272]	; (18a4 <drv_mxt_read_info+0x120>)
    1794:	2307      	movs	r3, #7
    1796:	2100      	movs	r1, #0
    1798:	4c43      	ldr	r4, [pc, #268]	; (18a8 <drv_mxt_read_info+0x124>)
    179a:	47a0      	blx	r4
    179c:	0003      	movs	r3, r0
    179e:	613b      	str	r3, [r7, #16]
    if(ret)
    17a0:	693b      	ldr	r3, [r7, #16]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d001      	beq.n	17aa <drv_mxt_read_info+0x26>
    {
        return ret;
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	e075      	b.n	1896 <drv_mxt_read_info+0x112>
    }
	
    if(MXT_FAMILY_ID != mxt_block_info[0])
    17aa:	4b3e      	ldr	r3, [pc, #248]	; (18a4 <drv_mxt_read_info+0x120>)
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	2ba4      	cmp	r3, #164	; 0xa4
    17b0:	d002      	beq.n	17b8 <drv_mxt_read_info+0x34>
    {
        //it's not a mxt chip
        return ERR_MXT_DEVICE_ID;
    17b2:	2307      	movs	r3, #7
    17b4:	425b      	negs	r3, r3
    17b6:	e06e      	b.n	1896 <drv_mxt_read_info+0x112>
    }
    
    size = MXT_OBJECT_START + MXT_OBJECT_SIZE * mxt_block_info[6] + MXT_INFO_CHECKSUM_SIZE;
    17b8:	4b3a      	ldr	r3, [pc, #232]	; (18a4 <drv_mxt_read_info+0x120>)
    17ba:	799b      	ldrb	r3, [r3, #6]
    17bc:	b29b      	uxth	r3, r3
    17be:	1c1a      	adds	r2, r3, #0
    17c0:	1c13      	adds	r3, r2, #0
    17c2:	18db      	adds	r3, r3, r3
    17c4:	189b      	adds	r3, r3, r2
    17c6:	18db      	adds	r3, r3, r3
    17c8:	b29a      	uxth	r2, r3
    17ca:	230e      	movs	r3, #14
    17cc:	18fb      	adds	r3, r7, r3
    17ce:	320a      	adds	r2, #10
    17d0:	801a      	strh	r2, [r3, #0]
	if(size > MXT_BLOCK_INFO_SIZE)
    17d2:	230e      	movs	r3, #14
    17d4:	18fb      	adds	r3, r7, r3
    17d6:	881a      	ldrh	r2, [r3, #0]
    17d8:	2382      	movs	r3, #130	; 0x82
    17da:	005b      	lsls	r3, r3, #1
    17dc:	429a      	cmp	r2, r3
    17de:	d902      	bls.n	17e6 <drv_mxt_read_info+0x62>
	{
		//ram size for mxt_block_info is too small, need enlarge 
		return ERR_MXT_INFO_RAM_SIZE;
    17e0:	2301      	movs	r3, #1
    17e2:	425b      	negs	r3, r3
    17e4:	e057      	b.n	1896 <drv_mxt_read_info+0x112>
	}
    
    ret = drv_i2c_read(data->slave_addr, MXT_OBJECT_START, &mxt_block_info[MXT_OBJECT_START], size - MXT_OBJECT_START);
    17e6:	697b      	ldr	r3, [r7, #20]
    17e8:	7818      	ldrb	r0, [r3, #0]
    17ea:	230e      	movs	r3, #14
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	881b      	ldrh	r3, [r3, #0]
    17f0:	3b07      	subs	r3, #7
    17f2:	b29b      	uxth	r3, r3
    17f4:	4a2d      	ldr	r2, [pc, #180]	; (18ac <drv_mxt_read_info+0x128>)
    17f6:	2107      	movs	r1, #7
    17f8:	4c2b      	ldr	r4, [pc, #172]	; (18a8 <drv_mxt_read_info+0x124>)
    17fa:	47a0      	blx	r4
    17fc:	0003      	movs	r3, r0
    17fe:	613b      	str	r3, [r7, #16]
    if(ret)
    1800:	693b      	ldr	r3, [r7, #16]
    1802:	2b00      	cmp	r3, #0
    1804:	d001      	beq.n	180a <drv_mxt_read_info+0x86>
    {
        return ret;
    1806:	693b      	ldr	r3, [r7, #16]
    1808:	e045      	b.n	1896 <drv_mxt_read_info+0x112>
    }
    
    //crc check
    crc_rd = mxt_block_info[size - 3] | (mxt_block_info[size - 2] << 8) | (mxt_block_info[size - 1] << 16);
    180a:	230e      	movs	r3, #14
    180c:	18fb      	adds	r3, r7, r3
    180e:	881b      	ldrh	r3, [r3, #0]
    1810:	3b03      	subs	r3, #3
    1812:	4a24      	ldr	r2, [pc, #144]	; (18a4 <drv_mxt_read_info+0x120>)
    1814:	5cd3      	ldrb	r3, [r2, r3]
    1816:	0019      	movs	r1, r3
    1818:	230e      	movs	r3, #14
    181a:	18fb      	adds	r3, r7, r3
    181c:	881b      	ldrh	r3, [r3, #0]
    181e:	3b02      	subs	r3, #2
    1820:	4a20      	ldr	r2, [pc, #128]	; (18a4 <drv_mxt_read_info+0x120>)
    1822:	5cd3      	ldrb	r3, [r2, r3]
    1824:	021b      	lsls	r3, r3, #8
    1826:	000a      	movs	r2, r1
    1828:	431a      	orrs	r2, r3
    182a:	230e      	movs	r3, #14
    182c:	18fb      	adds	r3, r7, r3
    182e:	881b      	ldrh	r3, [r3, #0]
    1830:	3b01      	subs	r3, #1
    1832:	491c      	ldr	r1, [pc, #112]	; (18a4 <drv_mxt_read_info+0x120>)
    1834:	5ccb      	ldrb	r3, [r1, r3]
    1836:	041b      	lsls	r3, r3, #16
    1838:	4313      	orrs	r3, r2
    183a:	60bb      	str	r3, [r7, #8]
    crc_cal = mxt_calculate_crc(mxt_block_info, 0, size - MXT_INFO_CHECKSUM_SIZE);
    183c:	230e      	movs	r3, #14
    183e:	18fb      	adds	r3, r7, r3
    1840:	881b      	ldrh	r3, [r3, #0]
    1842:	3b03      	subs	r3, #3
    1844:	b29a      	uxth	r2, r3
    1846:	4b17      	ldr	r3, [pc, #92]	; (18a4 <drv_mxt_read_info+0x120>)
    1848:	2100      	movs	r1, #0
    184a:	0018      	movs	r0, r3
    184c:	4b18      	ldr	r3, [pc, #96]	; (18b0 <drv_mxt_read_info+0x12c>)
    184e:	4798      	blx	r3
    1850:	0003      	movs	r3, r0
    1852:	607b      	str	r3, [r7, #4]
    if(crc_cal != crc_rd)
    1854:	687a      	ldr	r2, [r7, #4]
    1856:	68bb      	ldr	r3, [r7, #8]
    1858:	429a      	cmp	r2, r3
    185a:	d002      	beq.n	1862 <drv_mxt_read_info+0xde>
    {
        //crc caculate failed.
        return ERR_MXT_CRC_MARCH;
    185c:	2306      	movs	r3, #6
    185e:	425b      	negs	r3, r3
    1860:	e019      	b.n	1896 <drv_mxt_read_info+0x112>
    }
    mxt_data.info_crc = crc_rd;
    1862:	68ba      	ldr	r2, [r7, #8]
    1864:	4b0e      	ldr	r3, [pc, #56]	; (18a0 <drv_mxt_read_info+0x11c>)
    1866:	611a      	str	r2, [r3, #16]
    memcpy(&mxt_data.mxt_info, mxt_block_info, MXT_OBJECT_START);
    1868:	4b0d      	ldr	r3, [pc, #52]	; (18a0 <drv_mxt_read_info+0x11c>)
    186a:	2202      	movs	r2, #2
    186c:	490d      	ldr	r1, [pc, #52]	; (18a4 <drv_mxt_read_info+0x120>)
    186e:	189b      	adds	r3, r3, r2
    1870:	2207      	movs	r2, #7
    1872:	0018      	movs	r0, r3
    1874:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <drv_mxt_read_info+0x130>)
    1876:	4798      	blx	r3
    
    ret = mxt_parse_object_table(mxt_block_info + MXT_OBJECT_START);
    1878:	4b0c      	ldr	r3, [pc, #48]	; (18ac <drv_mxt_read_info+0x128>)
    187a:	0018      	movs	r0, r3
    187c:	4b0e      	ldr	r3, [pc, #56]	; (18b8 <drv_mxt_read_info+0x134>)
    187e:	4798      	blx	r3
    1880:	0003      	movs	r3, r0
    1882:	613b      	str	r3, [r7, #16]
    if(ret)
    1884:	693b      	ldr	r3, [r7, #16]
    1886:	2b00      	cmp	r3, #0
    1888:	d001      	beq.n	188e <drv_mxt_read_info+0x10a>
    {
        return ret;
    188a:	693b      	ldr	r3, [r7, #16]
    188c:	e003      	b.n	1896 <drv_mxt_read_info+0x112>
    }
    mxt_data.state = MXT_START;
    188e:	4b04      	ldr	r3, [pc, #16]	; (18a0 <drv_mxt_read_info+0x11c>)
    1890:	2201      	movs	r2, #1
    1892:	705a      	strb	r2, [r3, #1]
    return 0;
    1894:	2300      	movs	r3, #0
}
    1896:	0018      	movs	r0, r3
    1898:	46bd      	mov	sp, r7
    189a:	b007      	add	sp, #28
    189c:	bd90      	pop	{r4, r7, pc}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	20000074 	.word	0x20000074
    18a4:	200000c4 	.word	0x200000c4
    18a8:	00000c01 	.word	0x00000c01
    18ac:	200000cb 	.word	0x200000cb
    18b0:	000014a1 	.word	0x000014a1
    18b4:	0000340f 	.word	0x0000340f
    18b8:	000011bd 	.word	0x000011bd

000018bc <drv_mxt_irq>:
/*
drv_mxt_irq
read msg in chg interrupt
*/
int32_t drv_mxt_irq(void)
{
    18bc:	b590      	push	{r4, r7, lr}
    18be:	b085      	sub	sp, #20
    18c0:	af00      	add	r7, sp, #0
	int32_t ret = 0;
    18c2:	2300      	movs	r3, #0
    18c4:	60fb      	str	r3, [r7, #12]
	uint8_t count = 1;
    18c6:	1dfb      	adds	r3, r7, #7
    18c8:	2201      	movs	r2, #1
    18ca:	701a      	strb	r2, [r3, #0]
	struct s_mxt_data *data = &mxt_data;
    18cc:	4b26      	ldr	r3, [pc, #152]	; (1968 <drv_mxt_irq+0xac>)
    18ce:	60bb      	str	r3, [r7, #8]
	
	if(!data->state)
    18d0:	68bb      	ldr	r3, [r7, #8]
    18d2:	785b      	ldrb	r3, [r3, #1]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d102      	bne.n	18de <drv_mxt_irq+0x22>
	{
		return ERR_MXT_BLK_INFO;
    18d8:	230a      	movs	r3, #10
    18da:	425b      	negs	r3, r3
    18dc:	e03f      	b.n	195e <drv_mxt_irq+0xa2>
	}
	if(data->T44_address)
    18de:	68bb      	ldr	r3, [r7, #8]
    18e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    18e2:	2b00      	cmp	r3, #0
    18e4:	d036      	beq.n	1954 <drv_mxt_irq+0x98>
	{
		//read T44 count
		ret = drv_i2c_read(data->slave_addr, data->T44_address, &count, 1);
    18e6:	68bb      	ldr	r3, [r7, #8]
    18e8:	7818      	ldrb	r0, [r3, #0]
    18ea:	68bb      	ldr	r3, [r7, #8]
    18ec:	8e59      	ldrh	r1, [r3, #50]	; 0x32
    18ee:	1dfa      	adds	r2, r7, #7
    18f0:	2301      	movs	r3, #1
    18f2:	4c1e      	ldr	r4, [pc, #120]	; (196c <drv_mxt_irq+0xb0>)
    18f4:	47a0      	blx	r4
    18f6:	0003      	movs	r3, r0
    18f8:	60fb      	str	r3, [r7, #12]
		if(ret)
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d001      	beq.n	1904 <drv_mxt_irq+0x48>
		{
			return ret;
    1900:	68fb      	ldr	r3, [r7, #12]
    1902:	e02c      	b.n	195e <drv_mxt_irq+0xa2>
		}
		if(count == 0)
    1904:	1dfb      	adds	r3, r7, #7
    1906:	781b      	ldrb	r3, [r3, #0]
    1908:	2b00      	cmp	r3, #0
    190a:	d123      	bne.n	1954 <drv_mxt_irq+0x98>
		{
			return ret;
    190c:	68fb      	ldr	r3, [r7, #12]
    190e:	e026      	b.n	195e <drv_mxt_irq+0xa2>
	}
	
	while(count)
	{
		//read T5
		ret = drv_i2c_read(data->slave_addr, data->T5_address, data->msg_buf, data->T5_msg_size);
    1910:	68bb      	ldr	r3, [r7, #8]
    1912:	7818      	ldrb	r0, [r3, #0]
    1914:	68bb      	ldr	r3, [r7, #8]
    1916:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    1918:	68bb      	ldr	r3, [r7, #8]
    191a:	3340      	adds	r3, #64	; 0x40
    191c:	001c      	movs	r4, r3
    191e:	68bb      	ldr	r3, [r7, #8]
    1920:	2236      	movs	r2, #54	; 0x36
    1922:	5c9b      	ldrb	r3, [r3, r2]
    1924:	b29b      	uxth	r3, r3
    1926:	0022      	movs	r2, r4
    1928:	4c10      	ldr	r4, [pc, #64]	; (196c <drv_mxt_irq+0xb0>)
    192a:	47a0      	blx	r4
    192c:	0003      	movs	r3, r0
    192e:	60fb      	str	r3, [r7, #12]
		if(ret)
    1930:	68fb      	ldr	r3, [r7, #12]
    1932:	2b00      	cmp	r3, #0
    1934:	d001      	beq.n	193a <drv_mxt_irq+0x7e>
		{
			return ret;
    1936:	68fb      	ldr	r3, [r7, #12]
    1938:	e011      	b.n	195e <drv_mxt_irq+0xa2>
		}
		ret = drv_mxt_process_msg(data->msg_buf);
    193a:	68bb      	ldr	r3, [r7, #8]
    193c:	3340      	adds	r3, #64	; 0x40
    193e:	0018      	movs	r0, r3
    1940:	4b0b      	ldr	r3, [pc, #44]	; (1970 <drv_mxt_irq+0xb4>)
    1942:	4798      	blx	r3
    1944:	0003      	movs	r3, r0
    1946:	60fb      	str	r3, [r7, #12]
		count --;
    1948:	1dfb      	adds	r3, r7, #7
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	3b01      	subs	r3, #1
    194e:	b2da      	uxtb	r2, r3
    1950:	1dfb      	adds	r3, r7, #7
    1952:	701a      	strb	r2, [r3, #0]
	while(count)
    1954:	1dfb      	adds	r3, r7, #7
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d1d9      	bne.n	1910 <drv_mxt_irq+0x54>
	}
	return 0;
    195c:	2300      	movs	r3, #0
}
    195e:	0018      	movs	r0, r3
    1960:	46bd      	mov	sp, r7
    1962:	b005      	add	sp, #20
    1964:	bd90      	pop	{r4, r7, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	20000074 	.word	0x20000074
    196c:	00000c01 	.word	0x00000c01
    1970:	00000fcd 	.word	0x00000fcd

00001974 <drv_mxt_init>:


void drv_mxt_init()
{
    1974:	b580      	push	{r7, lr}
    1976:	af00      	add	r7, sp, #0
    mxt_data.slave_addr = MXT_SLAVE_ADDRESS;
    1978:	4b04      	ldr	r3, [pc, #16]	; (198c <drv_mxt_init+0x18>)
    197a:	224a      	movs	r2, #74	; 0x4a
    197c:	701a      	strb	r2, [r3, #0]
    mxt_data.state = MXT_UNINIT;
    197e:	4b03      	ldr	r3, [pc, #12]	; (198c <drv_mxt_init+0x18>)
    1980:	2200      	movs	r2, #0
    1982:	705a      	strb	r2, [r3, #1]
}
    1984:	46c0      	nop			; (mov r8, r8)
    1986:	46bd      	mov	sp, r7
    1988:	bd80      	pop	{r7, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	20000074 	.word	0x20000074

00001990 <drv_mxt_read_state>:

uint8_t drv_mxt_read_state()
{
    1990:	b580      	push	{r7, lr}
    1992:	af00      	add	r7, sp, #0
    return mxt_data.state;
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <drv_mxt_read_state+0x10>)
    1996:	785b      	ldrb	r3, [r3, #1]
}
    1998:	0018      	movs	r0, r3
    199a:	46bd      	mov	sp, r7
    199c:	bd80      	pop	{r7, pc}
    199e:	46c0      	nop			; (mov r8, r8)
    19a0:	20000074 	.word	0x20000074

000019a4 <drv_mxt_set_state>:

void drv_mxt_set_state(uint8_t state)
{
    19a4:	b580      	push	{r7, lr}
    19a6:	b082      	sub	sp, #8
    19a8:	af00      	add	r7, sp, #0
    19aa:	0002      	movs	r2, r0
    19ac:	1dfb      	adds	r3, r7, #7
    19ae:	701a      	strb	r2, [r3, #0]
    mxt_data.state = state;
    19b0:	4b03      	ldr	r3, [pc, #12]	; (19c0 <drv_mxt_set_state+0x1c>)
    19b2:	1dfa      	adds	r2, r7, #7
    19b4:	7812      	ldrb	r2, [r2, #0]
    19b6:	705a      	strb	r2, [r3, #1]
}
    19b8:	46c0      	nop			; (mov r8, r8)
    19ba:	46bd      	mov	sp, r7
    19bc:	b002      	add	sp, #8
    19be:	bd80      	pop	{r7, pc}
    19c0:	20000074 	.word	0x20000074

000019c4 <drv_mxt_sw_reset>:

int32_t drv_mxt_sw_reset()
{
    19c4:	b580      	push	{r7, lr}
    19c6:	af00      	add	r7, sp, #0
	return drv_mxt_send_T6_cmd(&mxt_data, MXT_COMMAND_RESET, MXT_RESET_VALUE);
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <drv_mxt_sw_reset+0x18>)
    19ca:	2201      	movs	r2, #1
    19cc:	2100      	movs	r1, #0
    19ce:	0018      	movs	r0, r3
    19d0:	4b03      	ldr	r3, [pc, #12]	; (19e0 <drv_mxt_sw_reset+0x1c>)
    19d2:	4798      	blx	r3
    19d4:	0003      	movs	r3, r0
}
    19d6:	0018      	movs	r0, r3
    19d8:	46bd      	mov	sp, r7
    19da:	bd80      	pop	{r7, pc}
    19dc:	20000074 	.word	0x20000074
    19e0:	00001599 	.word	0x00001599

000019e4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b08a      	sub	sp, #40	; 0x28
    19e8:	af00      	add	r7, sp, #0
    19ea:	60f8      	str	r0, [r7, #12]
    19ec:	60b9      	str	r1, [r7, #8]
    19ee:	1dbb      	adds	r3, r7, #6
    19f0:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    19f2:	68fb      	ldr	r3, [r7, #12]
    19f4:	3b14      	subs	r3, #20
    19f6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    19f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19fa:	8b9a      	ldrh	r2, [r3, #28]
    19fc:	2314      	movs	r3, #20
    19fe:	18fb      	adds	r3, r7, r3
    1a00:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1a02:	1dbb      	adds	r3, r7, #6
    1a04:	881a      	ldrh	r2, [r3, #0]
    1a06:	2314      	movs	r3, #20
    1a08:	18fb      	adds	r3, r7, r3
    1a0a:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    1a0c:	2314      	movs	r3, #20
    1a0e:	18fb      	adds	r3, r7, r3
    1a10:	4a0c      	ldr	r2, [pc, #48]	; (1a44 <i2c_m_sync_read+0x60>)
    1a12:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
    1a14:	2314      	movs	r3, #20
    1a16:	18fb      	adds	r3, r7, r3
    1a18:	68ba      	ldr	r2, [r7, #8]
    1a1a:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a1e:	2214      	movs	r2, #20
    1a20:	18ba      	adds	r2, r7, r2
    1a22:	0011      	movs	r1, r2
    1a24:	0018      	movs	r0, r3
    1a26:	4b08      	ldr	r3, [pc, #32]	; (1a48 <i2c_m_sync_read+0x64>)
    1a28:	4798      	blx	r3
    1a2a:	0003      	movs	r3, r0
    1a2c:	623b      	str	r3, [r7, #32]

	if (ret) {
    1a2e:	6a3b      	ldr	r3, [r7, #32]
    1a30:	2b00      	cmp	r3, #0
    1a32:	d001      	beq.n	1a38 <i2c_m_sync_read+0x54>
		return ret;
    1a34:	6a3b      	ldr	r3, [r7, #32]
    1a36:	e001      	b.n	1a3c <i2c_m_sync_read+0x58>
	}

	return n;
    1a38:	1dbb      	adds	r3, r7, #6
    1a3a:	881b      	ldrh	r3, [r3, #0]
}
    1a3c:	0018      	movs	r0, r3
    1a3e:	46bd      	mov	sp, r7
    1a40:	b00a      	add	sp, #40	; 0x28
    1a42:	bd80      	pop	{r7, pc}
    1a44:	ffff8001 	.word	0xffff8001
    1a48:	00002cc5 	.word	0x00002cc5

00001a4c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b08a      	sub	sp, #40	; 0x28
    1a50:	af00      	add	r7, sp, #0
    1a52:	60f8      	str	r0, [r7, #12]
    1a54:	60b9      	str	r1, [r7, #8]
    1a56:	1dbb      	adds	r3, r7, #6
    1a58:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1a5a:	68fb      	ldr	r3, [r7, #12]
    1a5c:	3b14      	subs	r3, #20
    1a5e:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a62:	8b9a      	ldrh	r2, [r3, #28]
    1a64:	2314      	movs	r3, #20
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
    1a6a:	1dbb      	adds	r3, r7, #6
    1a6c:	881a      	ldrh	r2, [r3, #0]
    1a6e:	2314      	movs	r3, #20
    1a70:	18fb      	adds	r3, r7, r3
    1a72:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
    1a74:	2314      	movs	r3, #20
    1a76:	18fb      	adds	r3, r7, r3
    1a78:	4a0c      	ldr	r2, [pc, #48]	; (1aac <i2c_m_sync_write+0x60>)
    1a7a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
    1a7c:	2314      	movs	r3, #20
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	68ba      	ldr	r2, [r7, #8]
    1a82:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    1a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1a86:	2214      	movs	r2, #20
    1a88:	18ba      	adds	r2, r7, r2
    1a8a:	0011      	movs	r1, r2
    1a8c:	0018      	movs	r0, r3
    1a8e:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <i2c_m_sync_write+0x64>)
    1a90:	4798      	blx	r3
    1a92:	0003      	movs	r3, r0
    1a94:	623b      	str	r3, [r7, #32]

	if (ret) {
    1a96:	6a3b      	ldr	r3, [r7, #32]
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d001      	beq.n	1aa0 <i2c_m_sync_write+0x54>
		return ret;
    1a9c:	6a3b      	ldr	r3, [r7, #32]
    1a9e:	e001      	b.n	1aa4 <i2c_m_sync_write+0x58>
	}

	return n;
    1aa0:	1dbb      	adds	r3, r7, #6
    1aa2:	881b      	ldrh	r3, [r3, #0]
}
    1aa4:	0018      	movs	r0, r3
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b00a      	add	sp, #40	; 0x28
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	ffff8000 	.word	0xffff8000
    1ab0:	00002cc5 	.word	0x00002cc5

00001ab4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1ab4:	b580      	push	{r7, lr}
    1ab6:	b084      	sub	sp, #16
    1ab8:	af00      	add	r7, sp, #0
    1aba:	6078      	str	r0, [r7, #4]
    1abc:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    1abe:	687b      	ldr	r3, [r7, #4]
    1ac0:	1e5a      	subs	r2, r3, #1
    1ac2:	4193      	sbcs	r3, r2
    1ac4:	b2db      	uxtb	r3, r3
    1ac6:	490e      	ldr	r1, [pc, #56]	; (1b00 <i2c_m_sync_init+0x4c>)
    1ac8:	225e      	movs	r2, #94	; 0x5e
    1aca:	0018      	movs	r0, r3
    1acc:	4b0d      	ldr	r3, [pc, #52]	; (1b04 <i2c_m_sync_init+0x50>)
    1ace:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1ad0:	687b      	ldr	r3, [r7, #4]
    1ad2:	683a      	ldr	r2, [r7, #0]
    1ad4:	0011      	movs	r1, r2
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b0b      	ldr	r3, [pc, #44]	; (1b08 <i2c_m_sync_init+0x54>)
    1ada:	4798      	blx	r3
    1adc:	0003      	movs	r3, r0
    1ade:	60fb      	str	r3, [r7, #12]
	if (init_status) {
    1ae0:	68fb      	ldr	r3, [r7, #12]
    1ae2:	2b00      	cmp	r3, #0
    1ae4:	d001      	beq.n	1aea <i2c_m_sync_init+0x36>
		return init_status;
    1ae6:	68fb      	ldr	r3, [r7, #12]
    1ae8:	e006      	b.n	1af8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	4a07      	ldr	r2, [pc, #28]	; (1b0c <i2c_m_sync_init+0x58>)
    1aee:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    1af0:	687b      	ldr	r3, [r7, #4]
    1af2:	4a07      	ldr	r2, [pc, #28]	; (1b10 <i2c_m_sync_init+0x5c>)
    1af4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    1af6:	2300      	movs	r3, #0
}
    1af8:	0018      	movs	r0, r3
    1afa:	46bd      	mov	sp, r7
    1afc:	b004      	add	sp, #16
    1afe:	bd80      	pop	{r7, pc}
    1b00:	000042d8 	.word	0x000042d8
    1b04:	00001e5d 	.word	0x00001e5d
    1b08:	00002aa1 	.word	0x00002aa1
    1b0c:	000019e5 	.word	0x000019e5
    1b10:	00001a4d 	.word	0x00001a4d

00001b14 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	b082      	sub	sp, #8
    1b18:	af00      	add	r7, sp, #0
    1b1a:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    1b1c:	687b      	ldr	r3, [r7, #4]
    1b1e:	0018      	movs	r0, r3
    1b20:	4b03      	ldr	r3, [pc, #12]	; (1b30 <i2c_m_sync_enable+0x1c>)
    1b22:	4798      	blx	r3
    1b24:	0003      	movs	r3, r0
}
    1b26:	0018      	movs	r0, r3
    1b28:	46bd      	mov	sp, r7
    1b2a:	b002      	add	sp, #8
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	00002ae9 	.word	0x00002ae9

00001b34 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b084      	sub	sp, #16
    1b38:	af00      	add	r7, sp, #0
    1b3a:	60f8      	str	r0, [r7, #12]
    1b3c:	607a      	str	r2, [r7, #4]
    1b3e:	230a      	movs	r3, #10
    1b40:	18fb      	adds	r3, r7, r3
    1b42:	1c0a      	adds	r2, r1, #0
    1b44:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    1b46:	230a      	movs	r3, #10
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	059b      	lsls	r3, r3, #22
    1b4e:	0d9b      	lsrs	r3, r3, #22
    1b50:	b21a      	sxth	r2, r3
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	b219      	sxth	r1, r3
    1b56:	2380      	movs	r3, #128	; 0x80
    1b58:	00db      	lsls	r3, r3, #3
    1b5a:	400b      	ands	r3, r1
    1b5c:	b21b      	sxth	r3, r3
    1b5e:	4313      	orrs	r3, r2
    1b60:	b21b      	sxth	r3, r3
    1b62:	b29a      	uxth	r2, r3
    1b64:	68fb      	ldr	r3, [r7, #12]
    1b66:	839a      	strh	r2, [r3, #28]
    1b68:	68fb      	ldr	r3, [r7, #12]
    1b6a:	8b9b      	ldrh	r3, [r3, #28]
}
    1b6c:	0018      	movs	r0, r3
    1b6e:	46bd      	mov	sp, r7
    1b70:	b004      	add	sp, #16
    1b72:	bd80      	pop	{r7, pc}

00001b74 <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    1b74:	b580      	push	{r7, lr}
    1b76:	b082      	sub	sp, #8
    1b78:	af00      	add	r7, sp, #0
    1b7a:	6078      	str	r0, [r7, #4]
    1b7c:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	3314      	adds	r3, #20
    1b82:	001a      	movs	r2, r3
    1b84:	683b      	ldr	r3, [r7, #0]
    1b86:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1b88:	2300      	movs	r3, #0
}
    1b8a:	0018      	movs	r0, r3
    1b8c:	46bd      	mov	sp, r7
    1b8e:	b002      	add	sp, #8
    1b90:	bd80      	pop	{r7, pc}
	...

00001b94 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1b94:	b580      	push	{r7, lr}
    1b96:	b084      	sub	sp, #16
    1b98:	af00      	add	r7, sp, #0
    1b9a:	60f8      	str	r0, [r7, #12]
    1b9c:	60b9      	str	r1, [r7, #8]
    1b9e:	1dbb      	adds	r3, r7, #6
    1ba0:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1ba2:	68fb      	ldr	r3, [r7, #12]
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	d004      	beq.n	1bb2 <io_write+0x1e>
    1ba8:	68bb      	ldr	r3, [r7, #8]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d001      	beq.n	1bb2 <io_write+0x1e>
    1bae:	2301      	movs	r3, #1
    1bb0:	e000      	b.n	1bb4 <io_write+0x20>
    1bb2:	2300      	movs	r3, #0
    1bb4:	1c1a      	adds	r2, r3, #0
    1bb6:	2301      	movs	r3, #1
    1bb8:	4013      	ands	r3, r2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	4908      	ldr	r1, [pc, #32]	; (1be0 <io_write+0x4c>)
    1bbe:	2234      	movs	r2, #52	; 0x34
    1bc0:	0018      	movs	r0, r3
    1bc2:	4b08      	ldr	r3, [pc, #32]	; (1be4 <io_write+0x50>)
    1bc4:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1bc6:	68fb      	ldr	r3, [r7, #12]
    1bc8:	681b      	ldr	r3, [r3, #0]
    1bca:	1dba      	adds	r2, r7, #6
    1bcc:	8812      	ldrh	r2, [r2, #0]
    1bce:	68b9      	ldr	r1, [r7, #8]
    1bd0:	68f8      	ldr	r0, [r7, #12]
    1bd2:	4798      	blx	r3
    1bd4:	0003      	movs	r3, r0
}
    1bd6:	0018      	movs	r0, r3
    1bd8:	46bd      	mov	sp, r7
    1bda:	b004      	add	sp, #16
    1bdc:	bd80      	pop	{r7, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	000042f4 	.word	0x000042f4
    1be4:	00001e5d 	.word	0x00001e5d

00001be8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1be8:	b580      	push	{r7, lr}
    1bea:	b084      	sub	sp, #16
    1bec:	af00      	add	r7, sp, #0
    1bee:	60f8      	str	r0, [r7, #12]
    1bf0:	60b9      	str	r1, [r7, #8]
    1bf2:	1dbb      	adds	r3, r7, #6
    1bf4:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1bf6:	68fb      	ldr	r3, [r7, #12]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d004      	beq.n	1c06 <io_read+0x1e>
    1bfc:	68bb      	ldr	r3, [r7, #8]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d001      	beq.n	1c06 <io_read+0x1e>
    1c02:	2301      	movs	r3, #1
    1c04:	e000      	b.n	1c08 <io_read+0x20>
    1c06:	2300      	movs	r3, #0
    1c08:	1c1a      	adds	r2, r3, #0
    1c0a:	2301      	movs	r3, #1
    1c0c:	4013      	ands	r3, r2
    1c0e:	b2db      	uxtb	r3, r3
    1c10:	4908      	ldr	r1, [pc, #32]	; (1c34 <io_read+0x4c>)
    1c12:	223d      	movs	r2, #61	; 0x3d
    1c14:	0018      	movs	r0, r3
    1c16:	4b08      	ldr	r3, [pc, #32]	; (1c38 <io_read+0x50>)
    1c18:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1c1a:	68fb      	ldr	r3, [r7, #12]
    1c1c:	685b      	ldr	r3, [r3, #4]
    1c1e:	1dba      	adds	r2, r7, #6
    1c20:	8812      	ldrh	r2, [r2, #0]
    1c22:	68b9      	ldr	r1, [r7, #8]
    1c24:	68f8      	ldr	r0, [r7, #12]
    1c26:	4798      	blx	r3
    1c28:	0003      	movs	r3, r0
}
    1c2a:	0018      	movs	r0, r3
    1c2c:	46bd      	mov	sp, r7
    1c2e:	b004      	add	sp, #16
    1c30:	bd80      	pop	{r7, pc}
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	000042f4 	.word	0x000042f4
    1c38:	00001e5d 	.word	0x00001e5d

00001c3c <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
    1c42:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	681b      	ldr	r3, [r3, #0]
}
    1c48:	0018      	movs	r0, r3
    1c4a:	46bd      	mov	sp, r7
    1c4c:	b002      	add	sp, #8
    1c4e:	bd80      	pop	{r7, pc}

00001c50 <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
    1c50:	b580      	push	{r7, lr}
    1c52:	b082      	sub	sp, #8
    1c54:	af00      	add	r7, sp, #0
    1c56:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
    1c58:	687b      	ldr	r3, [r7, #4]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d002      	beq.n	1c64 <list_get_next_element+0x14>
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	681b      	ldr	r3, [r3, #0]
    1c62:	e000      	b.n	1c66 <list_get_next_element+0x16>
    1c64:	2300      	movs	r3, #0
}
    1c66:	0018      	movs	r0, r3
    1c68:	46bd      	mov	sp, r7
    1c6a:	b002      	add	sp, #8
    1c6c:	bd80      	pop	{r7, pc}
	...

00001c70 <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
    1c70:	b580      	push	{r7, lr}
    1c72:	b084      	sub	sp, #16
    1c74:	af00      	add	r7, sp, #0
    1c76:	60f8      	str	r0, [r7, #12]
    1c78:	60b9      	str	r1, [r7, #8]
    1c7a:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    1c7c:	68fb      	ldr	r3, [r7, #12]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d004      	beq.n	1c8c <timer_init+0x1c>
    1c82:	68bb      	ldr	r3, [r7, #8]
    1c84:	2b00      	cmp	r3, #0
    1c86:	d001      	beq.n	1c8c <timer_init+0x1c>
    1c88:	2301      	movs	r3, #1
    1c8a:	e000      	b.n	1c8e <timer_init+0x1e>
    1c8c:	2300      	movs	r3, #0
    1c8e:	1c1a      	adds	r2, r3, #0
    1c90:	2301      	movs	r3, #1
    1c92:	4013      	ands	r3, r2
    1c94:	b2db      	uxtb	r3, r3
    1c96:	490b      	ldr	r1, [pc, #44]	; (1cc4 <timer_init+0x54>)
    1c98:	223b      	movs	r2, #59	; 0x3b
    1c9a:	0018      	movs	r0, r3
    1c9c:	4b0a      	ldr	r3, [pc, #40]	; (1cc8 <timer_init+0x58>)
    1c9e:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	68ba      	ldr	r2, [r7, #8]
    1ca4:	0011      	movs	r1, r2
    1ca6:	0018      	movs	r0, r3
    1ca8:	4b08      	ldr	r3, [pc, #32]	; (1ccc <timer_init+0x5c>)
    1caa:	4798      	blx	r3
	descr->time                           = 0;
    1cac:	68fb      	ldr	r3, [r7, #12]
    1cae:	2200      	movs	r2, #0
    1cb0:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	4a06      	ldr	r2, [pc, #24]	; (1cd0 <timer_init+0x60>)
    1cb6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    1cb8:	2300      	movs	r3, #0
}
    1cba:	0018      	movs	r0, r3
    1cbc:	46bd      	mov	sp, r7
    1cbe:	b004      	add	sp, #16
    1cc0:	bd80      	pop	{r7, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	00004308 	.word	0x00004308
    1cc8:	00001e5d 	.word	0x00001e5d
    1ccc:	0000224d 	.word	0x0000224d
    1cd0:	00001d99 	.word	0x00001d99

00001cd4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1cd4:	b580      	push	{r7, lr}
    1cd6:	b088      	sub	sp, #32
    1cd8:	af00      	add	r7, sp, #0
    1cda:	60f8      	str	r0, [r7, #12]
    1cdc:	60b9      	str	r1, [r7, #8]
    1cde:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
    1ce0:	2300      	movs	r3, #0
    1ce2:	61bb      	str	r3, [r7, #24]
    1ce4:	68fb      	ldr	r3, [r7, #12]
    1ce6:	0018      	movs	r0, r3
    1ce8:	4b27      	ldr	r3, [pc, #156]	; (1d88 <timer_add_timer_task+0xb4>)
    1cea:	4798      	blx	r3
    1cec:	0003      	movs	r3, r0
    1cee:	613b      	str	r3, [r7, #16]

	if (!head) {
    1cf0:	693b      	ldr	r3, [r7, #16]
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	d106      	bne.n	1d04 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
    1cf6:	68ba      	ldr	r2, [r7, #8]
    1cf8:	68fb      	ldr	r3, [r7, #12]
    1cfa:	0011      	movs	r1, r2
    1cfc:	0018      	movs	r0, r3
    1cfe:	4b23      	ldr	r3, [pc, #140]	; (1d8c <timer_add_timer_task+0xb8>)
    1d00:	4798      	blx	r3
		return;
    1d02:	e03d      	b.n	1d80 <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1d04:	693b      	ldr	r3, [r7, #16]
    1d06:	61fb      	str	r3, [r7, #28]
    1d08:	e024      	b.n	1d54 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
    1d0a:	69fb      	ldr	r3, [r7, #28]
    1d0c:	685a      	ldr	r2, [r3, #4]
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	429a      	cmp	r2, r3
    1d12:	d808      	bhi.n	1d26 <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
    1d14:	69fb      	ldr	r3, [r7, #28]
    1d16:	689a      	ldr	r2, [r3, #8]
    1d18:	69fb      	ldr	r3, [r7, #28]
    1d1a:	6859      	ldr	r1, [r3, #4]
    1d1c:	687b      	ldr	r3, [r7, #4]
    1d1e:	1acb      	subs	r3, r1, r3
    1d20:	18d3      	adds	r3, r2, r3
    1d22:	617b      	str	r3, [r7, #20]
    1d24:	e009      	b.n	1d3a <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1d26:	69fb      	ldr	r3, [r7, #28]
    1d28:	689a      	ldr	r2, [r3, #8]
    1d2a:	69fb      	ldr	r3, [r7, #28]
    1d2c:	685b      	ldr	r3, [r3, #4]
    1d2e:	18d2      	adds	r2, r2, r3
    1d30:	687b      	ldr	r3, [r7, #4]
    1d32:	425b      	negs	r3, r3
    1d34:	18d3      	adds	r3, r2, r3
    1d36:	3301      	adds	r3, #1
    1d38:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
    1d3a:	68bb      	ldr	r3, [r7, #8]
    1d3c:	689a      	ldr	r2, [r3, #8]
    1d3e:	697b      	ldr	r3, [r7, #20]
    1d40:	429a      	cmp	r2, r3
    1d42:	d90b      	bls.n	1d5c <timer_add_timer_task+0x88>
			break;
		prev = it;
    1d44:	69fb      	ldr	r3, [r7, #28]
    1d46:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1d48:	69fb      	ldr	r3, [r7, #28]
    1d4a:	0018      	movs	r0, r3
    1d4c:	4b10      	ldr	r3, [pc, #64]	; (1d90 <timer_add_timer_task+0xbc>)
    1d4e:	4798      	blx	r3
    1d50:	0003      	movs	r3, r0
    1d52:	61fb      	str	r3, [r7, #28]
    1d54:	69fb      	ldr	r3, [r7, #28]
    1d56:	2b00      	cmp	r3, #0
    1d58:	d1d7      	bne.n	1d0a <timer_add_timer_task+0x36>
    1d5a:	e000      	b.n	1d5e <timer_add_timer_task+0x8a>
			break;
    1d5c:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
    1d5e:	69fa      	ldr	r2, [r7, #28]
    1d60:	693b      	ldr	r3, [r7, #16]
    1d62:	429a      	cmp	r2, r3
    1d64:	d106      	bne.n	1d74 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
    1d66:	68ba      	ldr	r2, [r7, #8]
    1d68:	68fb      	ldr	r3, [r7, #12]
    1d6a:	0011      	movs	r1, r2
    1d6c:	0018      	movs	r0, r3
    1d6e:	4b07      	ldr	r3, [pc, #28]	; (1d8c <timer_add_timer_task+0xb8>)
    1d70:	4798      	blx	r3
    1d72:	e005      	b.n	1d80 <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
    1d74:	68ba      	ldr	r2, [r7, #8]
    1d76:	69bb      	ldr	r3, [r7, #24]
    1d78:	0011      	movs	r1, r2
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b05      	ldr	r3, [pc, #20]	; (1d94 <timer_add_timer_task+0xc0>)
    1d7e:	4798      	blx	r3
	}
}
    1d80:	46bd      	mov	sp, r7
    1d82:	b008      	add	sp, #32
    1d84:	bd80      	pop	{r7, pc}
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	00001c3d 	.word	0x00001c3d
    1d8c:	00001ebd 	.word	0x00001ebd
    1d90:	00001c51 	.word	0x00001c51
    1d94:	00001f15 	.word	0x00001f15

00001d98 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b086      	sub	sp, #24
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
    1da4:	693b      	ldr	r3, [r7, #16]
    1da6:	3314      	adds	r3, #20
    1da8:	0018      	movs	r0, r3
    1daa:	4b29      	ldr	r3, [pc, #164]	; (1e50 <timer_process_counted+0xb8>)
    1dac:	4798      	blx	r3
    1dae:	0003      	movs	r3, r0
    1db0:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
    1db2:	693b      	ldr	r3, [r7, #16]
    1db4:	691b      	ldr	r3, [r3, #16]
    1db6:	1c5a      	adds	r2, r3, #1
    1db8:	693b      	ldr	r3, [r7, #16]
    1dba:	611a      	str	r2, [r3, #16]
    1dbc:	693b      	ldr	r3, [r7, #16]
    1dbe:	691b      	ldr	r3, [r3, #16]
    1dc0:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1dc2:	693b      	ldr	r3, [r7, #16]
    1dc4:	7e1b      	ldrb	r3, [r3, #24]
    1dc6:	b2db      	uxtb	r3, r3
    1dc8:	001a      	movs	r2, r3
    1dca:	2301      	movs	r3, #1
    1dcc:	4013      	ands	r3, r2
    1dce:	d106      	bne.n	1dde <timer_process_counted+0x46>
    1dd0:	693b      	ldr	r3, [r7, #16]
    1dd2:	7e1b      	ldrb	r3, [r3, #24]
    1dd4:	b2db      	uxtb	r3, r3
    1dd6:	001a      	movs	r2, r3
    1dd8:	2302      	movs	r3, #2
    1dda:	4013      	ands	r3, r2
    1ddc:	d029      	beq.n	1e32 <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1dde:	693b      	ldr	r3, [r7, #16]
    1de0:	7e1b      	ldrb	r3, [r3, #24]
    1de2:	b2db      	uxtb	r3, r3
    1de4:	2202      	movs	r2, #2
    1de6:	4313      	orrs	r3, r2
    1de8:	b2da      	uxtb	r2, r3
    1dea:	693b      	ldr	r3, [r7, #16]
    1dec:	761a      	strb	r2, [r3, #24]
		return;
    1dee:	e02b      	b.n	1e48 <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
    1df0:	697b      	ldr	r3, [r7, #20]
    1df2:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
    1df4:	693b      	ldr	r3, [r7, #16]
    1df6:	3314      	adds	r3, #20
    1df8:	0018      	movs	r0, r3
    1dfa:	4b16      	ldr	r3, [pc, #88]	; (1e54 <timer_process_counted+0xbc>)
    1dfc:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1dfe:	68bb      	ldr	r3, [r7, #8]
    1e00:	7c1b      	ldrb	r3, [r3, #16]
    1e02:	2b01      	cmp	r3, #1
    1e04:	d109      	bne.n	1e1a <timer_process_counted+0x82>
			tmp->time_label = time;
    1e06:	68bb      	ldr	r3, [r7, #8]
    1e08:	68fa      	ldr	r2, [r7, #12]
    1e0a:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1e0c:	693b      	ldr	r3, [r7, #16]
    1e0e:	3314      	adds	r3, #20
    1e10:	68fa      	ldr	r2, [r7, #12]
    1e12:	68b9      	ldr	r1, [r7, #8]
    1e14:	0018      	movs	r0, r3
    1e16:	4b10      	ldr	r3, [pc, #64]	; (1e58 <timer_process_counted+0xc0>)
    1e18:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1e1a:	693b      	ldr	r3, [r7, #16]
    1e1c:	3314      	adds	r3, #20
    1e1e:	0018      	movs	r0, r3
    1e20:	4b0b      	ldr	r3, [pc, #44]	; (1e50 <timer_process_counted+0xb8>)
    1e22:	4798      	blx	r3
    1e24:	0003      	movs	r3, r0
    1e26:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
    1e28:	68bb      	ldr	r3, [r7, #8]
    1e2a:	68db      	ldr	r3, [r3, #12]
    1e2c:	68ba      	ldr	r2, [r7, #8]
    1e2e:	0010      	movs	r0, r2
    1e30:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1e32:	697b      	ldr	r3, [r7, #20]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d007      	beq.n	1e48 <timer_process_counted+0xb0>
    1e38:	697b      	ldr	r3, [r7, #20]
    1e3a:	685b      	ldr	r3, [r3, #4]
    1e3c:	68fa      	ldr	r2, [r7, #12]
    1e3e:	1ad2      	subs	r2, r2, r3
    1e40:	697b      	ldr	r3, [r7, #20]
    1e42:	689b      	ldr	r3, [r3, #8]
    1e44:	429a      	cmp	r2, r3
    1e46:	d2d3      	bcs.n	1df0 <timer_process_counted+0x58>
	}
}
    1e48:	46bd      	mov	sp, r7
    1e4a:	b006      	add	sp, #24
    1e4c:	bd80      	pop	{r7, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	00001c3d 	.word	0x00001c3d
    1e54:	00001f35 	.word	0x00001f35
    1e58:	00001cd5 	.word	0x00001cd5

00001e5c <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b084      	sub	sp, #16
    1e60:	af00      	add	r7, sp, #0
    1e62:	60b9      	str	r1, [r7, #8]
    1e64:	607a      	str	r2, [r7, #4]
    1e66:	230f      	movs	r3, #15
    1e68:	18fb      	adds	r3, r7, r3
    1e6a:	1c02      	adds	r2, r0, #0
    1e6c:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1e6e:	230f      	movs	r3, #15
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	2201      	movs	r2, #1
    1e76:	4053      	eors	r3, r2
    1e78:	b2db      	uxtb	r3, r3
    1e7a:	2b00      	cmp	r3, #0
    1e7c:	d000      	beq.n	1e80 <assert+0x24>
		__asm("BKPT #0");
    1e7e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	46bd      	mov	sp, r7
    1e84:	b004      	add	sp, #16
    1e86:	bd80      	pop	{r7, pc}

00001e88 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
    1e88:	b580      	push	{r7, lr}
    1e8a:	b084      	sub	sp, #16
    1e8c:	af00      	add	r7, sp, #0
    1e8e:	6078      	str	r0, [r7, #4]
    1e90:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	60fb      	str	r3, [r7, #12]
    1e98:	e008      	b.n	1eac <is_list_element+0x24>
		if (it == element) {
    1e9a:	68fa      	ldr	r2, [r7, #12]
    1e9c:	683b      	ldr	r3, [r7, #0]
    1e9e:	429a      	cmp	r2, r3
    1ea0:	d101      	bne.n	1ea6 <is_list_element+0x1e>
			return true;
    1ea2:	2301      	movs	r3, #1
    1ea4:	e006      	b.n	1eb4 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
    1ea6:	68fb      	ldr	r3, [r7, #12]
    1ea8:	681b      	ldr	r3, [r3, #0]
    1eaa:	60fb      	str	r3, [r7, #12]
    1eac:	68fb      	ldr	r3, [r7, #12]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d1f3      	bne.n	1e9a <is_list_element+0x12>
		}
	}

	return false;
    1eb2:	2300      	movs	r3, #0
}
    1eb4:	0018      	movs	r0, r3
    1eb6:	46bd      	mov	sp, r7
    1eb8:	b004      	add	sp, #16
    1eba:	bd80      	pop	{r7, pc}

00001ebc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	6078      	str	r0, [r7, #4]
    1ec4:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
    1ec6:	683a      	ldr	r2, [r7, #0]
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	0011      	movs	r1, r2
    1ecc:	0018      	movs	r0, r3
    1ece:	4b0e      	ldr	r3, [pc, #56]	; (1f08 <list_insert_as_head+0x4c>)
    1ed0:	4798      	blx	r3
    1ed2:	0003      	movs	r3, r0
    1ed4:	1e5a      	subs	r2, r3, #1
    1ed6:	4193      	sbcs	r3, r2
    1ed8:	b2db      	uxtb	r3, r3
    1eda:	2201      	movs	r2, #1
    1edc:	4053      	eors	r3, r2
    1ede:	b2db      	uxtb	r3, r3
    1ee0:	1c1a      	adds	r2, r3, #0
    1ee2:	2301      	movs	r3, #1
    1ee4:	4013      	ands	r3, r2
    1ee6:	b2db      	uxtb	r3, r3
    1ee8:	4908      	ldr	r1, [pc, #32]	; (1f0c <list_insert_as_head+0x50>)
    1eea:	2239      	movs	r2, #57	; 0x39
    1eec:	0018      	movs	r0, r3
    1eee:	4b08      	ldr	r3, [pc, #32]	; (1f10 <list_insert_as_head+0x54>)
    1ef0:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	681a      	ldr	r2, [r3, #0]
    1ef6:	683b      	ldr	r3, [r7, #0]
    1ef8:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
    1efa:	687b      	ldr	r3, [r7, #4]
    1efc:	683a      	ldr	r2, [r7, #0]
    1efe:	601a      	str	r2, [r3, #0]
}
    1f00:	46c0      	nop			; (mov r8, r8)
    1f02:	46bd      	mov	sp, r7
    1f04:	b002      	add	sp, #8
    1f06:	bd80      	pop	{r7, pc}
    1f08:	00001e89 	.word	0x00001e89
    1f0c:	00004320 	.word	0x00004320
    1f10:	00001e5d 	.word	0x00001e5d

00001f14 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b082      	sub	sp, #8
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
    1f1c:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	681a      	ldr	r2, [r3, #0]
    1f22:	683b      	ldr	r3, [r7, #0]
    1f24:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	683a      	ldr	r2, [r7, #0]
    1f2a:	601a      	str	r2, [r3, #0]
}
    1f2c:	46c0      	nop			; (mov r8, r8)
    1f2e:	46bd      	mov	sp, r7
    1f30:	b002      	add	sp, #8
    1f32:	bd80      	pop	{r7, pc}

00001f34 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
    1f34:	b580      	push	{r7, lr}
    1f36:	b084      	sub	sp, #16
    1f38:	af00      	add	r7, sp, #0
    1f3a:	6078      	str	r0, [r7, #4]
	if (list->head) {
    1f3c:	687b      	ldr	r3, [r7, #4]
    1f3e:	681b      	ldr	r3, [r3, #0]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d009      	beq.n	1f58 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	681b      	ldr	r3, [r3, #0]
    1f48:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
    1f4a:	687b      	ldr	r3, [r7, #4]
    1f4c:	681b      	ldr	r3, [r3, #0]
    1f4e:	681a      	ldr	r2, [r3, #0]
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
    1f54:	68fb      	ldr	r3, [r7, #12]
    1f56:	e000      	b.n	1f5a <list_remove_head+0x26>
	}

	return NULL;
    1f58:	2300      	movs	r3, #0
}
    1f5a:	0018      	movs	r0, r3
    1f5c:	46bd      	mov	sp, r7
    1f5e:	b004      	add	sp, #16
    1f60:	bd80      	pop	{r7, pc}

00001f62 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    1f62:	b580      	push	{r7, lr}
    1f64:	b082      	sub	sp, #8
    1f66:	af00      	add	r7, sp, #0
    1f68:	6078      	str	r0, [r7, #4]
    1f6a:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	685a      	ldr	r2, [r3, #4]
    1f70:	683b      	ldr	r3, [r7, #0]
    1f72:	005b      	lsls	r3, r3, #1
    1f74:	211e      	movs	r1, #30
    1f76:	400b      	ands	r3, r1
    1f78:	431a      	orrs	r2, r3
    1f7a:	687b      	ldr	r3, [r7, #4]
    1f7c:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	46bd      	mov	sp, r7
    1f82:	b002      	add	sp, #8
    1f84:	bd80      	pop	{r7, pc}
	...

00001f88 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1f8c:	4b08      	ldr	r3, [pc, #32]	; (1fb0 <_init_chip+0x28>)
    1f8e:	2100      	movs	r1, #0
    1f90:	0018      	movs	r0, r3
    1f92:	4b08      	ldr	r3, [pc, #32]	; (1fb4 <_init_chip+0x2c>)
    1f94:	4798      	blx	r3

	_pm_init();
    1f96:	4b08      	ldr	r3, [pc, #32]	; (1fb8 <_init_chip+0x30>)
    1f98:	4798      	blx	r3
	_sysctrl_init_sources();
    1f9a:	4b08      	ldr	r3, [pc, #32]	; (1fbc <_init_chip+0x34>)
    1f9c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
    1f9e:	4b08      	ldr	r3, [pc, #32]	; (1fc0 <_init_chip+0x38>)
    1fa0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1fa2:	20ff      	movs	r0, #255	; 0xff
    1fa4:	4b07      	ldr	r3, [pc, #28]	; (1fc4 <_init_chip+0x3c>)
    1fa6:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
    1fa8:	46c0      	nop			; (mov r8, r8)
    1faa:	46bd      	mov	sp, r7
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	41004000 	.word	0x41004000
    1fb4:	00001f63 	.word	0x00001f63
    1fb8:	00002121 	.word	0x00002121
    1fbc:	00003121 	.word	0x00003121
    1fc0:	000031e1 	.word	0x000031e1
    1fc4:	00002025 	.word	0x00002025

00001fc8 <hri_gclk_wait_for_sync>:
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b082      	sub	sp, #8
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
    1fd0:	46c0      	nop			; (mov r8, r8)
    1fd2:	687b      	ldr	r3, [r7, #4]
    1fd4:	785b      	ldrb	r3, [r3, #1]
    1fd6:	061b      	lsls	r3, r3, #24
    1fd8:	0fdb      	lsrs	r3, r3, #31
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d1f8      	bne.n	1fd2 <hri_gclk_wait_for_sync+0xa>
}
    1fe0:	46c0      	nop			; (mov r8, r8)
    1fe2:	46bd      	mov	sp, r7
    1fe4:	b002      	add	sp, #8
    1fe6:	bd80      	pop	{r7, pc}

00001fe8 <hri_gclk_write_GENCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, hri_gclk_genctrl_reg_t data)
{
    1fe8:	b580      	push	{r7, lr}
    1fea:	b082      	sub	sp, #8
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
    1ff0:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL.reg = data;
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	683a      	ldr	r2, [r7, #0]
    1ff6:	605a      	str	r2, [r3, #4]
	hri_gclk_wait_for_sync(hw);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b02      	ldr	r3, [pc, #8]	; (2008 <STACK_SIZE+0x8>)
    1ffe:	4798      	blx	r3
	GCLK_CRITICAL_SECTION_LEAVE();
}
    2000:	46c0      	nop			; (mov r8, r8)
    2002:	46bd      	mov	sp, r7
    2004:	b002      	add	sp, #8
    2006:	bd80      	pop	{r7, pc}
    2008:	00001fc9 	.word	0x00001fc9

0000200c <hri_gclk_write_GENDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
    200c:	b580      	push	{r7, lr}
    200e:	b082      	sub	sp, #8
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	6039      	str	r1, [r7, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
    2016:	687b      	ldr	r3, [r7, #4]
    2018:	683a      	ldr	r2, [r7, #0]
    201a:	609a      	str	r2, [r3, #8]
	GCLK_CRITICAL_SECTION_LEAVE();
}
    201c:	46c0      	nop			; (mov r8, r8)
    201e:	46bd      	mov	sp, r7
    2020:	b002      	add	sp, #8
    2022:	bd80      	pop	{r7, pc}

00002024 <_gclk_init_generators_by_fref>:
	        | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2024:	b580      	push	{r7, lr}
    2026:	b082      	sub	sp, #8
    2028:	af00      	add	r7, sp, #0
    202a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    202c:	687b      	ldr	r3, [r7, #4]
    202e:	2201      	movs	r2, #1
    2030:	4013      	ands	r3, r2
    2032:	d00c      	beq.n	204e <_gclk_init_generators_by_fref+0x2a>
		hri_gclk_write_GENDIV_reg(GCLK, GCLK_GENDIV_DIV(CONF_GCLK_GEN_0_DIV) | GCLK_GENDIV_ID(0));
    2034:	2380      	movs	r3, #128	; 0x80
    2036:	005b      	lsls	r3, r3, #1
    2038:	4a07      	ldr	r2, [pc, #28]	; (2058 <_gclk_init_generators_by_fref+0x34>)
    203a:	0019      	movs	r1, r3
    203c:	0010      	movs	r0, r2
    203e:	4b07      	ldr	r3, [pc, #28]	; (205c <_gclk_init_generators_by_fref+0x38>)
    2040:	4798      	blx	r3
		hri_gclk_write_GENCTRL_reg(
    2042:	4a07      	ldr	r2, [pc, #28]	; (2060 <_gclk_init_generators_by_fref+0x3c>)
    2044:	4b04      	ldr	r3, [pc, #16]	; (2058 <_gclk_init_generators_by_fref+0x34>)
    2046:	0011      	movs	r1, r2
    2048:	0018      	movs	r0, r3
    204a:	4b06      	ldr	r3, [pc, #24]	; (2064 <_gclk_init_generators_by_fref+0x40>)
    204c:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	46bd      	mov	sp, r7
    2052:	b002      	add	sp, #8
    2054:	bd80      	pop	{r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	40000c00 	.word	0x40000c00
    205c:	0000200d 	.word	0x0000200d
    2060:	00010700 	.word	0x00010700
    2064:	00001fe9 	.word	0x00001fe9

00002068 <hri_pm_set_CPUSEL_CPUDIV_bf>:
{
	return ((Pm *)hw)->SLEEP.reg;
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
    2068:	b580      	push	{r7, lr}
    206a:	b082      	sub	sp, #8
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	000a      	movs	r2, r1
    2072:	1cfb      	adds	r3, r7, #3
    2074:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	7a1b      	ldrb	r3, [r3, #8]
    207a:	b2da      	uxtb	r2, r3
    207c:	1cfb      	adds	r3, r7, #3
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	2107      	movs	r1, #7
    2082:	400b      	ands	r3, r1
    2084:	b2db      	uxtb	r3, r3
    2086:	4313      	orrs	r3, r2
    2088:	b2da      	uxtb	r2, r3
    208a:	687b      	ldr	r3, [r7, #4]
    208c:	721a      	strb	r2, [r3, #8]
	PM_CRITICAL_SECTION_LEAVE();
}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	46bd      	mov	sp, r7
    2092:	b002      	add	sp, #8
    2094:	bd80      	pop	{r7, pc}

00002096 <hri_pm_set_APBASEL_APBADIV_bf>:
{
	return ((Pm *)hw)->CPUSEL.reg;
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
    2096:	b580      	push	{r7, lr}
    2098:	b082      	sub	sp, #8
    209a:	af00      	add	r7, sp, #0
    209c:	6078      	str	r0, [r7, #4]
    209e:	000a      	movs	r2, r1
    20a0:	1cfb      	adds	r3, r7, #3
    20a2:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
    20a4:	687b      	ldr	r3, [r7, #4]
    20a6:	7a5b      	ldrb	r3, [r3, #9]
    20a8:	b2da      	uxtb	r2, r3
    20aa:	1cfb      	adds	r3, r7, #3
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	2107      	movs	r1, #7
    20b0:	400b      	ands	r3, r1
    20b2:	b2db      	uxtb	r3, r3
    20b4:	4313      	orrs	r3, r2
    20b6:	b2da      	uxtb	r2, r3
    20b8:	687b      	ldr	r3, [r7, #4]
    20ba:	725a      	strb	r2, [r3, #9]
	PM_CRITICAL_SECTION_LEAVE();
}
    20bc:	46c0      	nop			; (mov r8, r8)
    20be:	46bd      	mov	sp, r7
    20c0:	b002      	add	sp, #8
    20c2:	bd80      	pop	{r7, pc}

000020c4 <hri_pm_set_APBBSEL_APBBDIV_bf>:
{
	return ((Pm *)hw)->APBASEL.reg;
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
    20c4:	b580      	push	{r7, lr}
    20c6:	b082      	sub	sp, #8
    20c8:	af00      	add	r7, sp, #0
    20ca:	6078      	str	r0, [r7, #4]
    20cc:	000a      	movs	r2, r1
    20ce:	1cfb      	adds	r3, r7, #3
    20d0:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	7a9b      	ldrb	r3, [r3, #10]
    20d6:	b2da      	uxtb	r2, r3
    20d8:	1cfb      	adds	r3, r7, #3
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	2107      	movs	r1, #7
    20de:	400b      	ands	r3, r1
    20e0:	b2db      	uxtb	r3, r3
    20e2:	4313      	orrs	r3, r2
    20e4:	b2da      	uxtb	r2, r3
    20e6:	687b      	ldr	r3, [r7, #4]
    20e8:	729a      	strb	r2, [r3, #10]
	PM_CRITICAL_SECTION_LEAVE();
}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	46bd      	mov	sp, r7
    20ee:	b002      	add	sp, #8
    20f0:	bd80      	pop	{r7, pc}

000020f2 <hri_pm_set_APBCSEL_APBCDIV_bf>:
{
	return ((Pm *)hw)->APBBSEL.reg;
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
    20f2:	b580      	push	{r7, lr}
    20f4:	b082      	sub	sp, #8
    20f6:	af00      	add	r7, sp, #0
    20f8:	6078      	str	r0, [r7, #4]
    20fa:	000a      	movs	r2, r1
    20fc:	1cfb      	adds	r3, r7, #3
    20fe:	701a      	strb	r2, [r3, #0]
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
    2100:	687b      	ldr	r3, [r7, #4]
    2102:	7adb      	ldrb	r3, [r3, #11]
    2104:	b2da      	uxtb	r2, r3
    2106:	1cfb      	adds	r3, r7, #3
    2108:	781b      	ldrb	r3, [r3, #0]
    210a:	2107      	movs	r1, #7
    210c:	400b      	ands	r3, r1
    210e:	b2db      	uxtb	r3, r3
    2110:	4313      	orrs	r3, r2
    2112:	b2da      	uxtb	r2, r3
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	72da      	strb	r2, [r3, #11]
	PM_CRITICAL_SECTION_LEAVE();
}
    2118:	46c0      	nop			; (mov r8, r8)
    211a:	46bd      	mov	sp, r7
    211c:	b002      	add	sp, #8
    211e:	bd80      	pop	{r7, pc}

00002120 <_pm_init>:

/**
 * \brief Power Manager Init
 */
void _pm_init(void)
{
    2120:	b580      	push	{r7, lr}
    2122:	af00      	add	r7, sp, #0
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
    2124:	4b0b      	ldr	r3, [pc, #44]	; (2154 <_pm_init+0x34>)
    2126:	2100      	movs	r1, #0
    2128:	0018      	movs	r0, r3
    212a:	4b0b      	ldr	r3, [pc, #44]	; (2158 <_pm_init+0x38>)
    212c:	4798      	blx	r3
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
    212e:	4b09      	ldr	r3, [pc, #36]	; (2154 <_pm_init+0x34>)
    2130:	2100      	movs	r1, #0
    2132:	0018      	movs	r0, r3
    2134:	4b09      	ldr	r3, [pc, #36]	; (215c <_pm_init+0x3c>)
    2136:	4798      	blx	r3
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
    2138:	4b06      	ldr	r3, [pc, #24]	; (2154 <_pm_init+0x34>)
    213a:	2100      	movs	r1, #0
    213c:	0018      	movs	r0, r3
    213e:	4b08      	ldr	r3, [pc, #32]	; (2160 <_pm_init+0x40>)
    2140:	4798      	blx	r3
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
    2142:	4b04      	ldr	r3, [pc, #16]	; (2154 <_pm_init+0x34>)
    2144:	2100      	movs	r1, #0
    2146:	0018      	movs	r0, r3
    2148:	4b06      	ldr	r3, [pc, #24]	; (2164 <_pm_init+0x44>)
    214a:	4798      	blx	r3
}
    214c:	46c0      	nop			; (mov r8, r8)
    214e:	46bd      	mov	sp, r7
    2150:	bd80      	pop	{r7, pc}
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	40000400 	.word	0x40000400
    2158:	00002069 	.word	0x00002069
    215c:	00002097 	.word	0x00002097
    2160:	000020c5 	.word	0x000020c5
    2164:	000020f3 	.word	0x000020f3

00002168 <hri_rtc_wait_for_sync>:
typedef uint8_t  hri_rtcmode2_intenset_reg_t;
typedef uint8_t  hri_rtcmode2_intflag_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtc_wait_for_sync(const void *const hw)
{
    2168:	b580      	push	{r7, lr}
    216a:	b082      	sub	sp, #8
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
    2170:	46c0      	nop			; (mov r8, r8)
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	7a9b      	ldrb	r3, [r3, #10]
    2176:	061b      	lsls	r3, r3, #24
    2178:	0fdb      	lsrs	r3, r3, #31
    217a:	b2db      	uxtb	r3, r3
    217c:	2b00      	cmp	r3, #0
    217e:	d1f8      	bne.n	2172 <hri_rtc_wait_for_sync+0xa>
		;
}
    2180:	46c0      	nop			; (mov r8, r8)
    2182:	46bd      	mov	sp, r7
    2184:	b002      	add	sp, #8
    2186:	bd80      	pop	{r7, pc}

00002188 <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2201      	movs	r2, #1
    2194:	721a      	strb	r2, [r3, #8]
}
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	46bd      	mov	sp, r7
    219a:	b002      	add	sp, #8
    219c:	bd80      	pop	{r7, pc}

0000219e <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    219e:	b580      	push	{r7, lr}
    21a0:	b082      	sub	sp, #8
    21a2:	af00      	add	r7, sp, #0
    21a4:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	7a1b      	ldrb	r3, [r3, #8]
    21aa:	b2db      	uxtb	r3, r3
}
    21ac:	0018      	movs	r0, r3
    21ae:	46bd      	mov	sp, r7
    21b0:	b002      	add	sp, #8
    21b2:	bd80      	pop	{r7, pc}

000021b4 <hri_rtcmode0_set_INTEN_CMP0_bit>:
{
	((Rtc *)hw)->MODE2.INTFLAG.reg = mask;
}

static inline void hri_rtcmode0_set_INTEN_CMP0_bit(const void *const hw)
{
    21b4:	b580      	push	{r7, lr}
    21b6:	b082      	sub	sp, #8
    21b8:	af00      	add	r7, sp, #0
    21ba:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2201      	movs	r2, #1
    21c0:	71da      	strb	r2, [r3, #7]
}
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	46bd      	mov	sp, r7
    21c6:	b002      	add	sp, #8
    21c8:	bd80      	pop	{r7, pc}
	...

000021cc <hri_rtcmode0_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
    21cc:	b580      	push	{r7, lr}
    21ce:	b082      	sub	sp, #8
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
    21d4:	000a      	movs	r2, r1
    21d6:	1cbb      	adds	r3, r7, #2
    21d8:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	1cba      	adds	r2, r7, #2
    21de:	8812      	ldrh	r2, [r2, #0]
    21e0:	801a      	strh	r2, [r3, #0]
	hri_rtc_wait_for_sync(hw);
    21e2:	687b      	ldr	r3, [r7, #4]
    21e4:	0018      	movs	r0, r3
    21e6:	4b03      	ldr	r3, [pc, #12]	; (21f4 <hri_rtcmode0_write_CTRL_reg+0x28>)
    21e8:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	46bd      	mov	sp, r7
    21ee:	b002      	add	sp, #8
    21f0:	bd80      	pop	{r7, pc}
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	00002169 	.word	0x00002169

000021f8 <hri_rtcmode0_write_COMP_COMP_bf>:
	tmp = (tmp & RTC_MODE0_COMP_COMP(mask)) >> RTC_MODE0_COMP_COMP_Pos;
	return tmp;
}

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
    21f8:	b580      	push	{r7, lr}
    21fa:	b086      	sub	sp, #24
    21fc:	af00      	add	r7, sp, #0
    21fe:	60f8      	str	r0, [r7, #12]
    2200:	607a      	str	r2, [r7, #4]
    2202:	230b      	movs	r3, #11
    2204:	18fb      	adds	r3, r7, r3
    2206:	1c0a      	adds	r2, r1, #0
    2208:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
    220a:	230b      	movs	r3, #11
    220c:	18fb      	adds	r3, r7, r3
    220e:	781a      	ldrb	r2, [r3, #0]
    2210:	68fb      	ldr	r3, [r7, #12]
    2212:	3206      	adds	r2, #6
    2214:	0092      	lsls	r2, r2, #2
    2216:	58d3      	ldr	r3, [r2, r3]
    2218:	617b      	str	r3, [r7, #20]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
    221a:	2300      	movs	r3, #0
    221c:	617b      	str	r3, [r7, #20]
	tmp |= RTC_MODE0_COMP_COMP(data);
    221e:	697a      	ldr	r2, [r7, #20]
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	4313      	orrs	r3, r2
    2224:	617b      	str	r3, [r7, #20]
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
    2226:	230b      	movs	r3, #11
    2228:	18fb      	adds	r3, r7, r3
    222a:	781a      	ldrb	r2, [r3, #0]
    222c:	68fb      	ldr	r3, [r7, #12]
    222e:	3206      	adds	r2, #6
    2230:	0092      	lsls	r2, r2, #2
    2232:	6979      	ldr	r1, [r7, #20]
    2234:	50d1      	str	r1, [r2, r3]
	hri_rtc_wait_for_sync(hw);
    2236:	68fb      	ldr	r3, [r7, #12]
    2238:	0018      	movs	r0, r3
    223a:	4b03      	ldr	r3, [pc, #12]	; (2248 <hri_rtcmode0_write_COMP_COMP_bf+0x50>)
    223c:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    223e:	46c0      	nop			; (mov r8, r8)
    2240:	46bd      	mov	sp, r7
    2242:	b006      	add	sp, #24
    2244:	bd80      	pop	{r7, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	00002169 	.word	0x00002169

0000224c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    224c:	b580      	push	{r7, lr}
    224e:	b084      	sub	sp, #16
    2250:	af00      	add	r7, sp, #0
    2252:	6078      	str	r0, [r7, #4]
    2254:	6039      	str	r1, [r7, #0]
	ASSERT(dev);
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	1e5a      	subs	r2, r3, #1
    225a:	4193      	sbcs	r3, r2
    225c:	b2db      	uxtb	r3, r3
    225e:	4921      	ldr	r1, [pc, #132]	; (22e4 <_timer_init+0x98>)
    2260:	2233      	movs	r2, #51	; 0x33
    2262:	0018      	movs	r0, r3
    2264:	4b20      	ldr	r3, [pc, #128]	; (22e8 <_timer_init+0x9c>)
    2266:	4798      	blx	r3

	uint16_t register_value;
	dev->hw = hw;
    2268:	687b      	ldr	r3, [r7, #4]
    226a:	683a      	ldr	r2, [r7, #0]
    226c:	60da      	str	r2, [r3, #12]

	hri_rtcmode0_write_CTRL_reg(dev->hw, RTC_MODE0_CTRL_SWRST);
    226e:	687b      	ldr	r3, [r7, #4]
    2270:	68db      	ldr	r3, [r3, #12]
    2272:	2101      	movs	r1, #1
    2274:	0018      	movs	r0, r3
    2276:	4b1d      	ldr	r3, [pc, #116]	; (22ec <_timer_init+0xa0>)
    2278:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw);
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	68db      	ldr	r3, [r3, #12]
    227e:	0018      	movs	r0, r3
    2280:	4b1b      	ldr	r3, [pc, #108]	; (22f0 <_timer_init+0xa4>)
    2282:	4798      	blx	r3

	/* Set mode 0 */
	register_value = RTC_MODE0_CTRL_MODE(0);
    2284:	230e      	movs	r3, #14
    2286:	18fb      	adds	r3, r7, r3
    2288:	2200      	movs	r2, #0
    228a:	801a      	strh	r2, [r3, #0]

	/* Set prescaler */
	register_value |= RTC_MODE0_CTRL_PRESCALER(CONF_RTC_PRESCALER);
    228c:	230e      	movs	r3, #14
    228e:	18fb      	adds	r3, r7, r3
    2290:	220e      	movs	r2, #14
    2292:	18ba      	adds	r2, r7, r2
    2294:	8812      	ldrh	r2, [r2, #0]
    2296:	801a      	strh	r2, [r3, #0]

	/* clear counter on compare/timer match */
	register_value |= RTC_MODE0_CTRL_MATCHCLR;
    2298:	230e      	movs	r3, #14
    229a:	18fb      	adds	r3, r7, r3
    229c:	220e      	movs	r2, #14
    229e:	18ba      	adds	r2, r7, r2
    22a0:	8812      	ldrh	r2, [r2, #0]
    22a2:	2180      	movs	r1, #128	; 0x80
    22a4:	430a      	orrs	r2, r1
    22a6:	801a      	strh	r2, [r3, #0]

	hri_rtcmode0_write_CTRL_reg(dev->hw, register_value);
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	68da      	ldr	r2, [r3, #12]
    22ac:	230e      	movs	r3, #14
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	881b      	ldrh	r3, [r3, #0]
    22b2:	0019      	movs	r1, r3
    22b4:	0010      	movs	r0, r2
    22b6:	4b0d      	ldr	r3, [pc, #52]	; (22ec <_timer_init+0xa0>)
    22b8:	4798      	blx	r3

	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
    22ba:	687b      	ldr	r3, [r7, #4]
    22bc:	68d8      	ldr	r0, [r3, #12]
    22be:	2380      	movs	r3, #128	; 0x80
    22c0:	00db      	lsls	r3, r3, #3
    22c2:	001a      	movs	r2, r3
    22c4:	2100      	movs	r1, #0
    22c6:	4b0b      	ldr	r3, [pc, #44]	; (22f4 <_timer_init+0xa8>)
    22c8:	4798      	blx	r3
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    22ca:	687b      	ldr	r3, [r7, #4]
    22cc:	68db      	ldr	r3, [r3, #12]
    22ce:	0018      	movs	r0, r3
    22d0:	4b09      	ldr	r3, [pc, #36]	; (22f8 <_timer_init+0xac>)
    22d2:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
    22d4:	4b09      	ldr	r3, [pc, #36]	; (22fc <_timer_init+0xb0>)
    22d6:	687a      	ldr	r2, [r7, #4]
    22d8:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    22da:	2300      	movs	r3, #0
}
    22dc:	0018      	movs	r0, r3
    22de:	46bd      	mov	sp, r7
    22e0:	b004      	add	sp, #16
    22e2:	bd80      	pop	{r7, pc}
    22e4:	00004340 	.word	0x00004340
    22e8:	00001e5d 	.word	0x00001e5d
    22ec:	000021cd 	.word	0x000021cd
    22f0:	00002169 	.word	0x00002169
    22f4:	000021f9 	.word	0x000021f9
    22f8:	000021b5 	.word	0x000021b5
    22fc:	20000034 	.word	0x20000034

00002300 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
    2300:	b580      	push	{r7, lr}
    2302:	b084      	sub	sp, #16
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2308:	687b      	ldr	r3, [r7, #4]
    230a:	68db      	ldr	r3, [r3, #12]
    230c:	0018      	movs	r0, r3
    230e:	4b0f      	ldr	r3, [pc, #60]	; (234c <_rtc_timer_interrupt_handler+0x4c>)
    2310:	4798      	blx	r3
    2312:	0003      	movs	r3, r0
    2314:	001a      	movs	r2, r3
    2316:	230e      	movs	r3, #14
    2318:	18fb      	adds	r3, r7, r3
    231a:	801a      	strh	r2, [r3, #0]

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    231c:	230e      	movs	r3, #14
    231e:	18fb      	adds	r3, r7, r3
    2320:	881b      	ldrh	r3, [r3, #0]
    2322:	2201      	movs	r2, #1
    2324:	4013      	ands	r3, r2
    2326:	d00d      	beq.n	2344 <_rtc_timer_interrupt_handler+0x44>
		if (dev->timer_cb.period_expired) {
    2328:	687b      	ldr	r3, [r7, #4]
    232a:	681b      	ldr	r3, [r3, #0]
    232c:	2b00      	cmp	r3, #0
    232e:	d004      	beq.n	233a <_rtc_timer_interrupt_handler+0x3a>
			dev->timer_cb.period_expired(dev);
    2330:	687b      	ldr	r3, [r7, #4]
    2332:	681b      	ldr	r3, [r3, #0]
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	0010      	movs	r0, r2
    2338:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	68db      	ldr	r3, [r3, #12]
    233e:	0018      	movs	r0, r3
    2340:	4b03      	ldr	r3, [pc, #12]	; (2350 <_rtc_timer_interrupt_handler+0x50>)
    2342:	4798      	blx	r3
	}
}
    2344:	46c0      	nop			; (mov r8, r8)
    2346:	46bd      	mov	sp, r7
    2348:	b004      	add	sp, #16
    234a:	bd80      	pop	{r7, pc}
    234c:	0000219f 	.word	0x0000219f
    2350:	00002189 	.word	0x00002189

00002354 <_rtc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
    2354:	b580      	push	{r7, lr}
    2356:	af00      	add	r7, sp, #0
	return NULL;
    2358:	2300      	movs	r3, #0
}
    235a:	0018      	movs	r0, r3
    235c:	46bd      	mov	sp, r7
    235e:	bd80      	pop	{r7, pc}

00002360 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2360:	b580      	push	{r7, lr}
    2362:	af00      	add	r7, sp, #0
	_rtc_timer_interrupt_handler(_rtc_dev);
    2364:	4b03      	ldr	r3, [pc, #12]	; (2374 <RTC_Handler+0x14>)
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	0018      	movs	r0, r3
    236a:	4b03      	ldr	r3, [pc, #12]	; (2378 <RTC_Handler+0x18>)
    236c:	4798      	blx	r3
}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	46bd      	mov	sp, r7
    2372:	bd80      	pop	{r7, pc}
    2374:	20000034 	.word	0x20000034
    2378:	00002301 	.word	0x00002301

0000237c <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    237c:	b580      	push	{r7, lr}
    237e:	b082      	sub	sp, #8
    2380:	af00      	add	r7, sp, #0
    2382:	6078      	str	r0, [r7, #4]
    2384:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	69db      	ldr	r3, [r3, #28]
    238c:	683a      	ldr	r2, [r7, #0]
    238e:	4013      	ands	r3, r2
    2390:	d1fa      	bne.n	2388 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	46bd      	mov	sp, r7
    2396:	b002      	add	sp, #8
    2398:	bd80      	pop	{r7, pc}

0000239a <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    239a:	b580      	push	{r7, lr}
    239c:	b082      	sub	sp, #8
    239e:	af00      	add	r7, sp, #0
    23a0:	6078      	str	r0, [r7, #4]
    23a2:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    23a4:	687b      	ldr	r3, [r7, #4]
    23a6:	69db      	ldr	r3, [r3, #28]
    23a8:	683a      	ldr	r2, [r7, #0]
    23aa:	4013      	ands	r3, r2
    23ac:	1e5a      	subs	r2, r3, #1
    23ae:	4193      	sbcs	r3, r2
    23b0:	b2db      	uxtb	r3, r3
}
    23b2:	0018      	movs	r0, r3
    23b4:	46bd      	mov	sp, r7
    23b6:	b002      	add	sp, #8
    23b8:	bd80      	pop	{r7, pc}

000023ba <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    23ba:	b580      	push	{r7, lr}
    23bc:	b082      	sub	sp, #8
    23be:	af00      	add	r7, sp, #0
    23c0:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    23c2:	687b      	ldr	r3, [r7, #4]
    23c4:	2201      	movs	r2, #1
    23c6:	761a      	strb	r2, [r3, #24]
}
    23c8:	46c0      	nop			; (mov r8, r8)
    23ca:	46bd      	mov	sp, r7
    23cc:	b002      	add	sp, #8
    23ce:	bd80      	pop	{r7, pc}

000023d0 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b082      	sub	sp, #8
    23d4:	af00      	add	r7, sp, #0
    23d6:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    23d8:	687b      	ldr	r3, [r7, #4]
    23da:	2202      	movs	r2, #2
    23dc:	761a      	strb	r2, [r3, #24]
}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	46bd      	mov	sp, r7
    23e2:	b002      	add	sp, #8
    23e4:	bd80      	pop	{r7, pc}

000023e6 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    23e6:	b580      	push	{r7, lr}
    23e8:	b082      	sub	sp, #8
    23ea:	af00      	add	r7, sp, #0
    23ec:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	7e1b      	ldrb	r3, [r3, #24]
    23f2:	b2db      	uxtb	r3, r3
}
    23f4:	0018      	movs	r0, r3
    23f6:	46bd      	mov	sp, r7
    23f8:	b002      	add	sp, #8
    23fa:	bd80      	pop	{r7, pc}

000023fc <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    23fc:	b580      	push	{r7, lr}
    23fe:	b082      	sub	sp, #8
    2400:	af00      	add	r7, sp, #0
    2402:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	681b      	ldr	r3, [r3, #0]
    2408:	2202      	movs	r2, #2
    240a:	431a      	orrs	r2, r3
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	2103      	movs	r1, #3
    2414:	0018      	movs	r0, r3
    2416:	4b03      	ldr	r3, [pc, #12]	; (2424 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x28>)
    2418:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	46bd      	mov	sp, r7
    241e:	b002      	add	sp, #8
    2420:	bd80      	pop	{r7, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	0000237d 	.word	0x0000237d

00002428 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2428:	b580      	push	{r7, lr}
    242a:	b082      	sub	sp, #8
    242c:	af00      	add	r7, sp, #0
    242e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	681b      	ldr	r3, [r3, #0]
    2434:	2202      	movs	r2, #2
    2436:	4393      	bics	r3, r2
    2438:	001a      	movs	r2, r3
    243a:	687b      	ldr	r3, [r7, #4]
    243c:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    243e:	687b      	ldr	r3, [r7, #4]
    2440:	2103      	movs	r1, #3
    2442:	0018      	movs	r0, r3
    2444:	4b02      	ldr	r3, [pc, #8]	; (2450 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    2446:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2448:	46c0      	nop			; (mov r8, r8)
    244a:	46bd      	mov	sp, r7
    244c:	b002      	add	sp, #8
    244e:	bd80      	pop	{r7, pc}
    2450:	0000237d 	.word	0x0000237d

00002454 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    2454:	b580      	push	{r7, lr}
    2456:	b084      	sub	sp, #16
    2458:	af00      	add	r7, sp, #0
    245a:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	681b      	ldr	r3, [r3, #0]
    2460:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    2462:	68fb      	ldr	r3, [r7, #12]
    2464:	0edb      	lsrs	r3, r3, #27
    2466:	2201      	movs	r2, #1
    2468:	4013      	ands	r3, r2
    246a:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    246c:	68fb      	ldr	r3, [r7, #12]
    246e:	1e5a      	subs	r2, r3, #1
    2470:	4193      	sbcs	r3, r2
    2472:	b2db      	uxtb	r3, r3
}
    2474:	0018      	movs	r0, r3
    2476:	46bd      	mov	sp, r7
    2478:	b004      	add	sp, #16
    247a:	bd80      	pop	{r7, pc}

0000247c <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    247c:	b580      	push	{r7, lr}
    247e:	b084      	sub	sp, #16
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
    2484:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	2103      	movs	r1, #3
    248a:	0018      	movs	r0, r3
    248c:	4b06      	ldr	r3, [pc, #24]	; (24a8 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    248e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    2490:	687b      	ldr	r3, [r7, #4]
    2492:	681b      	ldr	r3, [r3, #0]
    2494:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2496:	68fb      	ldr	r3, [r7, #12]
    2498:	683a      	ldr	r2, [r7, #0]
    249a:	4013      	ands	r3, r2
    249c:	60fb      	str	r3, [r7, #12]
	return tmp;
    249e:	68fb      	ldr	r3, [r7, #12]
}
    24a0:	0018      	movs	r0, r3
    24a2:	46bd      	mov	sp, r7
    24a4:	b004      	add	sp, #16
    24a6:	bd80      	pop	{r7, pc}
    24a8:	0000237d 	.word	0x0000237d

000024ac <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    24ac:	b580      	push	{r7, lr}
    24ae:	b082      	sub	sp, #8
    24b0:	af00      	add	r7, sp, #0
    24b2:	6078      	str	r0, [r7, #4]
    24b4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    24b6:	687b      	ldr	r3, [r7, #4]
    24b8:	683a      	ldr	r2, [r7, #0]
    24ba:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	2103      	movs	r1, #3
    24c0:	0018      	movs	r0, r3
    24c2:	4b03      	ldr	r3, [pc, #12]	; (24d0 <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    24c4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	46bd      	mov	sp, r7
    24ca:	b002      	add	sp, #8
    24cc:	bd80      	pop	{r7, pc}
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	0000237d 	.word	0x0000237d

000024d4 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    24d4:	b580      	push	{r7, lr}
    24d6:	b082      	sub	sp, #8
    24d8:	af00      	add	r7, sp, #0
    24da:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    24dc:	687b      	ldr	r3, [r7, #4]
    24de:	685b      	ldr	r3, [r3, #4]
    24e0:	2280      	movs	r2, #128	; 0x80
    24e2:	0052      	lsls	r2, r2, #1
    24e4:	431a      	orrs	r2, r3
    24e6:	687b      	ldr	r3, [r7, #4]
    24e8:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	2104      	movs	r1, #4
    24ee:	0018      	movs	r0, r3
    24f0:	4b02      	ldr	r3, [pc, #8]	; (24fc <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    24f2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    24f4:	46c0      	nop			; (mov r8, r8)
    24f6:	46bd      	mov	sp, r7
    24f8:	b002      	add	sp, #8
    24fa:	bd80      	pop	{r7, pc}
    24fc:	0000237d 	.word	0x0000237d

00002500 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    2500:	b580      	push	{r7, lr}
    2502:	b082      	sub	sp, #8
    2504:	af00      	add	r7, sp, #0
    2506:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	685b      	ldr	r3, [r3, #4]
    250c:	4a06      	ldr	r2, [pc, #24]	; (2528 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    250e:	401a      	ands	r2, r3
    2510:	687b      	ldr	r3, [r7, #4]
    2512:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2514:	687b      	ldr	r3, [r7, #4]
    2516:	2104      	movs	r1, #4
    2518:	0018      	movs	r0, r3
    251a:	4b04      	ldr	r3, [pc, #16]	; (252c <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    251c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	46bd      	mov	sp, r7
    2522:	b002      	add	sp, #8
    2524:	bd80      	pop	{r7, pc}
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	fffffeff 	.word	0xfffffeff
    252c:	0000237d 	.word	0x0000237d

00002530 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    2530:	b580      	push	{r7, lr}
    2532:	b082      	sub	sp, #8
    2534:	af00      	add	r7, sp, #0
    2536:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2538:	687b      	ldr	r3, [r7, #4]
    253a:	685b      	ldr	r3, [r3, #4]
    253c:	2280      	movs	r2, #128	; 0x80
    253e:	02d2      	lsls	r2, r2, #11
    2540:	431a      	orrs	r2, r3
    2542:	687b      	ldr	r3, [r7, #4]
    2544:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	2104      	movs	r1, #4
    254a:	0018      	movs	r0, r3
    254c:	4b02      	ldr	r3, [pc, #8]	; (2558 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    254e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2550:	46c0      	nop			; (mov r8, r8)
    2552:	46bd      	mov	sp, r7
    2554:	b002      	add	sp, #8
    2556:	bd80      	pop	{r7, pc}
    2558:	0000237d 	.word	0x0000237d

0000255c <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    255c:	b580      	push	{r7, lr}
    255e:	b082      	sub	sp, #8
    2560:	af00      	add	r7, sp, #0
    2562:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	685b      	ldr	r3, [r3, #4]
    2568:	4a06      	ldr	r2, [pc, #24]	; (2584 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    256a:	401a      	ands	r2, r3
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	2104      	movs	r1, #4
    2574:	0018      	movs	r0, r3
    2576:	4b04      	ldr	r3, [pc, #16]	; (2588 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    2578:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	46bd      	mov	sp, r7
    257e:	b002      	add	sp, #8
    2580:	bd80      	pop	{r7, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	fffbffff 	.word	0xfffbffff
    2588:	0000237d 	.word	0x0000237d

0000258c <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    258c:	b580      	push	{r7, lr}
    258e:	b082      	sub	sp, #8
    2590:	af00      	add	r7, sp, #0
    2592:	6078      	str	r0, [r7, #4]
    2594:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2596:	687b      	ldr	r3, [r7, #4]
    2598:	685a      	ldr	r2, [r3, #4]
    259a:	683b      	ldr	r3, [r7, #0]
    259c:	0419      	lsls	r1, r3, #16
    259e:	23c0      	movs	r3, #192	; 0xc0
    25a0:	029b      	lsls	r3, r3, #10
    25a2:	400b      	ands	r3, r1
    25a4:	431a      	orrs	r2, r3
    25a6:	687b      	ldr	r3, [r7, #4]
    25a8:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	2104      	movs	r1, #4
    25ae:	0018      	movs	r0, r3
    25b0:	4b02      	ldr	r3, [pc, #8]	; (25bc <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    25b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    25b4:	46c0      	nop			; (mov r8, r8)
    25b6:	46bd      	mov	sp, r7
    25b8:	b002      	add	sp, #8
    25ba:	bd80      	pop	{r7, pc}
    25bc:	0000237d 	.word	0x0000237d

000025c0 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    25c0:	b580      	push	{r7, lr}
    25c2:	b082      	sub	sp, #8
    25c4:	af00      	add	r7, sp, #0
    25c6:	6078      	str	r0, [r7, #4]
    25c8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	683a      	ldr	r2, [r7, #0]
    25ce:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2104      	movs	r1, #4
    25d4:	0018      	movs	r0, r3
    25d6:	4b03      	ldr	r3, [pc, #12]	; (25e4 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    25d8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46bd      	mov	sp, r7
    25de:	b002      	add	sp, #8
    25e0:	bd80      	pop	{r7, pc}
    25e2:	46c0      	nop			; (mov r8, r8)
    25e4:	0000237d 	.word	0x0000237d

000025e8 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    25e8:	b580      	push	{r7, lr}
    25ea:	b082      	sub	sp, #8
    25ec:	af00      	add	r7, sp, #0
    25ee:	6078      	str	r0, [r7, #4]
    25f0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	683a      	ldr	r2, [r7, #0]
    25f6:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46bd      	mov	sp, r7
    25fc:	b002      	add	sp, #8
    25fe:	bd80      	pop	{r7, pc}

00002600 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    2600:	b580      	push	{r7, lr}
    2602:	b084      	sub	sp, #16
    2604:	af00      	add	r7, sp, #0
    2606:	6078      	str	r0, [r7, #4]
    2608:	000a      	movs	r2, r1
    260a:	1cfb      	adds	r3, r7, #3
    260c:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2612:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    2614:	68fb      	ldr	r3, [r7, #12]
    2616:	4a0b      	ldr	r2, [pc, #44]	; (2644 <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    2618:	4013      	ands	r3, r2
    261a:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    261c:	1cfb      	adds	r3, r7, #3
    261e:	781b      	ldrb	r3, [r3, #0]
    2620:	039b      	lsls	r3, r3, #14
    2622:	001a      	movs	r2, r3
    2624:	68fb      	ldr	r3, [r7, #12]
    2626:	4313      	orrs	r3, r2
    2628:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    262a:	687b      	ldr	r3, [r7, #4]
    262c:	68fa      	ldr	r2, [r7, #12]
    262e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2630:	687b      	ldr	r3, [r7, #4]
    2632:	2104      	movs	r1, #4
    2634:	0018      	movs	r0, r3
    2636:	4b04      	ldr	r3, [pc, #16]	; (2648 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    2638:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	46bd      	mov	sp, r7
    263e:	b004      	add	sp, #16
    2640:	bd80      	pop	{r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	ffffbfff 	.word	0xffffbfff
    2648:	0000237d 	.word	0x0000237d

0000264c <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    264c:	b580      	push	{r7, lr}
    264e:	b082      	sub	sp, #8
    2650:	af00      	add	r7, sp, #0
    2652:	6078      	str	r0, [r7, #4]
    2654:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	683a      	ldr	r2, [r7, #0]
    265a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    265c:	687b      	ldr	r3, [r7, #4]
    265e:	2104      	movs	r1, #4
    2660:	0018      	movs	r0, r3
    2662:	4b03      	ldr	r3, [pc, #12]	; (2670 <hri_sercomi2cm_write_ADDR_reg+0x24>)
    2664:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	46bd      	mov	sp, r7
    266a:	b002      	add	sp, #8
    266c:	bd80      	pop	{r7, pc}
    266e:	46c0      	nop			; (mov r8, r8)
    2670:	0000237d 	.word	0x0000237d

00002674 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    2674:	b580      	push	{r7, lr}
    2676:	b082      	sub	sp, #8
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    267c:	687b      	ldr	r3, [r7, #4]
    267e:	2104      	movs	r1, #4
    2680:	0018      	movs	r0, r3
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <hri_sercomi2cm_read_ADDR_reg+0x20>)
    2684:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    268a:	0018      	movs	r0, r3
    268c:	46bd      	mov	sp, r7
    268e:	b002      	add	sp, #8
    2690:	bd80      	pop	{r7, pc}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	0000237d 	.word	0x0000237d

00002698 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    2698:	b580      	push	{r7, lr}
    269a:	b082      	sub	sp, #8
    269c:	af00      	add	r7, sp, #0
    269e:	6078      	str	r0, [r7, #4]
    26a0:	000a      	movs	r2, r1
    26a2:	1cfb      	adds	r3, r7, #3
    26a4:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    26a6:	687b      	ldr	r3, [r7, #4]
    26a8:	1cfa      	adds	r2, r7, #3
    26aa:	2128      	movs	r1, #40	; 0x28
    26ac:	7812      	ldrb	r2, [r2, #0]
    26ae:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    26b0:	687b      	ldr	r3, [r7, #4]
    26b2:	2104      	movs	r1, #4
    26b4:	0018      	movs	r0, r3
    26b6:	4b03      	ldr	r3, [pc, #12]	; (26c4 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    26b8:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	46bd      	mov	sp, r7
    26be:	b002      	add	sp, #8
    26c0:	bd80      	pop	{r7, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	0000237d 	.word	0x0000237d

000026c8 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    26c8:	b580      	push	{r7, lr}
    26ca:	b082      	sub	sp, #8
    26cc:	af00      	add	r7, sp, #0
    26ce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	2104      	movs	r1, #4
    26d4:	0018      	movs	r0, r3
    26d6:	4b05      	ldr	r3, [pc, #20]	; (26ec <hri_sercomi2cm_read_DATA_reg+0x24>)
    26d8:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    26da:	687b      	ldr	r3, [r7, #4]
    26dc:	2228      	movs	r2, #40	; 0x28
    26de:	5c9b      	ldrb	r3, [r3, r2]
    26e0:	b2db      	uxtb	r3, r3
}
    26e2:	0018      	movs	r0, r3
    26e4:	46bd      	mov	sp, r7
    26e6:	b002      	add	sp, #8
    26e8:	bd80      	pop	{r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	0000237d 	.word	0x0000237d

000026f0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    26f0:	b580      	push	{r7, lr}
    26f2:	b082      	sub	sp, #8
    26f4:	af00      	add	r7, sp, #0
    26f6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	2104      	movs	r1, #4
    26fc:	0018      	movs	r0, r3
    26fe:	4b07      	ldr	r3, [pc, #28]	; (271c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x2c>)
    2700:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	8b5b      	ldrh	r3, [r3, #26]
    2706:	b29b      	uxth	r3, r3
    2708:	091b      	lsrs	r3, r3, #4
    270a:	b29b      	uxth	r3, r3
    270c:	2203      	movs	r2, #3
    270e:	4013      	ands	r3, r2
    2710:	b29b      	uxth	r3, r3
}
    2712:	0018      	movs	r0, r3
    2714:	46bd      	mov	sp, r7
    2716:	b002      	add	sp, #8
    2718:	bd80      	pop	{r7, pc}
    271a:	46c0      	nop			; (mov r8, r8)
    271c:	0000237d 	.word	0x0000237d

00002720 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    2720:	b580      	push	{r7, lr}
    2722:	b082      	sub	sp, #8
    2724:	af00      	add	r7, sp, #0
    2726:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	2104      	movs	r1, #4
    272c:	0018      	movs	r0, r3
    272e:	4b04      	ldr	r3, [pc, #16]	; (2740 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    2730:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    2732:	687b      	ldr	r3, [r7, #4]
    2734:	8b5b      	ldrh	r3, [r3, #26]
    2736:	b29b      	uxth	r3, r3
}
    2738:	0018      	movs	r0, r3
    273a:	46bd      	mov	sp, r7
    273c:	b002      	add	sp, #8
    273e:	bd80      	pop	{r7, pc}
    2740:	0000237d 	.word	0x0000237d

00002744 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
    274a:	6078      	str	r0, [r7, #4]
    274c:	000a      	movs	r2, r1
    274e:	1cbb      	adds	r3, r7, #2
    2750:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    2752:	687b      	ldr	r3, [r7, #4]
    2754:	1cba      	adds	r2, r7, #2
    2756:	8812      	ldrh	r2, [r2, #0]
    2758:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2104      	movs	r1, #4
    275e:	0018      	movs	r0, r3
    2760:	4b02      	ldr	r3, [pc, #8]	; (276c <hri_sercomi2cm_clear_STATUS_reg+0x28>)
    2762:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46bd      	mov	sp, r7
    2768:	b002      	add	sp, #8
    276a:	bd80      	pop	{r7, pc}
    276c:	0000237d 	.word	0x0000237d

00002770 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	4a04      	ldr	r2, [pc, #16]	; (278c <_sercom_get_hardware_index+0x1c>)
    277c:	4694      	mov	ip, r2
    277e:	4463      	add	r3, ip
    2780:	0a9b      	lsrs	r3, r3, #10
    2782:	b2db      	uxtb	r3, r3
}
    2784:	0018      	movs	r0, r3
    2786:	46bd      	mov	sp, r7
    2788:	b002      	add	sp, #8
    278a:	bd80      	pop	{r7, pc}
    278c:	bdfff800 	.word	0xbdfff800

00002790 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    2790:	b590      	push	{r4, r7, lr}
    2792:	b085      	sub	sp, #20
    2794:	af00      	add	r7, sp, #0
    2796:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2798:	230e      	movs	r3, #14
    279a:	18fc      	adds	r4, r7, r3
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	0018      	movs	r0, r3
    27a0:	4b1a      	ldr	r3, [pc, #104]	; (280c <_get_i2cm_index+0x7c>)
    27a2:	4798      	blx	r3
    27a4:	0003      	movs	r3, r0
    27a6:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    27a8:	230f      	movs	r3, #15
    27aa:	18fb      	adds	r3, r7, r3
    27ac:	2200      	movs	r2, #0
    27ae:	701a      	strb	r2, [r3, #0]
    27b0:	e019      	b.n	27e6 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    27b2:	230f      	movs	r3, #15
    27b4:	18fb      	adds	r3, r7, r3
    27b6:	781a      	ldrb	r2, [r3, #0]
    27b8:	4915      	ldr	r1, [pc, #84]	; (2810 <_get_i2cm_index+0x80>)
    27ba:	0013      	movs	r3, r2
    27bc:	005b      	lsls	r3, r3, #1
    27be:	189b      	adds	r3, r3, r2
    27c0:	00db      	lsls	r3, r3, #3
    27c2:	5c5b      	ldrb	r3, [r3, r1]
    27c4:	220e      	movs	r2, #14
    27c6:	18ba      	adds	r2, r7, r2
    27c8:	7812      	ldrb	r2, [r2, #0]
    27ca:	429a      	cmp	r2, r3
    27cc:	d104      	bne.n	27d8 <_get_i2cm_index+0x48>
			return i;
    27ce:	230f      	movs	r3, #15
    27d0:	18fb      	adds	r3, r7, r3
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	b25b      	sxtb	r3, r3
    27d6:	e014      	b.n	2802 <_get_i2cm_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    27d8:	230f      	movs	r3, #15
    27da:	18fb      	adds	r3, r7, r3
    27dc:	781a      	ldrb	r2, [r3, #0]
    27de:	230f      	movs	r3, #15
    27e0:	18fb      	adds	r3, r7, r3
    27e2:	3201      	adds	r2, #1
    27e4:	701a      	strb	r2, [r3, #0]
    27e6:	230f      	movs	r3, #15
    27e8:	18fb      	adds	r3, r7, r3
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	2b00      	cmp	r3, #0
    27ee:	d0e0      	beq.n	27b2 <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    27f0:	23e6      	movs	r3, #230	; 0xe6
    27f2:	009a      	lsls	r2, r3, #2
    27f4:	4b07      	ldr	r3, [pc, #28]	; (2814 <_get_i2cm_index+0x84>)
    27f6:	0019      	movs	r1, r3
    27f8:	2000      	movs	r0, #0
    27fa:	4b07      	ldr	r3, [pc, #28]	; (2818 <_get_i2cm_index+0x88>)
    27fc:	4798      	blx	r3
	return -1;
    27fe:	2301      	movs	r3, #1
    2800:	425b      	negs	r3, r3
}
    2802:	0018      	movs	r0, r3
    2804:	46bd      	mov	sp, r7
    2806:	b005      	add	sp, #20
    2808:	bd90      	pop	{r4, r7, pc}
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	00002771 	.word	0x00002771
    2810:	20000000 	.word	0x20000000
    2814:	00004358 	.word	0x00004358
    2818:	00001e5d 	.word	0x00001e5d

0000281c <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    281c:	b580      	push	{r7, lr}
    281e:	b082      	sub	sp, #8
    2820:	af00      	add	r7, sp, #0
    2822:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	2103      	movs	r1, #3
    2828:	0018      	movs	r0, r3
    282a:	4b03      	ldr	r3, [pc, #12]	; (2838 <_sercom_i2c_send_stop+0x1c>)
    282c:	4798      	blx	r3
}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	46bd      	mov	sp, r7
    2832:	b002      	add	sp, #8
    2834:	bd80      	pop	{r7, pc}
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	0000258d 	.word	0x0000258d

0000283c <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    283c:	b590      	push	{r4, r7, lr}
    283e:	b087      	sub	sp, #28
    2840:	af00      	add	r7, sp, #0
    2842:	60f8      	str	r0, [r7, #12]
    2844:	60b9      	str	r1, [r7, #8]
    2846:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    2848:	68fb      	ldr	r3, [r7, #12]
    284a:	0018      	movs	r0, r3
    284c:	4b87      	ldr	r3, [pc, #540]	; (2a6c <_sercom_i2c_sync_analyse_flags+0x230>)
    284e:	4798      	blx	r3
    2850:	0003      	movs	r3, r0
    2852:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    2854:	2312      	movs	r3, #18
    2856:	18fc      	adds	r4, r7, r3
    2858:	68fb      	ldr	r3, [r7, #12]
    285a:	0018      	movs	r0, r3
    285c:	4b84      	ldr	r3, [pc, #528]	; (2a70 <_sercom_i2c_sync_analyse_flags+0x234>)
    285e:	4798      	blx	r3
    2860:	0003      	movs	r3, r0
    2862:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    2864:	68bb      	ldr	r3, [r7, #8]
    2866:	2201      	movs	r2, #1
    2868:	4013      	ands	r3, r2
    286a:	d100      	bne.n	286e <_sercom_i2c_sync_analyse_flags+0x32>
    286c:	e0a3      	b.n	29b6 <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    286e:	2312      	movs	r3, #18
    2870:	18fb      	adds	r3, r7, r3
    2872:	881b      	ldrh	r3, [r3, #0]
    2874:	2202      	movs	r2, #2
    2876:	4013      	ands	r3, r2
    2878:	d020      	beq.n	28bc <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    287a:	68fb      	ldr	r3, [r7, #12]
    287c:	0018      	movs	r0, r3
    287e:	4b7d      	ldr	r3, [pc, #500]	; (2a74 <_sercom_i2c_sync_analyse_flags+0x238>)
    2880:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	885b      	ldrh	r3, [r3, #2]
    2886:	b29b      	uxth	r3, r3
    2888:	2280      	movs	r2, #128	; 0x80
    288a:	0152      	lsls	r2, r2, #5
    288c:	4313      	orrs	r3, r2
    288e:	b29a      	uxth	r2, r3
    2890:	687b      	ldr	r3, [r7, #4]
    2892:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	885b      	ldrh	r3, [r3, #2]
    2898:	b29b      	uxth	r3, r3
    289a:	4a77      	ldr	r2, [pc, #476]	; (2a78 <_sercom_i2c_sync_analyse_flags+0x23c>)
    289c:	4013      	ands	r3, r2
    289e:	b29a      	uxth	r2, r3
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    28a4:	2312      	movs	r3, #18
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	881b      	ldrh	r3, [r3, #0]
    28aa:	2201      	movs	r2, #1
    28ac:	4013      	ands	r3, r2
    28ae:	d002      	beq.n	28b6 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    28b0:	2305      	movs	r3, #5
    28b2:	425b      	negs	r3, r3
    28b4:	e0d6      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    28b6:	2304      	movs	r3, #4
    28b8:	425b      	negs	r3, r3
    28ba:	e0d3      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    28bc:	2312      	movs	r3, #18
    28be:	18fb      	adds	r3, r7, r3
    28c0:	881b      	ldrh	r3, [r3, #0]
    28c2:	2204      	movs	r2, #4
    28c4:	4013      	ands	r3, r2
    28c6:	d021      	beq.n	290c <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	685b      	ldr	r3, [r3, #4]
    28cc:	2b00      	cmp	r3, #0
    28ce:	dd08      	ble.n	28e2 <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	885b      	ldrh	r3, [r3, #2]
    28d4:	b29b      	uxth	r3, r3
    28d6:	2280      	movs	r2, #128	; 0x80
    28d8:	0152      	lsls	r2, r2, #5
    28da:	4313      	orrs	r3, r2
    28dc:	b29a      	uxth	r2, r3
    28de:	687b      	ldr	r3, [r7, #4]
    28e0:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	885b      	ldrh	r3, [r3, #2]
    28e6:	b29b      	uxth	r3, r3
    28e8:	b21b      	sxth	r3, r3
    28ea:	2b00      	cmp	r3, #0
    28ec:	da03      	bge.n	28f6 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	0018      	movs	r0, r3
    28f2:	4b62      	ldr	r3, [pc, #392]	; (2a7c <_sercom_i2c_sync_analyse_flags+0x240>)
    28f4:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	885b      	ldrh	r3, [r3, #2]
    28fa:	b29b      	uxth	r3, r3
    28fc:	4a5e      	ldr	r2, [pc, #376]	; (2a78 <_sercom_i2c_sync_analyse_flags+0x23c>)
    28fe:	4013      	ands	r3, r2
    2900:	b29a      	uxth	r2, r3
    2902:	687b      	ldr	r3, [r7, #4]
    2904:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    2906:	2302      	movs	r3, #2
    2908:	425b      	negs	r3, r3
    290a:	e0ab      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	885b      	ldrh	r3, [r3, #2]
    2910:	b29b      	uxth	r3, r3
    2912:	001a      	movs	r2, r3
    2914:	2380      	movs	r3, #128	; 0x80
    2916:	00db      	lsls	r3, r3, #3
    2918:	4013      	ands	r3, r2
    291a:	d021      	beq.n	2960 <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    291c:	687b      	ldr	r3, [r7, #4]
    291e:	881b      	ldrh	r3, [r3, #0]
    2920:	121b      	asrs	r3, r3, #8
    2922:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2924:	001a      	movs	r2, r3
    2926:	2306      	movs	r3, #6
    2928:	401a      	ands	r2, r3
    292a:	0014      	movs	r4, r2
    292c:	68fb      	ldr	r3, [r7, #12]
    292e:	0018      	movs	r0, r3
    2930:	4b53      	ldr	r3, [pc, #332]	; (2a80 <_sercom_i2c_sync_analyse_flags+0x244>)
    2932:	4798      	blx	r3
    2934:	0002      	movs	r2, r0
    2936:	2380      	movs	r3, #128	; 0x80
    2938:	01db      	lsls	r3, r3, #7
    293a:	4013      	ands	r3, r2
    293c:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    293e:	22f1      	movs	r2, #241	; 0xf1
    2940:	431a      	orrs	r2, r3
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	0011      	movs	r1, r2
    2946:	0018      	movs	r0, r3
    2948:	4b4e      	ldr	r3, [pc, #312]	; (2a84 <_sercom_i2c_sync_analyse_flags+0x248>)
    294a:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    294c:	687b      	ldr	r3, [r7, #4]
    294e:	885b      	ldrh	r3, [r3, #2]
    2950:	b29b      	uxth	r3, r3
    2952:	4a4d      	ldr	r2, [pc, #308]	; (2a88 <_sercom_i2c_sync_analyse_flags+0x24c>)
    2954:	4013      	ands	r3, r2
    2956:	b29a      	uxth	r2, r3
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    295c:	2300      	movs	r3, #0
    295e:	e081      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    2960:	687b      	ldr	r3, [r7, #4]
    2962:	685b      	ldr	r3, [r3, #4]
    2964:	2b00      	cmp	r3, #0
    2966:	d112      	bne.n	298e <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	885b      	ldrh	r3, [r3, #2]
    296c:	b29b      	uxth	r3, r3
    296e:	b21b      	sxth	r3, r3
    2970:	2b00      	cmp	r3, #0
    2972:	da03      	bge.n	297c <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    2974:	68fb      	ldr	r3, [r7, #12]
    2976:	0018      	movs	r0, r3
    2978:	4b40      	ldr	r3, [pc, #256]	; (2a7c <_sercom_i2c_sync_analyse_flags+0x240>)
    297a:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	885b      	ldrh	r3, [r3, #2]
    2980:	b29b      	uxth	r3, r3
    2982:	4a3d      	ldr	r2, [pc, #244]	; (2a78 <_sercom_i2c_sync_analyse_flags+0x23c>)
    2984:	4013      	ands	r3, r2
    2986:	b29a      	uxth	r2, r3
    2988:	687b      	ldr	r3, [r7, #4]
    298a:	805a      	strh	r2, [r3, #2]
    298c:	e011      	b.n	29b2 <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	689b      	ldr	r3, [r3, #8]
    2992:	781a      	ldrb	r2, [r3, #0]
    2994:	68fb      	ldr	r3, [r7, #12]
    2996:	0011      	movs	r1, r2
    2998:	0018      	movs	r0, r3
    299a:	4b3c      	ldr	r3, [pc, #240]	; (2a8c <_sercom_i2c_sync_analyse_flags+0x250>)
    299c:	4798      	blx	r3
				msg->buffer++;
    299e:	687b      	ldr	r3, [r7, #4]
    29a0:	689b      	ldr	r3, [r3, #8]
    29a2:	1c5a      	adds	r2, r3, #1
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	609a      	str	r2, [r3, #8]
				msg->len--;
    29a8:	687b      	ldr	r3, [r7, #4]
    29aa:	685b      	ldr	r3, [r3, #4]
    29ac:	1e5a      	subs	r2, r3, #1
    29ae:	687b      	ldr	r3, [r7, #4]
    29b0:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    29b2:	2300      	movs	r3, #0
    29b4:	e056      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    29b6:	68bb      	ldr	r3, [r7, #8]
    29b8:	2202      	movs	r2, #2
    29ba:	4013      	ands	r3, r2
    29bc:	d051      	beq.n	2a62 <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    29be:	687b      	ldr	r3, [r7, #4]
    29c0:	685b      	ldr	r3, [r3, #4]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d046      	beq.n	2a54 <_sercom_i2c_sync_analyse_flags+0x218>
    29c6:	2312      	movs	r3, #18
    29c8:	18fb      	adds	r3, r7, r3
    29ca:	881b      	ldrh	r3, [r3, #0]
    29cc:	2204      	movs	r2, #4
    29ce:	4013      	ands	r3, r2
    29d0:	d140      	bne.n	2a54 <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	685b      	ldr	r3, [r3, #4]
    29d6:	1e5a      	subs	r2, r3, #1
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	685b      	ldr	r3, [r3, #4]
    29e0:	2b00      	cmp	r3, #0
    29e2:	d102      	bne.n	29ea <_sercom_i2c_sync_analyse_flags+0x1ae>
    29e4:	697b      	ldr	r3, [r7, #20]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d006      	beq.n	29f8 <_sercom_i2c_sync_analyse_flags+0x1bc>
    29ea:	687b      	ldr	r3, [r7, #4]
    29ec:	685b      	ldr	r3, [r3, #4]
    29ee:	2b01      	cmp	r3, #1
    29f0:	d106      	bne.n	2a00 <_sercom_i2c_sync_analyse_flags+0x1c4>
    29f2:	697b      	ldr	r3, [r7, #20]
    29f4:	2b00      	cmp	r3, #0
    29f6:	d003      	beq.n	2a00 <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    29f8:	68fb      	ldr	r3, [r7, #12]
    29fa:	0018      	movs	r0, r3
    29fc:	4b24      	ldr	r3, [pc, #144]	; (2a90 <_sercom_i2c_sync_analyse_flags+0x254>)
    29fe:	4798      	blx	r3
			}

			if (msg->len == 0) {
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	685b      	ldr	r3, [r3, #4]
    2a04:	2b00      	cmp	r3, #0
    2a06:	d115      	bne.n	2a34 <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	885b      	ldrh	r3, [r3, #2]
    2a0c:	b29b      	uxth	r3, r3
    2a0e:	b21b      	sxth	r3, r3
    2a10:	2b00      	cmp	r3, #0
    2a12:	da07      	bge.n	2a24 <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    2a14:	68fb      	ldr	r3, [r7, #12]
    2a16:	0018      	movs	r0, r3
    2a18:	4b1e      	ldr	r3, [pc, #120]	; (2a94 <_sercom_i2c_sync_analyse_flags+0x258>)
    2a1a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    2a1c:	68fb      	ldr	r3, [r7, #12]
    2a1e:	0018      	movs	r0, r3
    2a20:	4b16      	ldr	r3, [pc, #88]	; (2a7c <_sercom_i2c_sync_analyse_flags+0x240>)
    2a22:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	885b      	ldrh	r3, [r3, #2]
    2a28:	b29b      	uxth	r3, r3
    2a2a:	4a13      	ldr	r2, [pc, #76]	; (2a78 <_sercom_i2c_sync_analyse_flags+0x23c>)
    2a2c:	4013      	ands	r3, r2
    2a2e:	b29a      	uxth	r2, r3
    2a30:	687b      	ldr	r3, [r7, #4]
    2a32:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	689c      	ldr	r4, [r3, #8]
    2a38:	1c62      	adds	r2, r4, #1
    2a3a:	687b      	ldr	r3, [r7, #4]
    2a3c:	609a      	str	r2, [r3, #8]
    2a3e:	68fb      	ldr	r3, [r7, #12]
    2a40:	0018      	movs	r0, r3
    2a42:	4b15      	ldr	r3, [pc, #84]	; (2a98 <_sercom_i2c_sync_analyse_flags+0x25c>)
    2a44:	4798      	blx	r3
    2a46:	0003      	movs	r3, r0
    2a48:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    2a4a:	68fb      	ldr	r3, [r7, #12]
    2a4c:	0018      	movs	r0, r3
    2a4e:	4b13      	ldr	r3, [pc, #76]	; (2a9c <_sercom_i2c_sync_analyse_flags+0x260>)
    2a50:	4798      	blx	r3
    2a52:	e006      	b.n	2a62 <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    2a54:	68fb      	ldr	r3, [r7, #12]
    2a56:	0018      	movs	r0, r3
    2a58:	4b10      	ldr	r3, [pc, #64]	; (2a9c <_sercom_i2c_sync_analyse_flags+0x260>)
    2a5a:	4798      	blx	r3
			return I2C_NACK;
    2a5c:	2302      	movs	r3, #2
    2a5e:	425b      	negs	r3, r3
    2a60:	e000      	b.n	2a64 <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    2a62:	2300      	movs	r3, #0
}
    2a64:	0018      	movs	r0, r3
    2a66:	46bd      	mov	sp, r7
    2a68:	b007      	add	sp, #28
    2a6a:	bd90      	pop	{r4, r7, pc}
    2a6c:	00002455 	.word	0x00002455
    2a70:	00002721 	.word	0x00002721
    2a74:	000023bb 	.word	0x000023bb
    2a78:	fffffeff 	.word	0xfffffeff
    2a7c:	0000281d 	.word	0x0000281d
    2a80:	00002675 	.word	0x00002675
    2a84:	0000264d 	.word	0x0000264d
    2a88:	fffffbff 	.word	0xfffffbff
    2a8c:	00002699 	.word	0x00002699
    2a90:	00002531 	.word	0x00002531
    2a94:	00002501 	.word	0x00002501
    2a98:	000026c9 	.word	0x000026c9
    2a9c:	000023d1 	.word	0x000023d1

00002aa0 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	b082      	sub	sp, #8
    2aa4:	af00      	add	r7, sp, #0
    2aa6:	6078      	str	r0, [r7, #4]
    2aa8:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    2aaa:	687b      	ldr	r3, [r7, #4]
    2aac:	1e5a      	subs	r2, r3, #1
    2aae:	4193      	sbcs	r3, r2
    2ab0:	b2db      	uxtb	r3, r3
    2ab2:	4a09      	ldr	r2, [pc, #36]	; (2ad8 <_i2c_m_sync_init+0x38>)
    2ab4:	4909      	ldr	r1, [pc, #36]	; (2adc <_i2c_m_sync_init+0x3c>)
    2ab6:	0018      	movs	r0, r3
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <_i2c_m_sync_init+0x40>)
    2aba:	4798      	blx	r3

	i2c_dev->hw = hw;
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	683a      	ldr	r2, [r7, #0]
    2ac0:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	683a      	ldr	r2, [r7, #0]
    2ac6:	0011      	movs	r1, r2
    2ac8:	0018      	movs	r0, r3
    2aca:	4b06      	ldr	r3, [pc, #24]	; (2ae4 <_i2c_m_sync_init+0x44>)
    2acc:	4798      	blx	r3
    2ace:	0003      	movs	r3, r0
}
    2ad0:	0018      	movs	r0, r3
    2ad2:	46bd      	mov	sp, r7
    2ad4:	b002      	add	sp, #8
    2ad6:	bd80      	pop	{r7, pc}
    2ad8:	00000507 	.word	0x00000507
    2adc:	00004358 	.word	0x00004358
    2ae0:	00001e5d 	.word	0x00001e5d
    2ae4:	00002e91 	.word	0x00002e91

00002ae8 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b082      	sub	sp, #8
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    2af0:	687b      	ldr	r3, [r7, #4]
    2af2:	1e5a      	subs	r2, r3, #1
    2af4:	4193      	sbcs	r3, r2
    2af6:	b2db      	uxtb	r3, r3
    2af8:	4a07      	ldr	r2, [pc, #28]	; (2b18 <_i2c_m_sync_enable+0x30>)
    2afa:	4908      	ldr	r1, [pc, #32]	; (2b1c <_i2c_m_sync_enable+0x34>)
    2afc:	0018      	movs	r0, r3
    2afe:	4b08      	ldr	r3, [pc, #32]	; (2b20 <_i2c_m_sync_enable+0x38>)
    2b00:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    2b02:	687b      	ldr	r3, [r7, #4]
    2b04:	691b      	ldr	r3, [r3, #16]
    2b06:	0018      	movs	r0, r3
    2b08:	4b06      	ldr	r3, [pc, #24]	; (2b24 <_i2c_m_sync_enable+0x3c>)
    2b0a:	4798      	blx	r3
    2b0c:	0003      	movs	r3, r0
}
    2b0e:	0018      	movs	r0, r3
    2b10:	46bd      	mov	sp, r7
    2b12:	b002      	add	sp, #8
    2b14:	bd80      	pop	{r7, pc}
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	00000524 	.word	0x00000524
    2b1c:	00004358 	.word	0x00004358
    2b20:	00001e5d 	.word	0x00001e5d
    2b24:	00002e01 	.word	0x00002e01

00002b28 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	b084      	sub	sp, #16
    2b2c:	af00      	add	r7, sp, #0
    2b2e:	6078      	str	r0, [r7, #4]
    2b30:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    2b32:	4b12      	ldr	r3, [pc, #72]	; (2b7c <_sercom_i2c_sync_wait_bus+0x54>)
    2b34:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	691b      	ldr	r3, [r3, #16]
    2b3a:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    2b3c:	68bb      	ldr	r3, [r7, #8]
    2b3e:	0018      	movs	r0, r3
    2b40:	4b0f      	ldr	r3, [pc, #60]	; (2b80 <_sercom_i2c_sync_wait_bus+0x58>)
    2b42:	4798      	blx	r3
    2b44:	0003      	movs	r3, r0
    2b46:	001a      	movs	r2, r3
    2b48:	683b      	ldr	r3, [r7, #0]
    2b4a:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    2b4c:	68fb      	ldr	r3, [r7, #12]
    2b4e:	1e5a      	subs	r2, r3, #1
    2b50:	60fa      	str	r2, [r7, #12]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d102      	bne.n	2b5c <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    2b56:	2305      	movs	r3, #5
    2b58:	425b      	negs	r3, r3
    2b5a:	e00a      	b.n	2b72 <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    2b5c:	683b      	ldr	r3, [r7, #0]
    2b5e:	681b      	ldr	r3, [r3, #0]
    2b60:	2201      	movs	r2, #1
    2b62:	4013      	ands	r3, r2
    2b64:	d104      	bne.n	2b70 <_sercom_i2c_sync_wait_bus+0x48>
    2b66:	683b      	ldr	r3, [r7, #0]
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	2202      	movs	r2, #2
    2b6c:	4013      	ands	r3, r2
    2b6e:	d0e5      	beq.n	2b3c <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    2b70:	2300      	movs	r3, #0
}
    2b72:	0018      	movs	r0, r3
    2b74:	46bd      	mov	sp, r7
    2b76:	b004      	add	sp, #16
    2b78:	bd80      	pop	{r7, pc}
    2b7a:	46c0      	nop			; (mov r8, r8)
    2b7c:	0000ffff 	.word	0x0000ffff
    2b80:	000023e7 	.word	0x000023e7

00002b84 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    2b84:	b590      	push	{r4, r7, lr}
    2b86:	b087      	sub	sp, #28
    2b88:	af00      	add	r7, sp, #0
    2b8a:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	691b      	ldr	r3, [r3, #16]
    2b90:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    2b96:	697b      	ldr	r3, [r7, #20]
    2b98:	0018      	movs	r0, r3
    2b9a:	4b3f      	ldr	r3, [pc, #252]	; (2c98 <_sercom_i2c_sync_send_address+0x114>)
    2b9c:	4798      	blx	r3
    2b9e:	0003      	movs	r3, r0
    2ba0:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    2ba2:	687b      	ldr	r3, [r7, #4]
    2ba4:	1e5a      	subs	r2, r3, #1
    2ba6:	4193      	sbcs	r3, r2
    2ba8:	b2db      	uxtb	r3, r3
    2baa:	4a3c      	ldr	r2, [pc, #240]	; (2c9c <_sercom_i2c_sync_send_address+0x118>)
    2bac:	493c      	ldr	r1, [pc, #240]	; (2ca0 <_sercom_i2c_sync_send_address+0x11c>)
    2bae:	0018      	movs	r0, r3
    2bb0:	4b3c      	ldr	r3, [pc, #240]	; (2ca4 <_sercom_i2c_sync_send_address+0x120>)
    2bb2:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    2bb4:	693b      	ldr	r3, [r7, #16]
    2bb6:	685b      	ldr	r3, [r3, #4]
    2bb8:	2b01      	cmp	r3, #1
    2bba:	d107      	bne.n	2bcc <_sercom_i2c_sync_send_address+0x48>
    2bbc:	68fb      	ldr	r3, [r7, #12]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d004      	beq.n	2bcc <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    2bc2:	697b      	ldr	r3, [r7, #20]
    2bc4:	0018      	movs	r0, r3
    2bc6:	4b38      	ldr	r3, [pc, #224]	; (2ca8 <_sercom_i2c_sync_send_address+0x124>)
    2bc8:	4798      	blx	r3
    2bca:	e003      	b.n	2bd4 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    2bcc:	697b      	ldr	r3, [r7, #20]
    2bce:	0018      	movs	r0, r3
    2bd0:	4b36      	ldr	r3, [pc, #216]	; (2cac <_sercom_i2c_sync_send_address+0x128>)
    2bd2:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    2bd4:	693b      	ldr	r3, [r7, #16]
    2bd6:	881b      	ldrh	r3, [r3, #0]
    2bd8:	001a      	movs	r2, r3
    2bda:	2380      	movs	r3, #128	; 0x80
    2bdc:	00db      	lsls	r3, r3, #3
    2bde:	4013      	ands	r3, r2
    2be0:	d028      	beq.n	2c34 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    2be2:	693b      	ldr	r3, [r7, #16]
    2be4:	885b      	ldrh	r3, [r3, #2]
    2be6:	b29b      	uxth	r3, r3
    2be8:	001a      	movs	r2, r3
    2bea:	2301      	movs	r3, #1
    2bec:	4013      	ands	r3, r2
    2bee:	d008      	beq.n	2c02 <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    2bf0:	693b      	ldr	r3, [r7, #16]
    2bf2:	885b      	ldrh	r3, [r3, #2]
    2bf4:	b29b      	uxth	r3, r3
    2bf6:	2280      	movs	r2, #128	; 0x80
    2bf8:	00d2      	lsls	r2, r2, #3
    2bfa:	4313      	orrs	r3, r2
    2bfc:	b29a      	uxth	r2, r3
    2bfe:	693b      	ldr	r3, [r7, #16]
    2c00:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    2c02:	693b      	ldr	r3, [r7, #16]
    2c04:	881b      	ldrh	r3, [r3, #0]
    2c06:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2c08:	001a      	movs	r2, r3
    2c0a:	4b29      	ldr	r3, [pc, #164]	; (2cb0 <_sercom_i2c_sync_send_address+0x12c>)
    2c0c:	401a      	ands	r2, r3
    2c0e:	0014      	movs	r4, r2
    2c10:	697b      	ldr	r3, [r7, #20]
    2c12:	0018      	movs	r0, r3
    2c14:	4b27      	ldr	r3, [pc, #156]	; (2cb4 <_sercom_i2c_sync_send_address+0x130>)
    2c16:	4798      	blx	r3
    2c18:	0002      	movs	r2, r0
    2c1a:	2380      	movs	r3, #128	; 0x80
    2c1c:	01db      	lsls	r3, r3, #7
    2c1e:	4013      	ands	r3, r2
    2c20:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    2c22:	2280      	movs	r2, #128	; 0x80
    2c24:	0212      	lsls	r2, r2, #8
    2c26:	431a      	orrs	r2, r3
    2c28:	697b      	ldr	r3, [r7, #20]
    2c2a:	0011      	movs	r1, r2
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b22      	ldr	r3, [pc, #136]	; (2cb8 <_sercom_i2c_sync_send_address+0x134>)
    2c30:	4798      	blx	r3
    2c32:	e01e      	b.n	2c72 <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    2c34:	693b      	ldr	r3, [r7, #16]
    2c36:	881b      	ldrh	r3, [r3, #0]
    2c38:	005b      	lsls	r3, r3, #1
    2c3a:	22ff      	movs	r2, #255	; 0xff
    2c3c:	4013      	ands	r3, r2
    2c3e:	693a      	ldr	r2, [r7, #16]
    2c40:	8852      	ldrh	r2, [r2, #2]
    2c42:	b292      	uxth	r2, r2
    2c44:	0011      	movs	r1, r2
    2c46:	2201      	movs	r2, #1
    2c48:	400a      	ands	r2, r1
    2c4a:	1e51      	subs	r1, r2, #1
    2c4c:	418a      	sbcs	r2, r1
    2c4e:	b2d2      	uxtb	r2, r2
    2c50:	4313      	orrs	r3, r2
    2c52:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    2c54:	697b      	ldr	r3, [r7, #20]
    2c56:	0018      	movs	r0, r3
    2c58:	4b16      	ldr	r3, [pc, #88]	; (2cb4 <_sercom_i2c_sync_send_address+0x130>)
    2c5a:	4798      	blx	r3
    2c5c:	0002      	movs	r2, r0
    2c5e:	2380      	movs	r3, #128	; 0x80
    2c60:	01db      	lsls	r3, r3, #7
    2c62:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    2c64:	0022      	movs	r2, r4
    2c66:	431a      	orrs	r2, r3
    2c68:	697b      	ldr	r3, [r7, #20]
    2c6a:	0011      	movs	r1, r2
    2c6c:	0018      	movs	r0, r3
    2c6e:	4b12      	ldr	r3, [pc, #72]	; (2cb8 <_sercom_i2c_sync_send_address+0x134>)
    2c70:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    2c72:	2308      	movs	r3, #8
    2c74:	18fa      	adds	r2, r7, r3
    2c76:	687b      	ldr	r3, [r7, #4]
    2c78:	0011      	movs	r1, r2
    2c7a:	0018      	movs	r0, r3
    2c7c:	4b0f      	ldr	r3, [pc, #60]	; (2cbc <_sercom_i2c_sync_send_address+0x138>)
    2c7e:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    2c80:	68b9      	ldr	r1, [r7, #8]
    2c82:	693a      	ldr	r2, [r7, #16]
    2c84:	697b      	ldr	r3, [r7, #20]
    2c86:	0018      	movs	r0, r3
    2c88:	4b0d      	ldr	r3, [pc, #52]	; (2cc0 <_sercom_i2c_sync_send_address+0x13c>)
    2c8a:	4798      	blx	r3
    2c8c:	0003      	movs	r3, r0
}
    2c8e:	0018      	movs	r0, r3
    2c90:	46bd      	mov	sp, r7
    2c92:	b007      	add	sp, #28
    2c94:	bd90      	pop	{r4, r7, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	00002455 	.word	0x00002455
    2c9c:	00000594 	.word	0x00000594
    2ca0:	00004358 	.word	0x00004358
    2ca4:	00001e5d 	.word	0x00001e5d
    2ca8:	00002531 	.word	0x00002531
    2cac:	0000255d 	.word	0x0000255d
    2cb0:	000007fe 	.word	0x000007fe
    2cb4:	00002675 	.word	0x00002675
    2cb8:	0000264d 	.word	0x0000264d
    2cbc:	00002b29 	.word	0x00002b29
    2cc0:	0000283d 	.word	0x0000283d

00002cc4 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    2cc4:	b590      	push	{r4, r7, lr}
    2cc6:	b087      	sub	sp, #28
    2cc8:	af00      	add	r7, sp, #0
    2cca:	6078      	str	r0, [r7, #4]
    2ccc:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    2cce:	687b      	ldr	r3, [r7, #4]
    2cd0:	691b      	ldr	r3, [r3, #16]
    2cd2:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	1e5a      	subs	r2, r3, #1
    2cd8:	4193      	sbcs	r3, r2
    2cda:	b2db      	uxtb	r3, r3
    2cdc:	4a3e      	ldr	r2, [pc, #248]	; (2dd8 <_i2c_m_sync_transfer+0x114>)
    2cde:	493f      	ldr	r1, [pc, #252]	; (2ddc <_i2c_m_sync_transfer+0x118>)
    2ce0:	0018      	movs	r0, r3
    2ce2:	4b3f      	ldr	r3, [pc, #252]	; (2de0 <_i2c_m_sync_transfer+0x11c>)
    2ce4:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    2ce6:	687b      	ldr	r3, [r7, #4]
    2ce8:	691b      	ldr	r3, [r3, #16]
    2cea:	1e5a      	subs	r2, r3, #1
    2cec:	4193      	sbcs	r3, r2
    2cee:	b2d8      	uxtb	r0, r3
    2cf0:	23b8      	movs	r3, #184	; 0xb8
    2cf2:	00da      	lsls	r2, r3, #3
    2cf4:	4b39      	ldr	r3, [pc, #228]	; (2ddc <_i2c_m_sync_transfer+0x118>)
    2cf6:	0019      	movs	r1, r3
    2cf8:	4b39      	ldr	r3, [pc, #228]	; (2de0 <_i2c_m_sync_transfer+0x11c>)
    2cfa:	4798      	blx	r3
	ASSERT(msg);
    2cfc:	683b      	ldr	r3, [r7, #0]
    2cfe:	1e5a      	subs	r2, r3, #1
    2d00:	4193      	sbcs	r3, r2
    2d02:	b2db      	uxtb	r3, r3
    2d04:	4a37      	ldr	r2, [pc, #220]	; (2de4 <_i2c_m_sync_transfer+0x120>)
    2d06:	4935      	ldr	r1, [pc, #212]	; (2ddc <_i2c_m_sync_transfer+0x118>)
    2d08:	0018      	movs	r0, r3
    2d0a:	4b35      	ldr	r3, [pc, #212]	; (2de0 <_i2c_m_sync_transfer+0x11c>)
    2d0c:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	885b      	ldrh	r3, [r3, #2]
    2d12:	b29b      	uxth	r3, r3
    2d14:	001a      	movs	r2, r3
    2d16:	2380      	movs	r3, #128	; 0x80
    2d18:	005b      	lsls	r3, r3, #1
    2d1a:	4013      	ands	r3, r2
    2d1c:	d002      	beq.n	2d24 <_i2c_m_sync_transfer+0x60>
		return I2C_ERR_BUSY;
    2d1e:	2306      	movs	r3, #6
    2d20:	425b      	negs	r3, r3
    2d22:	e054      	b.n	2dce <_i2c_m_sync_transfer+0x10a>
	}

	msg->flags |= I2C_M_BUSY;
    2d24:	683b      	ldr	r3, [r7, #0]
    2d26:	885b      	ldrh	r3, [r3, #2]
    2d28:	b29b      	uxth	r3, r3
    2d2a:	2280      	movs	r2, #128	; 0x80
    2d2c:	0052      	lsls	r2, r2, #1
    2d2e:	4313      	orrs	r3, r2
    2d30:	b29a      	uxth	r2, r3
    2d32:	683b      	ldr	r3, [r7, #0]
    2d34:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    2d36:	687b      	ldr	r3, [r7, #4]
    2d38:	683a      	ldr	r2, [r7, #0]
    2d3a:	ca13      	ldmia	r2!, {r0, r1, r4}
    2d3c:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    2d3e:	693b      	ldr	r3, [r7, #16]
    2d40:	0018      	movs	r0, r3
    2d42:	4b29      	ldr	r3, [pc, #164]	; (2de8 <_i2c_m_sync_transfer+0x124>)
    2d44:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	0018      	movs	r0, r3
    2d4a:	4b28      	ldr	r3, [pc, #160]	; (2dec <_i2c_m_sync_transfer+0x128>)
    2d4c:	4798      	blx	r3
    2d4e:	0003      	movs	r3, r0
    2d50:	617b      	str	r3, [r7, #20]

	if (ret) {
    2d52:	697b      	ldr	r3, [r7, #20]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d031      	beq.n	2dbc <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2d58:	687b      	ldr	r3, [r7, #4]
    2d5a:	885b      	ldrh	r3, [r3, #2]
    2d5c:	b29b      	uxth	r3, r3
    2d5e:	4a24      	ldr	r2, [pc, #144]	; (2df0 <_i2c_m_sync_transfer+0x12c>)
    2d60:	4013      	ands	r3, r2
    2d62:	b29a      	uxth	r2, r3
    2d64:	687b      	ldr	r3, [r7, #4]
    2d66:	805a      	strh	r2, [r3, #2]

		return ret;
    2d68:	697b      	ldr	r3, [r7, #20]
    2d6a:	e030      	b.n	2dce <_i2c_m_sync_transfer+0x10a>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    2d6c:	230c      	movs	r3, #12
    2d6e:	18fa      	adds	r2, r7, r3
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	0011      	movs	r1, r2
    2d74:	0018      	movs	r0, r3
    2d76:	4b1f      	ldr	r3, [pc, #124]	; (2df4 <_i2c_m_sync_transfer+0x130>)
    2d78:	4798      	blx	r3
    2d7a:	0003      	movs	r3, r0
    2d7c:	617b      	str	r3, [r7, #20]

		if (ret) {
    2d7e:	697b      	ldr	r3, [r7, #20]
    2d80:	2b00      	cmp	r3, #0
    2d82:	d013      	beq.n	2dac <_i2c_m_sync_transfer+0xe8>
			if (msg->flags & I2C_M_STOP) {
    2d84:	683b      	ldr	r3, [r7, #0]
    2d86:	885b      	ldrh	r3, [r3, #2]
    2d88:	b29b      	uxth	r3, r3
    2d8a:	b21b      	sxth	r3, r3
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	da03      	bge.n	2d98 <_i2c_m_sync_transfer+0xd4>
				_sercom_i2c_send_stop(hw);
    2d90:	693b      	ldr	r3, [r7, #16]
    2d92:	0018      	movs	r0, r3
    2d94:	4b18      	ldr	r3, [pc, #96]	; (2df8 <_i2c_m_sync_transfer+0x134>)
    2d96:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    2d98:	687b      	ldr	r3, [r7, #4]
    2d9a:	885b      	ldrh	r3, [r3, #2]
    2d9c:	b29b      	uxth	r3, r3
    2d9e:	4a14      	ldr	r2, [pc, #80]	; (2df0 <_i2c_m_sync_transfer+0x12c>)
    2da0:	4013      	ands	r3, r2
    2da2:	b29a      	uxth	r2, r3
    2da4:	687b      	ldr	r3, [r7, #4]
    2da6:	805a      	strh	r2, [r3, #2]

			return ret;
    2da8:	697b      	ldr	r3, [r7, #20]
    2daa:	e010      	b.n	2dce <_i2c_m_sync_transfer+0x10a>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    2dac:	68f9      	ldr	r1, [r7, #12]
    2dae:	687a      	ldr	r2, [r7, #4]
    2db0:	693b      	ldr	r3, [r7, #16]
    2db2:	0018      	movs	r0, r3
    2db4:	4b11      	ldr	r3, [pc, #68]	; (2dfc <_i2c_m_sync_transfer+0x138>)
    2db6:	4798      	blx	r3
    2db8:	0003      	movs	r3, r0
    2dba:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2dbc:	687b      	ldr	r3, [r7, #4]
    2dbe:	885b      	ldrh	r3, [r3, #2]
    2dc0:	b29b      	uxth	r3, r3
    2dc2:	001a      	movs	r2, r3
    2dc4:	2380      	movs	r3, #128	; 0x80
    2dc6:	005b      	lsls	r3, r3, #1
    2dc8:	4013      	ands	r3, r2
    2dca:	d1cf      	bne.n	2d6c <_i2c_m_sync_transfer+0xa8>
	}

	return ret;
    2dcc:	697b      	ldr	r3, [r7, #20]
}
    2dce:	0018      	movs	r0, r3
    2dd0:	46bd      	mov	sp, r7
    2dd2:	b007      	add	sp, #28
    2dd4:	bd90      	pop	{r4, r7, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	000005bf 	.word	0x000005bf
    2ddc:	00004358 	.word	0x00004358
    2de0:	00001e5d 	.word	0x00001e5d
    2de4:	000005c1 	.word	0x000005c1
    2de8:	000024d5 	.word	0x000024d5
    2dec:	00002b85 	.word	0x00002b85
    2df0:	fffffeff 	.word	0xfffffeff
    2df4:	00002b29 	.word	0x00002b29
    2df8:	0000281d 	.word	0x0000281d
    2dfc:	0000283d 	.word	0x0000283d

00002e00 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    2e00:	b580      	push	{r7, lr}
    2e02:	b084      	sub	sp, #16
    2e04:	af00      	add	r7, sp, #0
    2e06:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    2e08:	4b1a      	ldr	r3, [pc, #104]	; (2e74 <_i2c_m_enable_implementation+0x74>)
    2e0a:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    2e0c:	2304      	movs	r3, #4
    2e0e:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    2e10:	687b      	ldr	r3, [r7, #4]
    2e12:	1e5a      	subs	r2, r3, #1
    2e14:	4193      	sbcs	r3, r2
    2e16:	b2db      	uxtb	r3, r3
    2e18:	4a17      	ldr	r2, [pc, #92]	; (2e78 <_i2c_m_enable_implementation+0x78>)
    2e1a:	4918      	ldr	r1, [pc, #96]	; (2e7c <_i2c_m_enable_implementation+0x7c>)
    2e1c:	0018      	movs	r0, r3
    2e1e:	4b18      	ldr	r3, [pc, #96]	; (2e80 <_i2c_m_enable_implementation+0x80>)
    2e20:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	0018      	movs	r0, r3
    2e26:	4b17      	ldr	r3, [pc, #92]	; (2e84 <_i2c_m_enable_implementation+0x84>)
    2e28:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2e2a:	e016      	b.n	2e5a <_i2c_m_enable_implementation+0x5a>
		timeout--;
    2e2c:	68fb      	ldr	r3, [r7, #12]
    2e2e:	3b01      	subs	r3, #1
    2e30:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    2e32:	68fb      	ldr	r3, [r7, #12]
    2e34:	2b00      	cmp	r3, #0
    2e36:	dc10      	bgt.n	2e5a <_i2c_m_enable_implementation+0x5a>
			if (--timeout_attempt)
    2e38:	68bb      	ldr	r3, [r7, #8]
    2e3a:	3b01      	subs	r3, #1
    2e3c:	60bb      	str	r3, [r7, #8]
    2e3e:	68bb      	ldr	r3, [r7, #8]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d007      	beq.n	2e54 <_i2c_m_enable_implementation+0x54>
				timeout = 65535;
    2e44:	4b0b      	ldr	r3, [pc, #44]	; (2e74 <_i2c_m_enable_implementation+0x74>)
    2e46:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    2e48:	687b      	ldr	r3, [r7, #4]
    2e4a:	2110      	movs	r1, #16
    2e4c:	0018      	movs	r0, r3
    2e4e:	4b0e      	ldr	r3, [pc, #56]	; (2e88 <_i2c_m_enable_implementation+0x88>)
    2e50:	4798      	blx	r3
    2e52:	e002      	b.n	2e5a <_i2c_m_enable_implementation+0x5a>
				return I2C_ERR_BUSY;
    2e54:	2306      	movs	r3, #6
    2e56:	425b      	negs	r3, r3
    2e58:	e007      	b.n	2e6a <_i2c_m_enable_implementation+0x6a>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    2e5a:	687b      	ldr	r3, [r7, #4]
    2e5c:	0018      	movs	r0, r3
    2e5e:	4b0b      	ldr	r3, [pc, #44]	; (2e8c <_i2c_m_enable_implementation+0x8c>)
    2e60:	4798      	blx	r3
    2e62:	0003      	movs	r3, r0
    2e64:	2b01      	cmp	r3, #1
    2e66:	d1e1      	bne.n	2e2c <_i2c_m_enable_implementation+0x2c>
		}
	}
	return ERR_NONE;
    2e68:	2300      	movs	r3, #0
}
    2e6a:	0018      	movs	r0, r3
    2e6c:	46bd      	mov	sp, r7
    2e6e:	b004      	add	sp, #16
    2e70:	bd80      	pop	{r7, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	0000ffff 	.word	0x0000ffff
    2e78:	000005f4 	.word	0x000005f4
    2e7c:	00004358 	.word	0x00004358
    2e80:	00001e5d 	.word	0x00001e5d
    2e84:	000023fd 	.word	0x000023fd
    2e88:	00002745 	.word	0x00002745
    2e8c:	000026f1 	.word	0x000026f1

00002e90 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b084      	sub	sp, #16
    2e94:	af00      	add	r7, sp, #0
    2e96:	6078      	str	r0, [r7, #4]
    2e98:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    2e9a:	683b      	ldr	r3, [r7, #0]
    2e9c:	0018      	movs	r0, r3
    2e9e:	4b4f      	ldr	r3, [pc, #316]	; (2fdc <_i2c_m_sync_init_impl+0x14c>)
    2ea0:	4798      	blx	r3
    2ea2:	0003      	movs	r3, r0
    2ea4:	001a      	movs	r2, r3
    2ea6:	230f      	movs	r3, #15
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	2101      	movs	r1, #1
    2eb0:	0018      	movs	r0, r3
    2eb2:	4b4b      	ldr	r3, [pc, #300]	; (2fe0 <_i2c_m_sync_init_impl+0x150>)
    2eb4:	4798      	blx	r3
    2eb6:	0003      	movs	r3, r0
    2eb8:	001a      	movs	r2, r3
    2eba:	2301      	movs	r3, #1
    2ebc:	4053      	eors	r3, r2
    2ebe:	b2db      	uxtb	r3, r3
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d025      	beq.n	2f10 <_i2c_m_sync_init_impl+0x80>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2ec4:	230f      	movs	r3, #15
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	781a      	ldrb	r2, [r3, #0]
    2eca:	4946      	ldr	r1, [pc, #280]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2ecc:	0013      	movs	r3, r2
    2ece:	005b      	lsls	r3, r3, #1
    2ed0:	189b      	adds	r3, r3, r2
    2ed2:	00db      	lsls	r3, r3, #3
    2ed4:	18cb      	adds	r3, r1, r3
    2ed6:	3304      	adds	r3, #4
    2ed8:	681b      	ldr	r3, [r3, #0]
    2eda:	221c      	movs	r2, #28
    2edc:	4013      	ands	r3, r2
    2ede:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	2102      	movs	r1, #2
    2ee4:	0018      	movs	r0, r3
    2ee6:	4b40      	ldr	r3, [pc, #256]	; (2fe8 <_i2c_m_sync_init_impl+0x158>)
    2ee8:	4798      	blx	r3
    2eea:	1e03      	subs	r3, r0, #0
    2eec:	d008      	beq.n	2f00 <_i2c_m_sync_init_impl+0x70>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    2eee:	683b      	ldr	r3, [r7, #0]
    2ef0:	0018      	movs	r0, r3
    2ef2:	4b3e      	ldr	r3, [pc, #248]	; (2fec <_i2c_m_sync_init_impl+0x15c>)
    2ef4:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    2ef6:	683b      	ldr	r3, [r7, #0]
    2ef8:	2102      	movs	r1, #2
    2efa:	0018      	movs	r0, r3
    2efc:	4b3c      	ldr	r3, [pc, #240]	; (2ff0 <_i2c_m_sync_init_impl+0x160>)
    2efe:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    2f00:	68bb      	ldr	r3, [r7, #8]
    2f02:	2201      	movs	r2, #1
    2f04:	431a      	orrs	r2, r3
    2f06:	683b      	ldr	r3, [r7, #0]
    2f08:	0011      	movs	r1, r2
    2f0a:	0018      	movs	r0, r3
    2f0c:	4b39      	ldr	r3, [pc, #228]	; (2ff4 <_i2c_m_sync_init_impl+0x164>)
    2f0e:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	2101      	movs	r1, #1
    2f14:	0018      	movs	r0, r3
    2f16:	4b36      	ldr	r3, [pc, #216]	; (2ff0 <_i2c_m_sync_init_impl+0x160>)
    2f18:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    2f1a:	230f      	movs	r3, #15
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	781a      	ldrb	r2, [r3, #0]
    2f20:	4930      	ldr	r1, [pc, #192]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2f22:	0013      	movs	r3, r2
    2f24:	005b      	lsls	r3, r3, #1
    2f26:	189b      	adds	r3, r3, r2
    2f28:	00db      	lsls	r3, r3, #3
    2f2a:	18cb      	adds	r3, r1, r3
    2f2c:	3304      	adds	r3, #4
    2f2e:	681a      	ldr	r2, [r3, #0]
    2f30:	683b      	ldr	r3, [r7, #0]
    2f32:	0011      	movs	r1, r2
    2f34:	0018      	movs	r0, r3
    2f36:	4b2f      	ldr	r3, [pc, #188]	; (2ff4 <_i2c_m_sync_init_impl+0x164>)
    2f38:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2f3a:	230f      	movs	r3, #15
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	781a      	ldrb	r2, [r3, #0]
    2f40:	4928      	ldr	r1, [pc, #160]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2f42:	0013      	movs	r3, r2
    2f44:	005b      	lsls	r3, r3, #1
    2f46:	189b      	adds	r3, r3, r2
    2f48:	00db      	lsls	r3, r3, #3
    2f4a:	18cb      	adds	r3, r1, r3
    2f4c:	3308      	adds	r3, #8
    2f4e:	681a      	ldr	r2, [r3, #0]
    2f50:	683b      	ldr	r3, [r7, #0]
    2f52:	0011      	movs	r1, r2
    2f54:	0018      	movs	r0, r3
    2f56:	4b28      	ldr	r3, [pc, #160]	; (2ff8 <_i2c_m_sync_init_impl+0x168>)
    2f58:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    2f5a:	230f      	movs	r3, #15
    2f5c:	18fb      	adds	r3, r7, r3
    2f5e:	781a      	ldrb	r2, [r3, #0]
    2f60:	4920      	ldr	r1, [pc, #128]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2f62:	0013      	movs	r3, r2
    2f64:	005b      	lsls	r3, r3, #1
    2f66:	189b      	adds	r3, r3, r2
    2f68:	00db      	lsls	r3, r3, #3
    2f6a:	18cb      	adds	r3, r1, r3
    2f6c:	330c      	adds	r3, #12
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	683b      	ldr	r3, [r7, #0]
    2f72:	0011      	movs	r1, r2
    2f74:	0018      	movs	r0, r3
    2f76:	4b21      	ldr	r3, [pc, #132]	; (2ffc <_i2c_m_sync_init_impl+0x16c>)
    2f78:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    2f7a:	230f      	movs	r3, #15
    2f7c:	18fb      	adds	r3, r7, r3
    2f7e:	781a      	ldrb	r2, [r3, #0]
    2f80:	4918      	ldr	r1, [pc, #96]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2f82:	0013      	movs	r3, r2
    2f84:	005b      	lsls	r3, r3, #1
    2f86:	189b      	adds	r3, r3, r2
    2f88:	00db      	lsls	r3, r3, #3
    2f8a:	18cb      	adds	r3, r1, r3
    2f8c:	3304      	adds	r3, #4
    2f8e:	681b      	ldr	r3, [r3, #0]
    2f90:	0e1b      	lsrs	r3, r3, #24
    2f92:	b29b      	uxth	r3, r3
    2f94:	2203      	movs	r2, #3
    2f96:	4013      	ands	r3, r2
    2f98:	b29a      	uxth	r2, r3
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	899b      	ldrh	r3, [r3, #12]
    2fa2:	2201      	movs	r2, #1
    2fa4:	429a      	cmp	r2, r3
    2fa6:	419b      	sbcs	r3, r3
    2fa8:	425b      	negs	r3, r3
    2faa:	b2da      	uxtb	r2, r3
    2fac:	683b      	ldr	r3, [r7, #0]
    2fae:	0011      	movs	r1, r2
    2fb0:	0018      	movs	r0, r3
    2fb2:	4b13      	ldr	r3, [pc, #76]	; (3000 <_i2c_m_sync_init_impl+0x170>)
    2fb4:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    2fb6:	230f      	movs	r3, #15
    2fb8:	18fb      	adds	r3, r7, r3
    2fba:	781a      	ldrb	r2, [r3, #0]
    2fbc:	4909      	ldr	r1, [pc, #36]	; (2fe4 <_i2c_m_sync_init_impl+0x154>)
    2fbe:	0013      	movs	r3, r2
    2fc0:	005b      	lsls	r3, r3, #1
    2fc2:	189b      	adds	r3, r3, r2
    2fc4:	00db      	lsls	r3, r3, #3
    2fc6:	18cb      	adds	r3, r1, r3
    2fc8:	3312      	adds	r3, #18
    2fca:	881a      	ldrh	r2, [r3, #0]
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    2fd0:	2300      	movs	r3, #0
}
    2fd2:	0018      	movs	r0, r3
    2fd4:	46bd      	mov	sp, r7
    2fd6:	b004      	add	sp, #16
    2fd8:	bd80      	pop	{r7, pc}
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	00002791 	.word	0x00002791
    2fe0:	0000239b 	.word	0x0000239b
    2fe4:	20000000 	.word	0x20000000
    2fe8:	0000247d 	.word	0x0000247d
    2fec:	00002429 	.word	0x00002429
    2ff0:	0000237d 	.word	0x0000237d
    2ff4:	000024ad 	.word	0x000024ad
    2ff8:	000025c1 	.word	0x000025c1
    2ffc:	000025e9 	.word	0x000025e9
    3000:	00002601 	.word	0x00002601

00003004 <hri_sysctrl_get_PCLKSR_OSC8MRDY_bit>:
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
    3004:	b580      	push	{r7, lr}
    3006:	b082      	sub	sp, #8
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	68db      	ldr	r3, [r3, #12]
    3010:	08db      	lsrs	r3, r3, #3
    3012:	2201      	movs	r2, #1
    3014:	4013      	ands	r3, r2
    3016:	1e5a      	subs	r2, r3, #1
    3018:	4193      	sbcs	r3, r2
    301a:	b2db      	uxtb	r3, r3
}
    301c:	0018      	movs	r0, r3
    301e:	46bd      	mov	sp, r7
    3020:	b002      	add	sp, #8
    3022:	bd80      	pop	{r7, pc}

00003024 <hri_sysctrl_set_OSC32K_ENABLE_bit>:
{
	return ((Sysctrl *)hw)->XOSC32K.reg;
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
    3024:	b580      	push	{r7, lr}
    3026:	b082      	sub	sp, #8
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	699b      	ldr	r3, [r3, #24]
    3030:	2202      	movs	r2, #2
    3032:	431a      	orrs	r2, r3
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3038:	46c0      	nop			; (mov r8, r8)
    303a:	46bd      	mov	sp, r7
    303c:	b002      	add	sp, #8
    303e:	bd80      	pop	{r7, pc}

00003040 <hri_sysctrl_clear_OSC32K_ENABLE_bit>:
	((Sysctrl *)hw)->OSC32K.reg = tmp;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_clear_OSC32K_ENABLE_bit(const void *const hw)
{
    3040:	b580      	push	{r7, lr}
    3042:	b082      	sub	sp, #8
    3044:	af00      	add	r7, sp, #0
    3046:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    3048:	687b      	ldr	r3, [r7, #4]
    304a:	699b      	ldr	r3, [r3, #24]
    304c:	2202      	movs	r2, #2
    304e:	4393      	bics	r3, r2
    3050:	001a      	movs	r2, r3
    3052:	687b      	ldr	r3, [r7, #4]
    3054:	619a      	str	r2, [r3, #24]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	46bd      	mov	sp, r7
    305a:	b002      	add	sp, #8
    305c:	bd80      	pop	{r7, pc}

0000305e <hri_sysctrl_read_OSCULP32K_CALIB_bf>:
	((Sysctrl *)hw)->OSCULP32K.reg ^= SYSCTRL_OSCULP32K_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    305e:	b580      	push	{r7, lr}
    3060:	b084      	sub	sp, #16
    3062:	af00      	add	r7, sp, #0
    3064:	6078      	str	r0, [r7, #4]
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    3066:	230f      	movs	r3, #15
    3068:	18fb      	adds	r3, r7, r3
    306a:	687a      	ldr	r2, [r7, #4]
    306c:	7f12      	ldrb	r2, [r2, #28]
    306e:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    3070:	230f      	movs	r3, #15
    3072:	18fb      	adds	r3, r7, r3
    3074:	220f      	movs	r2, #15
    3076:	18ba      	adds	r2, r7, r2
    3078:	7812      	ldrb	r2, [r2, #0]
    307a:	211f      	movs	r1, #31
    307c:	400a      	ands	r2, r1
    307e:	701a      	strb	r2, [r3, #0]
	return tmp;
    3080:	230f      	movs	r3, #15
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
}
    3086:	0018      	movs	r0, r3
    3088:	46bd      	mov	sp, r7
    308a:	b004      	add	sp, #16
    308c:	bd80      	pop	{r7, pc}

0000308e <hri_sysctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
    308e:	b580      	push	{r7, lr}
    3090:	b082      	sub	sp, #8
    3092:	af00      	add	r7, sp, #0
    3094:	6078      	str	r0, [r7, #4]
    3096:	000a      	movs	r2, r1
    3098:	1cfb      	adds	r3, r7, #3
    309a:	701a      	strb	r2, [r3, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    309c:	687b      	ldr	r3, [r7, #4]
    309e:	1cfa      	adds	r2, r7, #3
    30a0:	7812      	ldrb	r2, [r2, #0]
    30a2:	771a      	strb	r2, [r3, #28]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    30a4:	46c0      	nop			; (mov r8, r8)
    30a6:	46bd      	mov	sp, r7
    30a8:	b002      	add	sp, #8
    30aa:	bd80      	pop	{r7, pc}

000030ac <hri_sysctrl_set_OSC8M_ONDEMAND_bit>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_RUNSTDBY;
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sysctrl_set_OSC8M_ONDEMAND_bit(const void *const hw)
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b082      	sub	sp, #8
    30b0:	af00      	add	r7, sp, #0
    30b2:	6078      	str	r0, [r7, #4]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	6a1b      	ldr	r3, [r3, #32]
    30b8:	2280      	movs	r2, #128	; 0x80
    30ba:	431a      	orrs	r2, r3
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    30c0:	46c0      	nop			; (mov r8, r8)
    30c2:	46bd      	mov	sp, r7
    30c4:	b002      	add	sp, #8
    30c6:	bd80      	pop	{r7, pc}

000030c8 <hri_sysctrl_read_OSC8M_CALIB_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_CALIB(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
    30c8:	b580      	push	{r7, lr}
    30ca:	b084      	sub	sp, #16
    30cc:	af00      	add	r7, sp, #0
    30ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	6a1b      	ldr	r3, [r3, #32]
    30d4:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    30d6:	68fb      	ldr	r3, [r7, #12]
    30d8:	0c1b      	lsrs	r3, r3, #16
    30da:	051b      	lsls	r3, r3, #20
    30dc:	0d1b      	lsrs	r3, r3, #20
    30de:	60fb      	str	r3, [r7, #12]
	return tmp;
    30e0:	68fb      	ldr	r3, [r7, #12]
}
    30e2:	0018      	movs	r0, r3
    30e4:	46bd      	mov	sp, r7
    30e6:	b004      	add	sp, #16
    30e8:	bd80      	pop	{r7, pc}

000030ea <hri_sysctrl_read_OSC8M_FRANGE_bf>:
	((Sysctrl *)hw)->OSC8M.reg ^= SYSCTRL_OSC8M_FRANGE(mask);
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
    30ea:	b580      	push	{r7, lr}
    30ec:	b084      	sub	sp, #16
    30ee:	af00      	add	r7, sp, #0
    30f0:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	6a1b      	ldr	r3, [r3, #32]
    30f6:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SYSCTRL_OSC8M_FRANGE_Msk) >> SYSCTRL_OSC8M_FRANGE_Pos;
    30f8:	68fb      	ldr	r3, [r7, #12]
    30fa:	0f9b      	lsrs	r3, r3, #30
    30fc:	60fb      	str	r3, [r7, #12]
	return tmp;
    30fe:	68fb      	ldr	r3, [r7, #12]
}
    3100:	0018      	movs	r0, r3
    3102:	46bd      	mov	sp, r7
    3104:	b004      	add	sp, #16
    3106:	bd80      	pop	{r7, pc}

00003108 <hri_sysctrl_write_OSC8M_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
    3108:	b580      	push	{r7, lr}
    310a:	b082      	sub	sp, #8
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
    3110:	6039      	str	r1, [r7, #0]
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    3112:	687b      	ldr	r3, [r7, #4]
    3114:	683a      	ldr	r2, [r7, #0]
    3116:	621a      	str	r2, [r3, #32]
	SYSCTRL_CRITICAL_SECTION_LEAVE();
}
    3118:	46c0      	nop			; (mov r8, r8)
    311a:	46bd      	mov	sp, r7
    311c:	b002      	add	sp, #8
    311e:	bd80      	pop	{r7, pc}

00003120 <_sysctrl_init_sources>:
 * \brief Initializes clock generators
 *
 * All GCLK generators are running when this function returns.
 */
void _sysctrl_init_sources(void)
{
    3120:	b580      	push	{r7, lr}
    3122:	b082      	sub	sp, #8
    3124:	af00      	add	r7, sp, #0
	void *   hw = (void *)SYSCTRL;
    3126:	4b24      	ldr	r3, [pc, #144]	; (31b8 <_sysctrl_init_sources+0x98>)
    3128:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_RUNSTDBY << SYSCTRL_XOSC_RUNSTDBY_Pos) | (CONF_XOSC_XTALEN << SYSCTRL_XOSC_XTALEN_Pos)
	        | (CONF_XOSC_ENABLE << SYSCTRL_XOSC_ENABLE_Pos));
#endif

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);
    312a:	687b      	ldr	r3, [r7, #4]
    312c:	0018      	movs	r0, r3
    312e:	4b23      	ldr	r3, [pc, #140]	; (31bc <_sysctrl_init_sources+0x9c>)
    3130:	4798      	blx	r3
    3132:	0002      	movs	r2, r0
    3134:	1cbb      	adds	r3, r7, #2
    3136:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	0018      	movs	r0, r3
    313c:	4b20      	ldr	r3, [pc, #128]	; (31c0 <_sysctrl_init_sources+0xa0>)
    313e:	4798      	blx	r3
    3140:	0003      	movs	r3, r0
    3142:	079a      	lsls	r2, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    3144:	1cbb      	adds	r3, r7, #2
    3146:	881b      	ldrh	r3, [r3, #0]
    3148:	041b      	lsls	r3, r3, #16
    314a:	0019      	movs	r1, r3
    314c:	4b1d      	ldr	r3, [pc, #116]	; (31c4 <_sysctrl_init_sources+0xa4>)
    314e:	400b      	ands	r3, r1
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    3150:	4313      	orrs	r3, r2
	hri_sysctrl_write_OSC8M_reg(hw,
    3152:	2202      	movs	r2, #2
    3154:	431a      	orrs	r2, r3
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	0011      	movs	r1, r2
    315a:	0018      	movs	r0, r3
    315c:	4b1a      	ldr	r3, [pc, #104]	; (31c8 <_sysctrl_init_sources+0xa8>)
    315e:	4798      	blx	r3
	        (CONF_OSC32K_WRTLOCK << SYSCTRL_OSC32K_WRTLOCK_Pos) | SYSCTRL_OSC32K_STARTUP(CONF_OSC32K_STARTUP)
	        | (CONF_OSC32K_RUNSTDBY << SYSCTRL_OSC32K_RUNSTDBY_Pos) | (CONF_OSC32K_EN1K << SYSCTRL_OSC32K_EN1K_Pos)
	        | (CONF_OSC32K_EN32K << SYSCTRL_OSC32K_EN32K_Pos) | (1 << SYSCTRL_OSC32K_ENABLE_Pos));
#else
	/* Enable OSC32K anyway since GCLK configuration may need it to sync */
	hri_sysctrl_set_OSC32K_ENABLE_bit(hw);
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	0018      	movs	r0, r3
    3164:	4b19      	ldr	r3, [pc, #100]	; (31cc <_sysctrl_init_sources+0xac>)
    3166:	4798      	blx	r3
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_sysctrl_read_OSCULP32K_CALIB_bf(hw);
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	0018      	movs	r0, r3
    316c:	4b18      	ldr	r3, [pc, #96]	; (31d0 <_sysctrl_init_sources+0xb0>)
    316e:	4798      	blx	r3
    3170:	0003      	movs	r3, r0
    3172:	001a      	movs	r2, r3
    3174:	1cbb      	adds	r3, r7, #2
    3176:	801a      	strh	r2, [r3, #0]

	hri_sysctrl_write_OSCULP32K_reg(hw,
    3178:	1cbb      	adds	r3, r7, #2
    317a:	881b      	ldrh	r3, [r3, #0]
    317c:	b2db      	uxtb	r3, r3
    317e:	221f      	movs	r2, #31
    3180:	4013      	ands	r3, r2
    3182:	b2da      	uxtb	r2, r3
    3184:	687b      	ldr	r3, [r7, #4]
    3186:	0011      	movs	r1, r2
    3188:	0018      	movs	r0, r3
    318a:	4b12      	ldr	r3, [pc, #72]	; (31d4 <_sysctrl_init_sources+0xb4>)
    318c:	4798      	blx	r3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	0018      	movs	r0, r3
    3194:	4b10      	ldr	r3, [pc, #64]	; (31d8 <_sysctrl_init_sources+0xb8>)
    3196:	4798      	blx	r3
    3198:	0003      	movs	r3, r0
    319a:	001a      	movs	r2, r3
    319c:	2301      	movs	r3, #1
    319e:	4053      	eors	r3, r2
    31a0:	b2db      	uxtb	r3, r3
    31a2:	2b00      	cmp	r3, #0
    31a4:	d1f4      	bne.n	3190 <_sysctrl_init_sources+0x70>
		;
#endif
#if CONF_OSC8M_ONDEMAND == 1
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
    31a6:	687b      	ldr	r3, [r7, #4]
    31a8:	0018      	movs	r0, r3
    31aa:	4b0c      	ldr	r3, [pc, #48]	; (31dc <_sysctrl_init_sources+0xbc>)
    31ac:	4798      	blx	r3
#endif
#endif

	(void)calib, (void)hw;
}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	46bd      	mov	sp, r7
    31b2:	b002      	add	sp, #8
    31b4:	bd80      	pop	{r7, pc}
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	40000800 	.word	0x40000800
    31bc:	000030c9 	.word	0x000030c9
    31c0:	000030eb 	.word	0x000030eb
    31c4:	0fff0000 	.word	0x0fff0000
    31c8:	00003109 	.word	0x00003109
    31cc:	00003025 	.word	0x00003025
    31d0:	0000305f 	.word	0x0000305f
    31d4:	0000308f 	.word	0x0000308f
    31d8:	00003005 	.word	0x00003005
    31dc:	000030ad 	.word	0x000030ad

000031e0 <_sysctrl_init_referenced_generators>:

void _sysctrl_init_referenced_generators(void)
{
    31e0:	b580      	push	{r7, lr}
    31e2:	b082      	sub	sp, #8
    31e4:	af00      	add	r7, sp, #0
	void *hw = (void *)SYSCTRL;
    31e6:	4b05      	ldr	r3, [pc, #20]	; (31fc <_sysctrl_init_referenced_generators+0x1c>)
    31e8:	607b      	str	r3, [r7, #4]
		;
#endif

#if CONF_OSC32K_CONFIG == 0 || CONF_OSC32K_ENABLE == 0
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
    31ea:	687b      	ldr	r3, [r7, #4]
    31ec:	0018      	movs	r0, r3
    31ee:	4b04      	ldr	r3, [pc, #16]	; (3200 <_sysctrl_init_referenced_generators+0x20>)
    31f0:	4798      	blx	r3
#endif

	(void)hw;
}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	40000800 	.word	0x40000800
    3200:	00003041 	.word	0x00003041

00003204 <user_touch_cb>:
#include "drv_mxt.h"
extern uint8_t tiny1617_fw[];
uint8_t ii;

int32_t user_touch_cb(uint8_t *msg)
{
    3204:	b580      	push	{r7, lr}
    3206:	b084      	sub	sp, #16
    3208:	af00      	add	r7, sp, #0
    320a:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
    320c:	2300      	movs	r3, #0
    320e:	60fb      	str	r3, [r7, #12]
	//msg[1]: status
	//msg[2-3]: x
	//msg[4-5]: y
	//check protocol for others & detail
	
	return ret;
    3210:	68fb      	ldr	r3, [r7, #12]
}
    3212:	0018      	movs	r0, r3
    3214:	46bd      	mov	sp, r7
    3216:	b004      	add	sp, #16
    3218:	bd80      	pop	{r7, pc}

0000321a <user_keys_cb>:


int32_t user_keys_cb(uint8_t *msg)
{
    321a:	b580      	push	{r7, lr}
    321c:	b084      	sub	sp, #16
    321e:	af00      	add	r7, sp, #0
    3220:	6078      	str	r0, [r7, #4]
	int32_t ret = 0;
    3222:	2300      	movs	r3, #0
    3224:	60fb      	str	r3, [r7, #12]
	//key data, after T series
	//msg[0]: report ID
	//msg[1-2]: status
	//check protocol for others & detail
	
	return ret;
    3226:	68fb      	ldr	r3, [r7, #12]
}
    3228:	0018      	movs	r0, r3
    322a:	46bd      	mov	sp, r7
    322c:	b004      	add	sp, #16
    322e:	bd80      	pop	{r7, pc}

00003230 <mxt_init>:

/*========================
mxt_init
========================*/
static int32_t mxt_init(void)
{
    3230:	b580      	push	{r7, lr}
    3232:	b082      	sub	sp, #8
    3234:	af00      	add	r7, sp, #0
    int32_t ret = 0;
    3236:	2300      	movs	r3, #0
    3238:	607b      	str	r3, [r7, #4]
    drv_mxt_power(1);
    drv_mxt_set_reset(1);
    delay_ms(100);
    */
    
    mxt_touch_cb = user_touch_cb;
    323a:	4b0b      	ldr	r3, [pc, #44]	; (3268 <mxt_init+0x38>)
    323c:	4a0b      	ldr	r2, [pc, #44]	; (326c <mxt_init+0x3c>)
    323e:	601a      	str	r2, [r3, #0]
    mxt_keys_cb = user_keys_cb;
    3240:	4b0b      	ldr	r3, [pc, #44]	; (3270 <mxt_init+0x40>)
    3242:	4a0c      	ldr	r2, [pc, #48]	; (3274 <mxt_init+0x44>)
    3244:	601a      	str	r2, [r3, #0]
    
    drv_mxt_init();
    3246:	4b0c      	ldr	r3, [pc, #48]	; (3278 <mxt_init+0x48>)
    3248:	4798      	blx	r3
	
    ret = drv_mxt_read_info();
    324a:	4b0c      	ldr	r3, [pc, #48]	; (327c <mxt_init+0x4c>)
    324c:	4798      	blx	r3
    324e:	0003      	movs	r3, r0
    3250:	607b      	str	r3, [r7, #4]
    
    if(ret)
    3252:	687b      	ldr	r3, [r7, #4]
    3254:	2b00      	cmp	r3, #0
    3256:	d001      	beq.n	325c <mxt_init+0x2c>
    {
        //failed to read mxt info 
		//user can add repeat read here. re-POR is recommended before retry. 
        return ret;
    3258:	687b      	ldr	r3, [r7, #4]
    325a:	e000      	b.n	325e <mxt_init+0x2e>
    
    
    /*
    enable_chg_irq();
    */
    return 0;
    325c:	2300      	movs	r3, #0
}
    325e:	0018      	movs	r0, r3
    3260:	46bd      	mov	sp, r7
    3262:	b002      	add	sp, #8
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	200001c8 	.word	0x200001c8
    326c:	00003205 	.word	0x00003205
    3270:	200000c0 	.word	0x200000c0
    3274:	0000321b 	.word	0x0000321b
    3278:	00001975 	.word	0x00001975
    327c:	00001785 	.word	0x00001785

00003280 <set_chg>:

void set_chg()
{
    3280:	b580      	push	{r7, lr}
    3282:	af00      	add	r7, sp, #0
	
}
    3284:	46c0      	nop			; (mov r8, r8)
    3286:	46bd      	mov	sp, r7
    3288:	bd80      	pop	{r7, pc}

0000328a <set_reset>:

void set_reset()
{
    328a:	b580      	push	{r7, lr}
    328c:	af00      	add	r7, sp, #0
	
}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	46bd      	mov	sp, r7
    3292:	bd80      	pop	{r7, pc}

00003294 <set_power>:

void set_power()
{
    3294:	b580      	push	{r7, lr}
    3296:	af00      	add	r7, sp, #0
	
}
    3298:	46c0      	nop			; (mov r8, r8)
    329a:	46bd      	mov	sp, r7
    329c:	bd80      	pop	{r7, pc}

0000329e <read_chg>:
bool read_chg()
{	
    329e:	b580      	push	{r7, lr}
    32a0:	af00      	add	r7, sp, #0
	return false;
    32a2:	2300      	movs	r3, #0
}
    32a4:	0018      	movs	r0, r3
    32a6:	46bd      	mov	sp, r7
    32a8:	bd80      	pop	{r7, pc}
	...

000032ac <drv_mxt_task>:

void drv_mxt_task()
{
    32ac:	b590      	push	{r4, r7, lr}
    32ae:	b083      	sub	sp, #12
    32b0:	af00      	add	r7, sp, #0
	int32_t ret;
	uint8_t state = drv_mxt_read_state();
    32b2:	1dfc      	adds	r4, r7, #7
    32b4:	4b1e      	ldr	r3, [pc, #120]	; (3330 <drv_mxt_task+0x84>)
    32b6:	4798      	blx	r3
    32b8:	0003      	movs	r3, r0
    32ba:	7023      	strb	r3, [r4, #0]
	
	switch(state)
    32bc:	1dfb      	adds	r3, r7, #7
    32be:	781b      	ldrb	r3, [r3, #0]
    32c0:	3b03      	subs	r3, #3
    32c2:	2b04      	cmp	r3, #4
    32c4:	d821      	bhi.n	330a <drv_mxt_task+0x5e>
    32c6:	009a      	lsls	r2, r3, #2
    32c8:	4b1a      	ldr	r3, [pc, #104]	; (3334 <drv_mxt_task+0x88>)
    32ca:	18d3      	adds	r3, r2, r3
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	469f      	mov	pc, r3
	{
		case MXT_UPDATE_CFG:
			ret = drv_mxt_update_cfg();
    32d0:	4b19      	ldr	r3, [pc, #100]	; (3338 <drv_mxt_task+0x8c>)
    32d2:	4798      	blx	r3
    32d4:	0003      	movs	r3, r0
    32d6:	603b      	str	r3, [r7, #0]
			if(ret)
    32d8:	683b      	ldr	r3, [r7, #0]
    32da:	2b00      	cmp	r3, #0
    32dc:	d017      	beq.n	330e <drv_mxt_task+0x62>
			{
				//send update data fail
				drv_mxt_set_state(MXT_NORMAL);
    32de:	2002      	movs	r0, #2
    32e0:	4b16      	ldr	r3, [pc, #88]	; (333c <drv_mxt_task+0x90>)
    32e2:	4798      	blx	r3
			}
			break;
    32e4:	e013      	b.n	330e <drv_mxt_task+0x62>
			
		case MXT_UPDATE_CFG_WAIT:
			drv_mxt_set_state(MXT_NORMAL);
    32e6:	2002      	movs	r0, #2
    32e8:	4b14      	ldr	r3, [pc, #80]	; (333c <drv_mxt_task+0x90>)
    32ea:	4798      	blx	r3
			break;
    32ec:	e010      	b.n	3310 <drv_mxt_task+0x64>
		//cfg update sucess
		case MXT_UPDATE_CFG_SUCCESS:
			drv_mxt_set_state(MXT_NORMAL);
    32ee:	2002      	movs	r0, #2
    32f0:	4b12      	ldr	r3, [pc, #72]	; (333c <drv_mxt_task+0x90>)
    32f2:	4798      	blx	r3
			break;		
    32f4:	e00c      	b.n	3310 <drv_mxt_task+0x64>
		
		//cfg update fail	
		case MXT_UPDATE_CFG_FAIL:
			drv_mxt_set_state(MXT_NORMAL);
    32f6:	2002      	movs	r0, #2
    32f8:	4b10      	ldr	r3, [pc, #64]	; (333c <drv_mxt_task+0x90>)
    32fa:	4798      	blx	r3
			break;
    32fc:	e008      	b.n	3310 <drv_mxt_task+0x64>
		
		case MXT_SW_RESET:
			drv_mxt_sw_reset();
    32fe:	4b10      	ldr	r3, [pc, #64]	; (3340 <drv_mxt_task+0x94>)
    3300:	4798      	blx	r3
			drv_mxt_set_state(MXT_NORMAL);
    3302:	2002      	movs	r0, #2
    3304:	4b0d      	ldr	r3, [pc, #52]	; (333c <drv_mxt_task+0x90>)
    3306:	4798      	blx	r3
		break;
    3308:	e002      	b.n	3310 <drv_mxt_task+0x64>
		
		case MXT_ERROR:
		default:
		break;
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	e000      	b.n	3310 <drv_mxt_task+0x64>
			break;
    330e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(!read_chg())
    3310:	4b0c      	ldr	r3, [pc, #48]	; (3344 <drv_mxt_task+0x98>)
    3312:	4798      	blx	r3
    3314:	0003      	movs	r3, r0
    3316:	001a      	movs	r2, r3
    3318:	2301      	movs	r3, #1
    331a:	4053      	eors	r3, r2
    331c:	b2db      	uxtb	r3, r3
    331e:	2b00      	cmp	r3, #0
    3320:	d001      	beq.n	3326 <drv_mxt_task+0x7a>
	{
		drv_mxt_irq();
    3322:	4b09      	ldr	r3, [pc, #36]	; (3348 <drv_mxt_task+0x9c>)
    3324:	4798      	blx	r3
	}
}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	46bd      	mov	sp, r7
    332a:	b003      	add	sp, #12
    332c:	bd90      	pop	{r4, r7, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	00001991 	.word	0x00001991
    3334:	00004388 	.word	0x00004388
    3338:	000015d9 	.word	0x000015d9
    333c:	000019a5 	.word	0x000019a5
    3340:	000019c5 	.word	0x000019c5
    3344:	0000329f 	.word	0x0000329f
    3348:	000018bd 	.word	0x000018bd

0000334c <drv_mxt_main>:


void drv_mxt_main(void)
{
    334c:	b580      	push	{r7, lr}
    334e:	b082      	sub	sp, #8
    3350:	af00      	add	r7, sp, #0
	int32_t ret;
		
	set_chg();
    3352:	4b09      	ldr	r3, [pc, #36]	; (3378 <drv_mxt_main+0x2c>)
    3354:	4798      	blx	r3
	set_reset();
    3356:	4b09      	ldr	r3, [pc, #36]	; (337c <drv_mxt_main+0x30>)
    3358:	4798      	blx	r3
	set_power();
    335a:	4b09      	ldr	r3, [pc, #36]	; (3380 <drv_mxt_main+0x34>)
    335c:	4798      	blx	r3
	
	ret = mxt_init();
    335e:	4b09      	ldr	r3, [pc, #36]	; (3384 <drv_mxt_main+0x38>)
    3360:	4798      	blx	r3
    3362:	0003      	movs	r3, r0
    3364:	607b      	str	r3, [r7, #4]
	//!! must add  delay after power on, check the datasheet for delay time
	
	if(ret)
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	2b00      	cmp	r3, #0
    336a:	d002      	beq.n	3372 <drv_mxt_main+0x26>
	{
		//init fail
		drv_mxt_set_state(MXT_ERROR);
    336c:	2008      	movs	r0, #8
    336e:	4b06      	ldr	r3, [pc, #24]	; (3388 <drv_mxt_main+0x3c>)
    3370:	4798      	blx	r3
	}
	
	while(1)
	{
		drv_mxt_task();
    3372:	4b06      	ldr	r3, [pc, #24]	; (338c <drv_mxt_main+0x40>)
    3374:	4798      	blx	r3
    3376:	e7fc      	b.n	3372 <drv_mxt_main+0x26>
    3378:	00003281 	.word	0x00003281
    337c:	0000328b 	.word	0x0000328b
    3380:	00003295 	.word	0x00003295
    3384:	00003231 	.word	0x00003231
    3388:	000019a5 	.word	0x000019a5
    338c:	000032ad 	.word	0x000032ad

00003390 <main>:
	}
}

int main(void)
{
    3390:	b580      	push	{r7, lr}
    3392:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    3394:	4b02      	ldr	r3, [pc, #8]	; (33a0 <main+0x10>)
    3396:	4798      	blx	r3
//	ii = tiny1617_fw[0];


	drv_mxt_main();
    3398:	4b02      	ldr	r3, [pc, #8]	; (33a4 <main+0x14>)
    339a:	4798      	blx	r3
	
	/* Replace with your application code */
	while (1) {
    339c:	e7fe      	b.n	339c <main+0xc>
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	00000115 	.word	0x00000115
    33a4:	0000334d 	.word	0x0000334d

000033a8 <__libc_init_array>:
    33a8:	b570      	push	{r4, r5, r6, lr}
    33aa:	2600      	movs	r6, #0
    33ac:	4d0c      	ldr	r5, [pc, #48]	; (33e0 <__libc_init_array+0x38>)
    33ae:	4c0d      	ldr	r4, [pc, #52]	; (33e4 <__libc_init_array+0x3c>)
    33b0:	1b64      	subs	r4, r4, r5
    33b2:	10a4      	asrs	r4, r4, #2
    33b4:	42a6      	cmp	r6, r4
    33b6:	d109      	bne.n	33cc <__libc_init_array+0x24>
    33b8:	2600      	movs	r6, #0
    33ba:	f000 ffef 	bl	439c <_init>
    33be:	4d0a      	ldr	r5, [pc, #40]	; (33e8 <__libc_init_array+0x40>)
    33c0:	4c0a      	ldr	r4, [pc, #40]	; (33ec <__libc_init_array+0x44>)
    33c2:	1b64      	subs	r4, r4, r5
    33c4:	10a4      	asrs	r4, r4, #2
    33c6:	42a6      	cmp	r6, r4
    33c8:	d105      	bne.n	33d6 <__libc_init_array+0x2e>
    33ca:	bd70      	pop	{r4, r5, r6, pc}
    33cc:	00b3      	lsls	r3, r6, #2
    33ce:	58eb      	ldr	r3, [r5, r3]
    33d0:	4798      	blx	r3
    33d2:	3601      	adds	r6, #1
    33d4:	e7ee      	b.n	33b4 <__libc_init_array+0xc>
    33d6:	00b3      	lsls	r3, r6, #2
    33d8:	58eb      	ldr	r3, [r5, r3]
    33da:	4798      	blx	r3
    33dc:	3601      	adds	r6, #1
    33de:	e7f2      	b.n	33c6 <__libc_init_array+0x1e>
    33e0:	000043a8 	.word	0x000043a8
    33e4:	000043a8 	.word	0x000043a8
    33e8:	000043a8 	.word	0x000043a8
    33ec:	000043ac 	.word	0x000043ac

000033f0 <memcmp>:
    33f0:	b530      	push	{r4, r5, lr}
    33f2:	2400      	movs	r4, #0
    33f4:	42a2      	cmp	r2, r4
    33f6:	d101      	bne.n	33fc <memcmp+0xc>
    33f8:	2000      	movs	r0, #0
    33fa:	e005      	b.n	3408 <memcmp+0x18>
    33fc:	5d03      	ldrb	r3, [r0, r4]
    33fe:	1c65      	adds	r5, r4, #1
    3400:	5d0c      	ldrb	r4, [r1, r4]
    3402:	42a3      	cmp	r3, r4
    3404:	d001      	beq.n	340a <memcmp+0x1a>
    3406:	1b18      	subs	r0, r3, r4
    3408:	bd30      	pop	{r4, r5, pc}
    340a:	002c      	movs	r4, r5
    340c:	e7f2      	b.n	33f4 <memcmp+0x4>

0000340e <memcpy>:
    340e:	2300      	movs	r3, #0
    3410:	b510      	push	{r4, lr}
    3412:	429a      	cmp	r2, r3
    3414:	d100      	bne.n	3418 <memcpy+0xa>
    3416:	bd10      	pop	{r4, pc}
    3418:	5ccc      	ldrb	r4, [r1, r3]
    341a:	54c4      	strb	r4, [r0, r3]
    341c:	3301      	adds	r3, #1
    341e:	e7f8      	b.n	3412 <memcpy+0x4>
    3420:	682f2e2e 	.word	0x682f2e2e
    3424:	702f6c70 	.word	0x702f6c70
    3428:	2f74726f 	.word	0x2f74726f
    342c:	5f6c7068 	.word	0x5f6c7068
    3430:	6f697067 	.word	0x6f697067
    3434:	7361625f 	.word	0x7361625f
    3438:	00682e65 	.word	0x00682e65
    343c:	682f2e2e 	.word	0x682f2e2e
    3440:	702f6c70 	.word	0x702f6c70
    3444:	70682f6d 	.word	0x70682f6d
    3448:	6d705f6c 	.word	0x6d705f6c
    344c:	7361625f 	.word	0x7361625f
    3450:	00682e65 	.word	0x00682e65

00003454 <file_magic_code>:
    3454:	5f50424f 20574152 00003156              OBP_RAW V1..

00003460 <file_device_info>:
    3460:	ac1039a4 00281420                       .9.. .(.

00003468 <file_block_info_crc>:
    3468:	00eaf415                                ....

0000346c <file_cfg_crc>:
    346c:	00c70279                                y...

00003470 <file_cfg_data>:
    3470:	00d70075 00000000 00000000 00000000     u...............
	...
    3548:	01750000 000000d7 00000000 00000000     ..u.............
	...
    3624:	00d70275 00000000 00000000 00000000     u...............
	...
    36fc:	03750000 000000d7 00000000 00000000     ..u.............
	...
    37d8:	00d70475 00000000 00000000 00000000     u...............
	...
    38b0:	05750000 000000d7 00000000 00000000     ..u.............
	...
    398c:	00490044 00000000 00000000 00000000     D.I.............
	...
    39d8:	3c400026 00000025 00010101 00000000     &.@<%...........
	...
    3a18:	0e000000 00002100 00000000 00000000     .....!..........
	...
    3a3c:	0e000000 00002101 00000000 00000000     .....!..........
	...
    3a60:	47000000 0100c800 01000000 01000000     ...G............
    3a70:	02000000 b00f0000 00000000 00010101     ................
	...
    3b2c:	006e0000 e1000128 b104e102 a9057104     ..n.(........q..
    3b3c:	21070105 71074107 31075907 b1083108     ...!.A.q.Y.1.1..
    3b4c:	81090108 01000108 01000100 28016e00     .............n.(
    3b5c:	03f90001 03a904c1 02f90389 029102c1     ................
    3b6c:	00c10251 03990461 00e10321 00010001     Q...a...!.......
    3b7c:	00010001 00010001 0128026e 89043100     ........n.(..1..
    3b8c:	c9040104 d1026903 61028902 51000102     .....i.....a...Q
    3b9c:	b102d104 0100a902 01000100 01000100     ................
    3bac:	6e000100 00012803 04e102e1 057104b1     ...n.(........q.
    3bbc:	070105a9 07410721 07590771 08310831     ....!.A.q.Y.1.1.
    3bcc:	090108b1 00010881 00010001 046e0001     ..............n.
    3bdc:	f9000128 a904c103 f9038903 9102c102     (...............
    3bec:	c1025102 99046100 e1032103 01000100     .Q...a...!......
    3bfc:	01000100 01000100 28056e00 04310001     .........n.(..1.
    3c0c:	04010489 026903c9 028902d1 00010261     ......i.....a...
    3c1c:	02d10451 00a902b1 00010001 00010001     Q...............
    3c2c:	00010001 cb28066e cb0fcb0f cb0fcb0f     ....n.(.........
    3c3c:	cb0fcb0f cb0fcb0f cb0fcb0f cb0fcb0f     ................
    3c4c:	cb0fcb0f 030fcb0f 03000300 6e000300     ...............n
    3c5c:	00032807 010b0113 011b011b 011b011b     .(..............
    3c6c:	0123011b 010b0133 011b0113 01430133     ..#.3.......3.C.
    3c7c:	00030003 00030003 086e0003 13000328     ..........n.(...
    3c8c:	1b011301 23011b01 23012301 43012301     .......#.#.#.#.C
    3c9c:	23010b01 3b012301 03000301 03000300     ...#.#.;........
    3cac:	03000300 03007600 85000000 00002a00     .....v.......*..
	...
    3ce4:	3c070007 0042320c 00080000 0800240f     ...<.2B......$..
    3cf4:	0000c808 0bc40f00 80000101 030b000f     ................
    3d04:	0302101b 024b0e00 010f000f 0000000b     ......K.........
	...
    3d1c:	00020012 10001300 03000001 00000000     ................
	...
    3d34:	00130018 00000000 00000000 00000000     ................
    3d44:	00000000 00190000 a800031b d84c2c61     ............a,L.
    3d54:	004e2059 c8000000 070809c4 00000000     Y N.............
    3d64:	00000000 0007001b 00000000 00280000     ..............(.
    3d74:	00000007 00000000 000e002a 00000000     ........*.......
	...
    3d8c:	18002e00 10100000 00000000 0000ff00     ................
	...
    3da8:	00240038 00000000 00000000 00000000     8.$.............
	...
    3dcc:	3d000000 00000500 3dc35000 00000501     ...=.....P.=....
    3ddc:	3d753000 00000502 3d000000 00000503     .0u=.......=....
    3dec:	3d000000 00000504 3d000000 00000505     ...=.......=....
    3dfc:	41000000 08011700 00000000 00000000     ...A............
    3e0c:	0000000a 00000000 00000000 17014100     .............A..
	...
    3e30:	41000000 00001702 00000000 00000000     ...A............
	...
    3e4c:	0a004600 3d000200 01010000 01460000     .F.....=......F.
    3e5c:	0002000a 0101003d 46000005 0b000a02     ....=......F....
    3e6c:	01003d00 00000901 000a0346 003d000a     .=......F.....=.
    3e7c:	000d0101 0a044600 08000d01 0e060000     .....F..........
    3e8c:	05460300 000d010a 00000046 46000012     ..F.....F......F
    3e9c:	0e010a06 01004600 00001300 010a0746     .....F......F...
    3eac:	0046000e 00140002 0a084600 46000e01     ..F......F.....F
    3ebc:	15000300 09460000 000e010a 0a000008     ......F.........
    3ecc:	46020016 00000a0a 00000000 00000000     ...F............
    3edc:	000a0b46 00000000 00000000 0a0c4600     F............F..
	...
    3ef4:	0d460000 0000000a 00000000 46000000     ..F............F
    3f04:	00000a0e 00000000 00000000 000a0f46     ............F...
	...
    3f1c:	0a104600 00000000 00000000 11460000     .F............F.
    3f2c:	0000000a 00000000 46000000 00000a12     ...........F....
	...
    3f44:	000a1346 00000000 00000000 59004800     F............H.Y
    3f54:	0100007d 0001ff00 00000a00 46210a00     }.............!F
    3f64:	5d000e0d 05463701 18187355 10181818     ...].7F.Us......
    3f74:	10101010 00230000 05463701 20207355     ......#..7F.Us  
    3f84:	18202020 18181818 532d0a00 05463709        .......-S.7F.
    3f94:	40408c55 20404040 20202020 85000800     U.@@@@@     ....
    3fa4:	03000000 00000002 0c004e00 00000000     .........N......
	...
    3fbc:	0004004f 4f000000 00000401 024f0000     O......O......O.
    3fcc:	00000004 0e005000 00000001 4600c500     .....P.........F
    3fdc:	00004805 00640000 00008748 05000000     .H....d.H.......
    3fec:	3c1b0000 04ff0000 2d0f0000 003c1000     ...<.......-..<.
    3ffc:	0002cf00 370a0e00 0000230a 000a3c0a     .......7.#...<..
    400c:	00010202 32dc420a 00030005 00080000     .....B.2........
	...
    402c:	20006500 00000000 00000000 00000000     .e. ............
	...
    4050:	010b0068 2314461c 14461608 006c0823     h....F.#..F.#.l.
    4060:	0000004b 00000000 00000000 00000000     K...............
	...
    40ac:	0a11006d 00000500 00000000 00000000     m...............
    40bc:	00000000 0020006f 10324108 00030510     ....o. ..A2.....
    40cc:	000000ff 00000000 35000500 0000002d     ...........5-...
    40dc:	00000000 6f000000 08002001 00000000     .......o. ......
	...
    4104:	026f0000 41080020 00181832 00000000     ..o. ..A2.......
	...
    4128:	05007000 00000000 05017000 00000000     .p.......p......
    4138:	03007100 81000c01 00000600 00000000     .q..............
    4148:	00001254 00001270 0000128e 000013a2     T...p...........
    4158:	000012a0 000013a2 000013a2 000013a2     ................
    4168:	000013a2 000013a2 000012f4 000013a2     ................
    4178:	000013a2 000013a2 0000133e 000013a2     ........>.......
    4188:	000013a2 000013a2 000013a2 000013a2     ................
    4198:	0000130e 000013a2 000013a2 000013a2     ................
    41a8:	000013a2 000013a2 000013a2 000013a2     ................
    41b8:	000013a2 000013a2 000013a2 000013a2     ................
    41c8:	000013a2 0000134c 000013a2 000013a2     ....L...........
    41d8:	000013a2 000013a2 000013a2 0000132c     ............,...
    41e8:	000013a2 000013a2 000013a2 000013a2     ................
    41f8:	000013a2 000013a2 000013a2 000013a2     ................
    4208:	000013a2 000013a2 000013a2 000013a2     ................
    4218:	000013a2 000013a2 000013a2 000013a2     ................
    4228:	000013a2 000013a2 000013a2 000013a2     ................
    4238:	000013a2 000013a2 000013a2 000013a2     ................
    4248:	000013a2 000013a2 000013a2 000013a2     ................
    4258:	000013a2 000013a2 000013a2 000013a2     ................
    4268:	000013a2 000013a2 000013a2 000013a2     ................
    4278:	000013a2 000013a2 000013a2 000013a2     ................
    4288:	000013a2 000013a2 000013a2 000013a2     ................
    4298:	000013a2 000013a2 000013a2 000013a2     ................
    42a8:	000013a2 000013a2 000013a2 000013a2     ................
    42b8:	000013a2 000013a2 000013a2 0000135e     ............^...
    42c8:	5f50424f 20574152 00003156              OBP_RAW V1..

000042d4 <crcpoly.45144>:
    42d4:	0080001b 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    42e4:	695f6c61 6d5f6332 6e79735f 00632e63     al_i2c_m_sync.c.
    42f4:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    4304:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    4314:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
    4324:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    4334:	6c5f736c 2e747369 00000063 682f2e2e     ls_list.c...../h
    4344:	722f6c70 682f6374 725f6c70 632e6374     pl/rtc/hpl_rtc.c
    4354:	00000000 682f2e2e 732f6c70 6f637265     ....../hpl/serco
    4364:	70682f6d 65735f6c 6d6f6372 0000632e     m/hpl_sercom.c..

00004374 <sercomspi_regs>:
	...
    4388:	000032d0 000032e6 000032ee 000032f6     .2...2...2...2..
    4398:	000032fe                                .2..

0000439c <_init>:
    439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43a2:	bc08      	pop	{r3}
    43a4:	469e      	mov	lr, r3
    43a6:	4770      	bx	lr

000043a8 <__init_array_start>:
    43a8:	000000dd 	.word	0x000000dd

000043ac <_fini>:
    43ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43ae:	46c0      	nop			; (mov r8, r8)
    43b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    43b2:	bc08      	pop	{r3}
    43b4:	469e      	mov	lr, r3
    43b6:	4770      	bx	lr

000043b8 <__fini_array_start>:
    43b8:	000000b5 	.word	0x000000b5
